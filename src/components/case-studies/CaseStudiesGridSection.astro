---
// Import from the correct index file
import { caseStudiesData } from '../../content/case-studies/_index.js';
import CaseStudyCard from './CaseStudyCard.astro';
import { getExactIndustryName, generateIndustrySlug, fuzzyMatchIndustry } from '../../utils/industryUtils.js';

export interface Props {
  data?: Array<any> | {
    title: string;
    subtitle: string;
    caseStudies?: Array<any>;
  };
}

const { data } = Astro.props;

// Use provided data or fall back to all case studies
const studies = Array.isArray(data) ? data : (data?.caseStudies || caseStudiesData?.caseStudies || []);
const title = Array.isArray(data) ? "Case Studies" : ((data as any)?.title || "Case Studies");
const subtitle = Array.isArray(data) ? "Real solutions, real results" : ((data as any)?.subtitle || "Real solutions, real results");

// Debug logging
console.log('Props data:', data);
console.log('Studies Array:', studies);
console.log('Studies Length:', studies?.length);
console.log('First Study:', studies?.[0]);

// Group case studies by industry
const groupedStudies = studies.reduce((acc, study) => {
  const industry = study.industry || 'Other';
  if (!acc[industry]) {
    acc[industry] = [];
  }
  acc[industry].push(study);
  return acc;
}, {} as Record<string, any[]>);

const industries = Object.keys(groupedStudies);
console.log('Industries:', industries);
console.log('Grouped Studies:', groupedStudies);

// Get URL parameters for initial tab selection
const urlParams = new URLSearchParams(Astro.url.search);
const initialIndustry = urlParams.get('industry');

// Function to find matching industry using our utility
function findMatchingIndustry(industryParam: string | null, availableIndustries: string[]): string | null {
  if (!industryParam) return null;
  
  // Decode URL parameter
  const decodedParam = decodeURIComponent(industryParam).replace(/\+/g, ' ');
  
  console.log('🔍 Industry matching process:');
  console.log('  - Raw URL Parameter:', industryParam);
  console.log('  - Decoded Parameter:', decodedParam);
  console.log('  - Available Industries:', availableIndustries);
  
  // Use our fuzzy matching utility function
  const fuzzyMatch = fuzzyMatchIndustry(decodedParam);
  
  if (fuzzyMatch) {
    console.log('  ✅ Fuzzy match found:', fuzzyMatch);
    return fuzzyMatch;
  }
  
  console.log('  ❌ No match found');
  return null;
}

const matchedIndustry = findMatchingIndustry(initialIndustry, industries);
const initialTab = matchedIndustry ? generateIndustrySlug(matchedIndustry) : 'all';

// Debug logging for URL parameter matching
console.log('🔗 URL Parameter Debug:');
console.log('  - Raw URL:', Astro.url.href);
console.log('  - Search Params:', Astro.url.search);
console.log('  - URL Industry Param:', initialIndustry);
console.log('  - Available Industries:', industries);
console.log('  - Matched Industry:', matchedIndustry);
console.log('  - Initial Tab:', initialTab);

// Additional debugging for tab generation
console.log('🔍 Tab Generation Debug:');
industries.forEach((industry, index) => {
  const tabSlug = generateIndustrySlug(industry);
  console.log(`  ${index + 1}. Industry: "${industry}" → Tab: "${tabSlug}"`);
});
---

<section id="case-studies-grid" class="pb-20">
  <div class="container mx-auto">

    <!-- Tabs Navigation -->
    <div class="flex flex-wrap justify-center mb-12">
      <div class="flex flex-wrap gap-1 md:gap-2 justify-center">
        <button 
          class={`tab-button px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm font-medium rounded-md transition-all duration-200 ${initialTab === 'all' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          data-tab="all"
        >
          All 
        </button>
        {industries.map((industry: string) => {
          // Use our utility function to generate consistent tab names
          const industryTab = generateIndustrySlug(industry);
          
          const isActive = initialTab === industryTab;
          
          // Debug logging for tab states
          console.log(`Tab "${industry}": tab="${industryTab}", isActive=${isActive}, initialTab="${initialTab}"`);
          
          return (
            <button 
              class={`tab-button px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm font-medium rounded-md transition-all duration-200 ${isActive ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
              data-tab={industryTab}
            >
              {industry}
            </button>
          );
        })}
      </div>
    </div>

    <!-- Tab Content -->
    <div class={`tab-content ${initialTab === 'all' ? '' : 'hidden'}`} data-tab="all">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
        {studies && studies.length > 0 ? (
          studies.map((study: any, index: number) => (
            <CaseStudyCard caseStudy={study} />
          ))
        ) : (
          <div class="col-span-full text-center py-12">
            <p class="text-gray-500">No case studies found.</p>
            <p class="text-gray-400 text-sm mt-2">Debug: studies length = {studies?.length}</p>
            <p class="text-gray-400 text-sm">Debug: caseStudiesData exists = {caseStudiesData ? 'Yes' : 'No'}</p>
          </div>
        )}
      </div>
    </div>

    {industries.map((industry: string) => {
      // Use our utility function to generate consistent tab names
      const industryTab = generateIndustrySlug(industry);
      
      const isActive = initialTab === industryTab;
      
      // Debug logging for content visibility
      console.log(`Content "${industry}": tab="${industryTab}", isActive=${isActive}, hidden=${!isActive}`);
      
      return (
        <div class={`tab-content ${isActive ? '' : 'hidden'}`} data-tab={industryTab}>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            {groupedStudies[industry].map((study: any, index: number) => (
              <CaseStudyCard caseStudy={study} />
            ))}
          </div>
        </div>
      );
    })}
  </div>
</section>

<script>
  // Tab functionality and scroll animations
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🔧 [CaseStudiesGrid] DOM loaded, initializing tabs...');
    
    // Debug: Log all tab buttons and their data-tab attributes
    const allTabButtons = document.querySelectorAll('.tab-button');
    console.log('🔍 [CaseStudiesGrid] Found tab buttons:', allTabButtons.length);
    allTabButtons.forEach((btn, index) => {
      const tabName = btn.getAttribute('data-tab');
      const textContent = btn.textContent?.trim();
      console.log(`  ${index + 1}. data-tab="${tabName}", text="${textContent}"`);
    });
    
    // Debug: Check if the specific tab exists
    const mobileUtilityTab = document.querySelector('[data-tab="mobile-apps-utility-delivery"]');
    console.log('🔍 [CaseStudiesGrid] Mobile Utility tab found:', !!mobileUtilityTab);
    if (mobileUtilityTab) {
      console.log('🔍 [CaseStudiesGrid] Mobile Utility tab text:', mobileUtilityTab.textContent?.trim());
    }
    
    // Debug: Log current URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const currentIndustry = urlParams.get('industry');
    console.log('🔍 [CaseStudiesGrid] Current URL industry param:', currentIndustry);
    
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    const caseStudyCards = document.querySelectorAll('.case-study-card');

    // Auto-activate tab based on URL parameter
    if (currentIndustry) {
      console.log('🔧 [CaseStudiesGrid] Auto-activating tab for industry:', currentIndustry);
      
      // Decode URL parameter and handle ampersands
      let decodedParam = decodeURIComponent(currentIndustry).replace(/\+/g, ' ');
      
      // Handle ampersands that might be part of the industry name
      // If the URL contains & but it's not a parameter separator, we need to handle it
      if (decodedParam.includes('&') && !decodedParam.includes('=')) {
        // This is likely part of the industry name, not a parameter separator
        console.log('🔧 [CaseStudiesGrid] Detected ampersand in industry name:', decodedParam);
      }
      console.log('🔧 [CaseStudiesGrid] Decoded param:', decodedParam);
      
      // Get available industries from the page
      const availableIndustries = Array.from(document.querySelectorAll('.tab-button'))
        .map(btn => btn.textContent?.trim())
        .filter(text => text && text !== 'All');
      
      console.log('🔧 [CaseStudiesGrid] Available industries:', availableIndustries);
      
      // Find matching industry (try exact match first, then slug match)
      let matchedIndustry = availableIndustries.find(industry => {
        const normalizedIndustry = industry.toLowerCase().trim();
        const normalizedParam = decodedParam.toLowerCase().trim();
        return normalizedIndustry === normalizedParam;
      });
      
      // If no exact match, try matching by slug
      if (!matchedIndustry) {
        console.log('🔧 [CaseStudiesGrid] Trying slug matching...');
        matchedIndustry = availableIndustries.find(industry => {
          const industrySlug = industry.toLowerCase()
            .replace(/\s*\/\s*/g, '-') // Replace "/" with "-"
            .replace(/\s*\(\s*/g, '-') // Replace "(" with "-"
            .replace(/\s*\)\s*/g, '') // Remove ")"
            .replace(/\s*&\s*/g, '-') // Replace "&" with "-"
            .replace(/\s+/g, '-') // Replace spaces with "-"
            .replace(/-+/g, '-') // Replace multiple dashes with single dash
            .replace(/^-|-$/g, ''); // Remove leading/trailing dashes
          
          const normalizedParam = decodedParam.toLowerCase().trim();
          const matches = industrySlug === normalizedParam;
          
          console.log(`   Checking "${industry}" → slug: "${industrySlug}" vs param: "${normalizedParam}" → ${matches}`);
          
          return matches;
        });
      }
      
      console.log('🔧 [CaseStudiesGrid] Matched industry:', matchedIndustry);
      
      if (matchedIndustry) {
        // Generate tab slug for the matched industry
        const targetTab = matchedIndustry.toLowerCase()
          .replace(/\s*\/\s*/g, '-') // Replace "/" with "-"
          .replace(/\s*\(\s*/g, '-') // Replace "(" with "-"
          .replace(/\s*\)\s*/g, '') // Remove ")"
          .replace(/\s*&\s*/g, '-') // Replace "&" with "-"
          .replace(/\s+/g, '-') // Replace spaces with "-"
          .replace(/-+/g, '-') // Replace multiple dashes with single dash
          .replace(/^-|-$/g, ''); // Remove leading/trailing dashes
        
        console.log('🔧 [CaseStudiesGrid] Target tab:', targetTab);
        
        // Find and activate the appropriate tab button
        const targetButton = document.querySelector(`[data-tab="${targetTab}"]`);
        if (targetButton) {
          console.log('🔧 [CaseStudiesGrid] Activating tab button:', targetButton.textContent?.trim());
          
          // Update button states
          tabButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-primary-600', 'text-white');
            btn.classList.add('bg-gray-100', 'text-gray-700');
          });
          targetButton.classList.add('active', 'bg-primary-600', 'text-white');
          targetButton.classList.remove('bg-gray-100', 'text-gray-700');
          
          // Show/hide tab content
          tabContents.forEach(content => {
            content.classList.add('hidden');
            if (content.getAttribute('data-tab') === targetTab) {
              content.classList.remove('hidden');
              console.log('🔧 [CaseStudiesGrid] Showing content for tab:', targetTab);
            }
          });
        } else {
          console.log('❌ [CaseStudiesGrid] Target button not found for tab:', targetTab);
        }
      } else {
        console.log('❌ [CaseStudiesGrid] No matching industry found for:', decodedParam);
      }
    } else {
      console.log('🔧 [CaseStudiesGrid] No industry parameter, showing "All" tab');
    }

    // Initialize scroll animations for cards
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 100); // Stagger animation
        }
      });
    }, observerOptions);

    // Observe all case study cards
    caseStudyCards.forEach(card => {
      observer.observe(card);
    });

    // Function to update URL without page reload
    function updateURL(tabName) {
      const url = new URL(window.location);
      if (tabName === 'all') {
        url.searchParams.delete('industry');
      } else {
        // Find the industry name that corresponds to this tab slug
        const availableIndustries = Array.from(document.querySelectorAll('.tab-button'))
          .map(btn => btn.textContent.trim())
          .filter(text => text !== 'All');
        
        // Find the industry that matches this tab slug
        const matchingIndustry = availableIndustries.find(industry => {
          const industrySlug = industry.toLowerCase()
            .replace(/\s*\/\s*/g, '-') // Replace "/" with "-"
            .replace(/\s*\(\s*/g, '-') // Replace "(" with "-"
            .replace(/\s*\)\s*/g, '') // Remove ")"
            .replace(/\s*&\s*/g, '-') // Replace "&" with "-"
            .replace(/\s+/g, '-') // Replace spaces with "-"
            .replace(/-+/g, '-') // Replace multiple dashes with single dash
            .replace(/^-|-$/g, ''); // Remove leading/trailing dashes
          return industrySlug === tabName;
        });
        
        if (matchingIndustry) {
          url.searchParams.set('industry', matchingIndustry);
        }
      }
      window.history.replaceState({}, '', url);
    }

    // Tab functionality
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        
        // Update button states
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-primary-600', 'text-white');
          btn.classList.add('bg-gray-100', 'text-gray-700');
        });
        button.classList.add('active', 'bg-primary-600', 'text-white');
        button.classList.remove('bg-gray-100', 'text-gray-700');
        
        // Show/hide tab content
        tabContents.forEach(content => {
          content.classList.add('hidden');
          if (content.getAttribute('data-tab') === targetTab) {
            content.classList.remove('hidden');
            
            // Re-observe cards in the newly shown tab
            const newCards = content.querySelectorAll('.case-study-card');
            newCards.forEach(card => {
              observer.observe(card);
            });
          }
        });

        // Update URL
        updateURL(targetTab);
      });
    });

    // Handle browser back/forward buttons
    window.addEventListener('popstate', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const industry = urlParams.get('industry');
      
      if (!industry) {
        // No industry parameter, show "All" tab
        const allButton = document.querySelector('[data-tab="all"]');
        if (allButton) {
          allButton.click();
        }
        return;
      }
      
      // Decode URL parameter and handle ampersands
      const decodedParam = decodeURIComponent(industry).replace(/\+/g, ' ');
      
      // Get available industries from the page
      const availableIndustries = Array.from(document.querySelectorAll('.tab-button'))
        .map(btn => btn.textContent?.trim())
        .filter(text => text && text !== 'All');
      
      // Simple fuzzy matching for client-side
      function findMatchingIndustry(industryParam, availableIndustries) {
        if (!industryParam) return null;
        
        const normalizedParam = industryParam.toLowerCase().trim();
        
        // First try exact match
        const exactMatch = availableIndustries.find(industry => 
          industry.toLowerCase() === normalizedParam
        );
        if (exactMatch) return exactMatch;
        
        // Then try partial match
        const partialMatch = availableIndustries.find(industry => {
          const normalizedIndustry = industry.toLowerCase();
          return normalizedIndustry.includes(normalizedParam) || 
                 normalizedParam.includes(normalizedIndustry);
        });
        
        return partialMatch;
      }
      
      const matchedIndustry = findMatchingIndustry(decodedParam, availableIndustries);
      
      if (matchedIndustry) {
        // Generate tab slug for the matched industry
        const targetTab = matchedIndustry.toLowerCase()
          .replace(/\s*\/\s*/g, '-') // Replace "/" with "-"
          .replace(/\s*\(\s*/g, '-') // Replace "(" with "-"
          .replace(/\s*\)\s*/g, '') // Remove ")"
          .replace(/\s+/g, '-') // Replace spaces with "-"
          .replace(/-+/g, '-') // Replace multiple dashes with single dash
          .replace(/^-|-$/g, ''); // Remove leading/trailing dashes
        
        // Find and click the appropriate tab button
        const targetButton = document.querySelector(`[data-tab="${targetTab}"]`);
        if (targetButton) {
          targetButton.click();
        }
      } else {
        // No match found, show "All" tab
        const allButton = document.querySelector('[data-tab="all"]');
        if (allButton) {
          allButton.click();
        }
      }
    });
  });
</script>

<style>
  /* Responsive tab adjustments */
  @media (max-width: 768px) {
    .tab-button {
      font-size: 0.875rem;
      padding: 0.5rem 1rem;
    }
  }
</style> 