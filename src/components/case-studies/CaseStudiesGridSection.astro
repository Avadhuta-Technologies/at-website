---
// Import from the correct index file
import { caseStudiesData } from '../../content/case-studies/_index.js';
import CaseStudyCard from './CaseStudyCard.astro';

export interface Props {
  data?: Array<any> | {
    title: string;
    subtitle: string;
    caseStudies?: Array<any>;
  };
}

const { data } = Astro.props;

// Use provided data or fall back to all case studies
const studies = Array.isArray(data) ? data : (data?.caseStudies || caseStudiesData?.caseStudies || []);
const title = Array.isArray(data) ? "Case Studies" : ((data as any)?.title || "Case Studies");
const subtitle = Array.isArray(data) ? "Real solutions, real results" : ((data as any)?.subtitle || "Real solutions, real results");

// Debug logging
console.log('Props data:', data);
console.log('Studies Array:', studies);
console.log('Studies Length:', studies?.length);
console.log('First Study:', studies?.[0]);

// Group case studies by industry
const groupedStudies = studies.reduce((acc, study) => {
  const industry = study.industry || 'Other';
  if (!acc[industry]) {
    acc[industry] = [];
  }
  acc[industry].push(study);
  return acc;
}, {} as Record<string, any[]>);

const industries = Object.keys(groupedStudies);
console.log('Industries:', industries);
console.log('Grouped Studies:', groupedStudies);

// Get URL parameters for initial tab selection
const urlParams = new URLSearchParams(Astro.url.search);
const initialIndustry = urlParams.get('industry');

// Function to decode URL parameter properly (handle both + and %20)
function decodeURLParameter(param: string | null): string | null {
  if (!param) return null;
  
  // First decode percent encoding, then replace + with spaces
  return decodeURIComponent(param).replace(/\+/g, ' ');
}

// Function to find matching industry using includes()
function findMatchingIndustry(industryParam: string | null, availableIndustries: string[]): string | null {
  if (!industryParam) return null;
  
  // Properly decode the URL parameter
  const decodedParam = decodeURLParameter(industryParam);
  const normalizedParam = decodedParam.toLowerCase().trim();
  
  console.log('üîç Matching process:');
  console.log('  - Raw URL Parameter:', industryParam);
  console.log('  - Decoded Parameter:', decodedParam);
  console.log('  - Normalized Param:', normalizedParam);
  console.log('  - Available Industries:', availableIndustries);
  
  // First try exact match
  const exactMatch = availableIndustries.find(industry => 
    industry.toLowerCase() === normalizedParam
  );
  if (exactMatch) {
    console.log('  ‚úÖ Exact match found:', exactMatch);
    return exactMatch;
  }
  
  // Then try includes match
  const includesMatch = availableIndustries.find(industry => {
    const normalizedIndustry = industry.toLowerCase();
    const hasMatch = normalizedIndustry.includes(normalizedParam) || 
                    normalizedParam.includes(normalizedIndustry);
    
    console.log(`  - Checking "${industry}": ${normalizedIndustry} includes "${normalizedParam}" = ${normalizedIndustry.includes(normalizedParam)}`);
    console.log(`  - Checking "${industry}": "${normalizedParam}" includes ${normalizedIndustry} = ${normalizedParam.includes(normalizedIndustry)}`);
    
    return hasMatch;
  });
  
  if (includesMatch) {
    console.log('  ‚úÖ Includes match found:', includesMatch);
    return includesMatch;
  }
  
  console.log('  ‚ùå No match found');
  return null;
}

const matchedIndustry = findMatchingIndustry(initialIndustry, industries);
const initialTab = matchedIndustry ? matchedIndustry.toLowerCase()
  .replace(/[^a-z0-9\s]/g, '-') // Replace special chars with hyphens
  .replace(/\s+/g, '-') // Replace spaces with hyphens
  .replace(/-+/g, '-') // Replace multiple hyphens with single
  .replace(/^-|-$/g, '') // Remove leading/trailing hyphens
  : 'all';

// Debug logging for URL parameter matching
console.log('üîó URL Parameter Debug:');
console.log('  - Raw URL:', Astro.url.href);
console.log('  - Search Params:', Astro.url.search);
console.log('  - URL Industry Param:', initialIndustry);
console.log('  - Available Industries:', industries);
console.log('  - Matched Industry:', matchedIndustry);
console.log('  - Initial Tab:', initialTab);
---

<section id="case-studies-grid" class="pb-20">
  <div class="container mx-auto">

    <!-- Tabs Navigation -->
    <div class="flex flex-wrap justify-center mb-12">
      <div class="flex flex-wrap gap-1 md:gap-2 justify-center">
        <button 
          class={`tab-button px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm font-medium rounded-md transition-all duration-200 ${initialTab === 'all' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          data-tab="all"
        >
          All 
        </button>
        {industries.map((industry) => {
          // Create a more robust tab name that handles special characters
          const industryTab = industry.toLowerCase()
            .replace(/[^a-z0-9\s]/g, '-') // Replace special chars with hyphens
            .replace(/\s+/g, '-') // Replace spaces with hyphens
            .replace(/-+/g, '-') // Replace multiple hyphens with single
            .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
          
          const isActive = initialTab === industryTab;
          
          // Debug logging for tab states
          console.log(`Tab "${industry}": tab="${industryTab}", isActive=${isActive}, initialTab="${initialTab}"`);
          
          return (
            <button 
              class={`tab-button px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm font-medium rounded-md transition-all duration-200 ${isActive ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
              data-tab={industryTab}
            >
              {industry}
            </button>
          );
        })}
      </div>
    </div>

    <!-- Tab Content -->
    <div class={`tab-content ${initialTab === 'all' ? '' : 'hidden'}`} data-tab="all">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
        {studies && studies.length > 0 ? (
          studies.map((study: any, index: number) => (
            <CaseStudyCard caseStudy={study} />
          ))
        ) : (
          <div class="col-span-full text-center py-12">
            <p class="text-gray-500">No case studies found.</p>
            <p class="text-gray-400 text-sm mt-2">Debug: studies length = {studies?.length}</p>
            <p class="text-gray-400 text-sm">Debug: caseStudiesData exists = {caseStudiesData ? 'Yes' : 'No'}</p>
          </div>
        )}
      </div>
    </div>

    {industries.map((industry) => {
      // Create a more robust tab name that handles special characters
      const industryTab = industry.toLowerCase()
        .replace(/[^a-z0-9\s]/g, '-') // Replace special chars with hyphens
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Replace multiple hyphens with single
        .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
      
      const isActive = initialTab === industryTab;
      
      // Debug logging for content visibility
      console.log(`Content "${industry}": tab="${industryTab}", isActive=${isActive}, hidden=${!isActive}`);
      
      return (
        <div class={`tab-content ${isActive ? '' : 'hidden'}`} data-tab={industryTab}>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            {groupedStudies[industry].map((study: any, index: number) => (
              <CaseStudyCard caseStudy={study} />
            ))}
          </div>
        </div>
      );
    })}
  </div>
</section>

<script>
  // Tab functionality and scroll animations
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    const caseStudyCards = document.querySelectorAll('.case-study-card');

    // Initialize scroll animations for cards
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 100); // Stagger animation
        }
      });
    }, observerOptions);

    // Observe all case study cards
    caseStudyCards.forEach(card => {
      observer.observe(card);
    });

    // Function to update URL without page reload
    function updateURL(tabName) {
      const url = new URL(window.location);
      if (tabName === 'all') {
        url.searchParams.delete('industry');
      } else {
        // Convert tab name back to industry name (e.g., 'interior-design' -> 'Interior Design')
        const industryName = tabName.split('-').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
        
        // Don't double-encode - searchParams.set() handles encoding automatically
        url.searchParams.set('industry', industryName);
      }
      window.history.replaceState({}, '', url);
    }

    // Tab functionality
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        
        // Update button states
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-primary-600', 'text-white');
          btn.classList.add('bg-gray-100', 'text-gray-700');
        });
        button.classList.add('active', 'bg-primary-600', 'text-white');
        button.classList.remove('bg-gray-100', 'text-gray-700');
        
        // Show/hide tab content
        tabContents.forEach(content => {
          content.classList.add('hidden');
          if (content.getAttribute('data-tab') === targetTab) {
            content.classList.remove('hidden');
            
            // Re-observe cards in the newly shown tab
            const newCards = content.querySelectorAll('.case-study-card');
            newCards.forEach(card => {
              observer.observe(card);
            });
          }
        });

        // Update URL
        updateURL(targetTab);
      });
    });

    // Handle browser back/forward buttons
    window.addEventListener('popstate', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const industry = urlParams.get('industry');
      
      // Use the same matching logic as server-side
      function decodeURLParameter(param) {
        if (!param) return null;
        
        // First decode percent encoding, then replace + with spaces
        return decodeURIComponent(param).replace(/\+/g, ' ');
      }
      
      function findMatchingIndustry(industryParam, availableIndustries) {
        if (!industryParam) return null;
        
        // Properly decode the URL parameter
        const decodedParam = decodeURLParameter(industryParam);
        const normalizedParam = decodedParam.toLowerCase().trim();
        
        // First try exact match
        const exactMatch = availableIndustries.find(industry => 
          industry.toLowerCase() === normalizedParam
        );
        if (exactMatch) return exactMatch;
        
        // Then try includes match
        const includesMatch = availableIndustries.find(industry => {
          const normalizedIndustry = industry.toLowerCase();
          return normalizedIndustry.includes(normalizedParam) || 
                 normalizedParam.includes(normalizedIndustry);
        });
        
        return includesMatch;
      }
      
      // Get available industries from the page
      const availableIndustries = Array.from(document.querySelectorAll('.tab-button'))
        .map(btn => btn.textContent.trim())
        .filter(text => text !== 'All');
      
      const matchedIndustry = findMatchingIndustry(industry, availableIndustries);
      const targetTab = matchedIndustry ? matchedIndustry.toLowerCase()
        .replace(/[^a-z0-9\s]/g, '-') // Replace special chars with hyphens
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Replace multiple hyphens with single
        .replace(/^-|-$/g, '') // Remove leading/trailing hyphens
        : 'all';
      
      // Find and click the appropriate tab button
      const targetButton = document.querySelector(`[data-tab="${targetTab}"]`);
      if (targetButton) {
        targetButton.click();
      }
    });
  });
</script>

<style>
  /* Responsive tab adjustments */
  @media (max-width: 768px) {
    .tab-button {
      font-size: 0.875rem;
      padding: 0.5rem 1rem;
    }
  }
</style> 