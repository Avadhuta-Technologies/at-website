---
const { caseStudy } = Astro.props;

// Check if caseStudy exists and has required properties
if (!caseStudy || !caseStudy.id || !caseStudy.title) {
  return null; // Don't render anything if caseStudy is invalid
}

// Use the case study ID as the slug for navigation
const caseStudySlug = caseStudy.id;

// Get badge color classes - using brand colors
const getBadgeColor = (color: string) => {
  const colorMap: Record<string, string> = {
    blue: 'bg-cerulean-50 text-cerulean-700 border-cerulean-200',
    green: 'bg-mint-50 text-mint-700 border-mint-200',
    purple: 'bg-graphite-50 text-graphite-700 border-graphite-200',
    orange: 'bg-mint-50 text-mint-700 border-mint-200',
    red: 'bg-mint-50 text-mint-700 border-mint-200',
    yellow: 'bg-mint-50 text-mint-700 border-mint-200'
  };
  return colorMap[color] || 'bg-graphite-50 text-graphite-700 border-graphite-200';
};
---

<div class="case-study-card group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1 cursor-pointer" data-case-study-id={caseStudy.id} data-case-study-slug={caseStudySlug}>
  <!-- Card Background -->
  <div class="absolute inset-0 bg-white/90 backdrop-blur-sm border border-white/30 rounded-xl shadow-sm group-hover:shadow-xl transition-all duration-300"></div>
  
  <!-- Header Section -->
  <div class="relative p-6 pb-4">
    <!-- Badge and Duration Row -->
    <div class="flex items-center justify-between mb-4">
      {caseStudy.badge && (
        <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-inter font-semibold border ${getBadgeColor(caseStudy.badgeColor || 'gray')}`}>
          {caseStudy.badge}
        </span>
      )}
      {caseStudy.duration && (
        <span class="text-xs font-inter text-graphite-500 font-medium">
          {caseStudy.duration}
        </span>
      )}
    </div>
    
    <!-- Title -->
    <h3 class="font-inter font-bold text-graphite-900 text-xl mb-3 group-hover:text-graphite-800 transition-colors duration-300 leading-tight">
      {caseStudy.title}
    </h3>
    
    <!-- Problem Statement -->
    {caseStudy.problemStatement && (
      <p class="text-graphite-600 font-inter text-sm leading-relaxed mb-4 line-clamp-3">
        {caseStudy.problemStatement}
      </p>
    )}
  </div>
  
  <!-- Tech Stack Section -->
  {caseStudy.techStack && caseStudy.techStack.length > 0 && (
    <div class="relative px-6 pb-4">
      <div class="flex flex-wrap gap-2">
        {caseStudy.techStack.slice(0, 4).map((tech: string) => (
          <span class="inline-flex items-center px-2.5 py-1 rounded-lg text-xs font-inter font-medium bg-graphite-50 text-graphite-700 border border-graphite-100 group-hover:bg-graphite-100 transition-colors duration-200">
            {tech}
          </span>
        ))}
        {caseStudy.techStack.length > 4 && (
          <span class="inline-flex items-center px-2.5 py-1 rounded-lg text-xs font-inter font-medium bg-graphite-50 text-graphite-700 border border-graphite-100">
            +{caseStudy.techStack.length - 4} more
          </span>
        )}
      </div>
    </div>
  )}
  
  <!-- Impact Section -->
  {caseStudy.impact && caseStudy.impact.length > 0 && (
    <div class="relative px-6 pb-4">
      <div class="flex items-center space-x-2 p-3 bg-mint-50 rounded-xl border border-mint-100">
        <div class="w-8 h-8 bg-mint-100 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
          </svg>
        </div>
        <div class="flex-1 min-w-0">
          <p class="text-sm font-inter text-mint-800 font-medium leading-tight">
            {caseStudy.impact[0]}
          </p>
        </div>
      </div>
    </div>
  )}
  
  <!-- Footer Section -->
  <div class="relative px-6 py-4 border-t border-graphite-50 bg-graphite-25">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <div class="w-8 h-8 bg-gradient-to-r from-mint-500 to-cerulean-500 rounded-lg flex items-center justify-center">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <span class="text-sm font-inter font-semibold text-graphite-900">View Details</span>
      </div>
      <svg class="w-5 h-5 text-graphite-400 group-hover:text-mint-500 group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </div>
  </div>
</div>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .bg-graphite-25 {
    background-color: #fafafa;
  }
  
  .case-study-card {
    will-change: transform;
  }
  
  .case-study-card:hover {
    transform: translateY(-4px);
  }
</style>

<script>
  // Handle card click to navigate to case study detail page
  document.addEventListener('DOMContentLoaded', function() {
    const caseStudyCards = document.querySelectorAll('.case-study-card');
    
    caseStudyCards.forEach(card => {
      card.addEventListener('click', function(this: HTMLElement, e) {
        // Prevent navigation if clicking on links or buttons inside the card
        const target = e.target as HTMLElement;
        if (target && (target.tagName === 'A' || target.tagName === 'BUTTON' || 
            target.closest && (target.closest('a') || target.closest('button')))) {
          return;
        }
        
        const caseStudySlug = this.getAttribute('data-case-study-slug');
        if (caseStudySlug) {
          window.location.href = `/case-studies/${caseStudySlug}`;
        }
      });
    });
  });
</script> 