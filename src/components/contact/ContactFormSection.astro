---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    fields: Array<{
      name: string;
      label: string;
      type: string;
      required: boolean;
      placeholder?: string;
      options?: string[];
    }>;
    submitButton: {
      text: string;
      loadingText: string;
    };
    successMessage: string;
    errorMessage: string;
  };
}

const { data } = Astro.props;
---

<section class="py-16 bg-white dark:bg-slate-900">
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-dark dark:text-white mb-4">{data.title}</h2>
        <p class="text-lg text-gray-600 dark:text-gray-400">{data.subtitle}</p>
      </div>
      
      <div class="bg-white dark:bg-slate-800 rounded-2xl shadow-xl p-8">
        <form id="contact-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {data.fields.filter(field => field.type !== 'textarea' && field.type !== 'select').map((field) => (
              <div>
                <label for={field.name} class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  {field.label} {field.required && <span class="text-red-500">*</span>}
                </label>
                <input
                  type={field.type}
                  id={field.name}
                  name={field.name}
                  placeholder={field.placeholder}
                  required={field.required}
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white transition-colors"
                />
              </div>
            ))}
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {data.fields.filter(field => field.type === 'select').map((field) => (
              <div>
                <label for={field.name} class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  {field.label} {field.required && <span class="text-red-500">*</span>}
                </label>
                <select
                  id={field.name}
                  name={field.name}
                  required={field.required}
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white transition-colors"
                >
                  <option value="">Select {field.label}</option>
                  {field.options?.map((option) => (
                    <option value={option}>{option}</option>
                  ))}
                </select>
              </div>
            ))}
          </div>
          
          {data.fields.filter(field => field.type === 'textarea').map((field) => (
            <div>
              <label for={field.name} class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {field.label} {field.required && <span class="text-red-500">*</span>}
              </label>
              <textarea
                id={field.name}
                name={field.name}
                rows="6"
                placeholder={field.placeholder}
                required={field.required}
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white transition-colors resize-vertical"
              ></textarea>
            </div>
          ))}
          
          <div class="text-center">
            <button
              type="submit"
              class="px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              <span class="submit-text">{data.submitButton.text}</span>
              <span class="loading-text hidden">{data.submitButton.loadingText}</span>
            </button>
          </div>
        </form>
        
        <!-- Success/Error Messages -->
        <div id="success-message" class="hidden mt-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
          {data.successMessage}
        </div>
        <div id="error-message" class="hidden mt-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          {data.errorMessage}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitButton = form?.querySelector('button[type="submit"]');
    const submitText = submitButton?.querySelector('.submit-text');
    const loadingText = submitButton?.querySelector('.loading-text');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    
    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Show loading state
        if (submitButton && submitText && loadingText) {
          submitButton.disabled = true;
          submitText.classList.add('hidden');
          loadingText.classList.remove('hidden');
        }
        
        // Hide previous messages
        if (successMessage) successMessage.classList.add('hidden');
        if (errorMessage) errorMessage.classList.add('hidden');
        
        try {
          // Simulate form submission (replace with actual API call)
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Show success message
          if (successMessage) {
            successMessage.classList.remove('hidden');
            form.reset();
          }
        } catch (error) {
          // Show error message
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
        } finally {
          // Reset button state
          if (submitButton && submitText && loadingText) {
            submitButton.disabled = false;
            submitText.classList.remove('hidden');
            loadingText.classList.add('hidden');
          }
        }
      });
    }
  });
</script> 