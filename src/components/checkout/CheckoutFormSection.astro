---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    billingSection: {
      title: string;
      fields: Array<{
        name: string;
        label: string;
        type: string;
        required: boolean;
        placeholder?: string;
      }>;
    };
    paymentSection: {
      title: string;
      description: string;
      paymentMethods: Array<{
        id: string;
        name: string;
        description: string;
        icon: string;
      }>;
    };
    termsSection: {
      title: string;
      description: string;
      links: Array<{ text: string; url: string }>;
    };
    submitButton: {
      text: string;
      loadingText: string;
    };
    successMessage: string;
    errorMessage: string;
  };
}

const { data } = Astro.props;
---

<section class="py-16 bg-white">
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">{data.title}</h2>
        <p class="text-lg text-gray-600">{data.subtitle}</p>
      </div>
      
      <div class="bg-white rounded-2xl shadow-xl p-8 border border-gray-200">
        <form id="checkout-form" class="space-y-8">
          <!-- Billing Information -->
          <div>
            <h3 class="text-xl font-bold text-gray-900 mb-6">{data.billingSection.title}</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              {data.billingSection.fields.filter(field => field.type !== 'textarea').map((field) => (
                <div>
                  <label for={field.name} class="block text-sm font-medium text-gray-700 mb-2">
                    {field.label} {field.required && <span class="text-red-500">*</span>}
                  </label>
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    placeholder={field.placeholder}
                    required={field.required}
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors"
                  />
                </div>
              ))}
            </div>
            
            {data.billingSection.fields.filter(field => field.type === 'textarea').map((field) => (
              <div class="mt-6">
                <label for={field.name} class="block text-sm font-medium text-gray-700 mb-2">
                  {field.label} {field.required && <span class="text-red-500">*</span>}
                </label>
                <textarea
                  id={field.name}
                  name={field.name}
                  rows="4"
                  placeholder={field.placeholder}
                  required={field.required}
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors resize-vertical"
                ></textarea>
              </div>
            ))}
          </div>
          
          <!-- Payment Information -->
          <div>
            <h3 class="text-xl font-bold text-gray-900 mb-4">{data.paymentSection.title}</h3>
            <p class="text-gray-600 mb-6">{data.paymentSection.description}</p>
            
            <div class="space-y-4">
              {data.paymentSection.paymentMethods.map((method) => (
                <div class="flex items-center p-4 border border-gray-300 rounded-lg hover:border-primary-500 transition-colors">
                  <input
                    type="radio"
                    id={method.id}
                    name="paymentMethod"
                    value={method.id}
                    class="w-4 h-4 text-primary-600 border-gray-300 focus:ring-primary-500"
                  />
                  <label for={method.id} class="ml-3 flex items-center">
                    <span class="text-2xl mr-3">{method.icon}</span>
                    <div>
                      <div class="font-medium text-gray-900">{method.name}</div>
                      <div class="text-sm text-gray-600">{method.description}</div>
                    </div>
                  </label>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Terms & Conditions -->
          <div>
            <h3 class="text-xl font-bold text-gray-900 mb-4">{data.termsSection.title}</h3>
            <p class="text-gray-600 mb-4">{data.termsSection.description}</p>
            
            <div class="flex flex-wrap gap-4">
              {data.termsSection.links.map((link) => (
                <a href={link.url} target={link.target || "_self"} class="text-primary-600 hover:underline text-sm">
                  {link.text}
                </a>
              ))}
            </div>
            
            <div class="mt-4">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  required
                  class="w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500"
                />
                <span class="ml-2 text-sm text-gray-700">
                  I agree to the terms and conditions
                </span>
              </label>
            </div>
          </div>
          
          <!-- Submit Button -->
          <div class="text-center">
            <button
              type="submit"
              class="px-8 py-4 bg-primary-600 hover:bg-primary-700 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              <span class="submit-text">{data.submitButton.text}</span>
              <span class="loading-text hidden">{data.submitButton.loadingText}</span>
            </button>
          </div>
        </form>
        
        <!-- Success/Error Messages -->
        <div id="success-message" class="hidden mt-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
          {data.successMessage}
        </div>
        <div id="error-message" class="hidden mt-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          {data.errorMessage}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('checkout-form');
    const submitButton = form?.querySelector('button[type="submit"]');
    const submitText = submitButton?.querySelector('.submit-text');
    const loadingText = submitButton?.querySelector('.loading-text');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    
    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Show loading state
        if (submitButton && submitText && loadingText) {
          submitButton.disabled = true;
          submitText.classList.add('hidden');
          loadingText.classList.remove('hidden');
        }
        
        // Hide previous messages
        if (successMessage) successMessage.classList.add('hidden');
        if (errorMessage) errorMessage.classList.add('hidden');
        
        try {
          // Simulate form submission (replace with actual API call)
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Show success message
          if (successMessage) {
            successMessage.classList.remove('hidden');
            form.reset();
          }
        } catch (error) {
          // Show error message
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
        } finally {
          // Reset button state
          if (submitButton && submitText && loadingText) {
            submitButton.disabled = false;
            submitText.classList.remove('hidden');
            loadingText.classList.add('hidden');
          }
        }
      });
    }
  });
</script> 