---
import { packsData } from '../../content/packs/_index.js';

export interface Props {
  data?: any;
  className?: string;
}

const { data = packsData, className = "" } = Astro.props;

// Helper function to get badge color class
function getBadgeColorClass(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'bg-blue-100',
    'purple': 'bg-purple-100',
    'orange': 'bg-orange-100',
    'teal': 'bg-teal-100',
    'green': 'bg-green-100',
    'indigo': 'bg-indigo-100',
    'cyan': 'bg-cyan-100'
  };
  
  return colorMap[color] || 'bg-blue-100';
}

// Helper function to get badge text color class
function getBadgeTextColorClass(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'text-blue-800',
    'purple': 'text-purple-800',
    'orange': 'text-orange-800',
    'teal': 'text-teal-800',
    'green': 'text-green-800',
    'indigo': 'text-indigo-800',
    'cyan': 'text-cyan-800'
  };
  
  return colorMap[color] || 'text-blue-800';
}
---

<section class={`py-16 bg-gradient-to-br from-gray-50 to-green-50 ${className}`}>
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-dark animate-fade-in-up gradient-title">
        {data.title}
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto animate-fade-in-up animation-delay-200">
        {data.subtitle}
      </p>
    </div>

    <!-- Category Tabs -->
    <div class="flex flex-wrap justify-center gap-4 mb-12">
      {data.categories.map((category, categoryIndex) => (
        <button
          class={`category-tab px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 ${
            categoryIndex === 0 ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-blue-50 border border-gray-200'
          }`}
          data-category={category.id}
        >
          {category.name}
        </button>
      ))}
    </div>

    <!-- Packs Grid -->
    {data.categories.map((category, categoryIndex) => (
      <div class={`category-content ${categoryIndex === 0 ? 'block' : 'hidden'}`} data-category={category.id}>
        <div class="text-center mb-8">
          <h3 class="text-2xl md:text-3xl font-bold mb-4 text-dark">
            {category.name}
          </h3>
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            {category.description}
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {category.packs.map((pack, packIndex) => (
            <div class={`pack-card group relative bg-white rounded-2xl shadow-lg hover:shadow-2xl overflow-hidden flex flex-col h-full animate-fade-in-up animation-delay-${(categoryIndex * 200) + (packIndex + 1) * 100}`}>
              <!-- Card Header -->
              <div class="p-8 flex-1">
                <div class="flex items-center justify-between mb-6">
                  <div class="w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                    <img src={pack.icon} alt={pack.title} class="w-8 h-8 filter brightness-0 invert" />
                  </div>
                  <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getBadgeColorClass(pack.badgeColor)} ${getBadgeTextColorClass(pack.badgeColor)}`}>
                    {pack.badge}
                  </span>
                </div>
                
                <h3 class="font-bold text-xl mb-3 text-dark group-hover:text-blue-600 transition-colors duration-300">
                  {pack.title}
                </h3>
                
                <p class="text-gray-600 leading-relaxed">
                  {pack.description}
                </p>

                <!-- Features -->
                <div class="mt-6">
                  <h4 class="font-semibold text-sm text-gray-700 mb-3 flex items-center">
                    <svg class="w-4 h-4 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    What's Included
                  </h4>
                  <ul class="space-y-2">
                    {pack.features.map((feature) => (
                      <li class="flex items-start text-sm text-gray-600 group/item">
                        <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <li class="text-xs text-green-600 font-medium">
                          {feature}
                        </li>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              
              <!-- Card Footer -->
              <div class="mt-auto pt-6 border-t border-gray-100">
                <div class="flex items-center justify-between mb-4">
                  <div>
                    <div class="font-bold text-2xl text-dark">{pack.priceINR}</div>
                    <div class="font-semibold text-lg text-gray-600">{pack.priceUSD}</div>
                  </div>
                  <div class="text-sm text-gray-500">
                    {pack.duration}
                  </div>
                </div>
                
                <a href={pack.cta.url} class="w-full inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg">
                  {pack.cta.text}
                  <svg class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </a>
              </div>
            </div>
          ))}
        </div>

        {category.packs.length === 0 && (
          <div class="text-center py-12">
            <p class="text-gray-500">No packs available in this category.</p>
          </div>
        )}
      </div>
    ))}

    {data.categories.length === 0 && (
      <div class="text-center py-12">
        <p class="text-gray-500">No categories available at the moment.</p>
      </div>
    )}
  </div>
</section>

<script>
  // Category tab functionality
  document.addEventListener('DOMContentLoaded', () => {
    const categoryTabs = document.querySelectorAll('.category-tab');
    const categoryContents = document.querySelectorAll('.category-content');
    
    categoryTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const targetCategory = tab.getAttribute('data-category');
        
        // Update tab styles
        categoryTabs.forEach(t => {
          t.classList.remove('bg-blue-600', 'text-white', 'shadow-lg');
          t.classList.add('bg-white', 'text-gray-700', 'border', 'border-gray-200');
        });
        tab.classList.remove('bg-white', 'text-gray-700', 'border', 'border-gray-200');
        tab.classList.add('bg-blue-600', 'text-white', 'shadow-lg');
        
        // Show/hide content
        categoryContents.forEach(content => {
          if (content.getAttribute('data-category') === targetCategory) {
            content.classList.remove('hidden');
            content.classList.add('block');
          } else {
            content.classList.remove('block');
            content.classList.add('hidden');
          }
        });
      });
    });
  });
</script> 