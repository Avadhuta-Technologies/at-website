---
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';
import { packsCatalog } from '../../content/catalog/_packs.js';

export interface Props {
  title?: string;
  subtitle?: string;
  showFilters?: boolean;
  className?: string;
}

const { 
  title = "Available Packs", 
  subtitle = "Choose the perfect pack for your project",
  showFilters = true,
  className = "" 
} = Astro.props;

// Get all packs from catalog
const packs = packsCatalog.availablePacks;

// Get unique categories for filters
const categories = [...new Set(packs.map(pack => pack.category))];
---

<section class={`py-16 ${className}`}>
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4 gradient-title">{title}</h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">{subtitle}</p>
    </div>

    {showFilters && categories.length > 1 && (
      <div class="flex flex-wrap justify-center gap-4 mb-12">
        <button 
          class="filter-btn active px-6 py-2 rounded-full bg-primary-600 text-white font-semibold transition-all duration-300"
          data-category="all">
          All Packs
        </button>
        {categories.map(category => (
          <button 
            class="filter-btn px-6 py-2 rounded-full bg-gray-200 text-gray-700 font-semibold hover:bg-primary-100 transition-all duration-300"
            data-category={category}>
            {category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
          </button>
        ))}
      </div>
    )}

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {packs.map((pack) => (
        <div class="pack-card bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden" data-category={pack.category}>
          <!-- Header -->
          <div class="p-6 border-b border-gray-100">
            <div class="flex items-center justify-between mb-4">
              <div class="text-3xl">{pack.icon}</div>
              {pack.badge && (
                <span class={`px-3 py-1 rounded-full text-xs font-bold ${
                  pack.badgeColor === 'green' ? 'bg-green-100 text-green-800' :
                  pack.badgeColor === 'blue' ? 'bg-blue-100 text-blue-800' :
                  pack.badgeColor === 'purple' ? 'bg-purple-100 text-purple-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {pack.badge}
                </span>
              )}
            </div>
            <h3 class="text-xl font-bold text-gray-900 mb-2">{pack.title}</h3>
            <p class="text-gray-600 text-sm mb-4">{pack.description}</p>
            
            <!-- Updated Price Display -->
            <div class="mb-4">
              <DiscountedPriceDisplay 
                basePriceINR={pack.basePriceINR}
                basePriceUSD={pack.basePriceUSD}
                discountPercentage={pack.discountPercentage}
                showBadge={true}
                showSavings={true}
                showOriginalPrice={true}
                size="lg"
                variant="conversion"
              />
            </div>
            
            <div class="text-sm text-gray-500">{pack.duration} delivery</div>
          </div>

          <!-- Content -->
          <div class="p-6">
            <div class="mb-6">
              <h4 class="font-semibold text-gray-900 mb-3">What's Included:</h4>
              <ul class="space-y-2">
                {pack.deliverables.slice(0, 3).map((deliverable) => (
                  <li class="flex items-start">
                    <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-sm text-gray-600">{deliverable}</span>
                  </li>
                ))}
                {pack.deliverables.length > 3 && (
                  <li class="text-sm text-primary-600 font-medium">
                    +{pack.deliverables.length - 3} more deliverables
                  </li>
                )}
              </ul>
            </div>

            <!-- CTA -->
            <div class="space-y-3">
              <button 
                data-add-to-cart
                data-item-id={pack.id}
                data-item-type="pack"
                data-item-title={pack.title}
                data-item-description={pack.description}
                class="w-full px-6 py-3 bg-primary-600 text-white font-semibold rounded-xl hover:bg-primary-700 transition-all duration-300"
                data-action="add">
                Add to Pod
              </button>
              <a 
                href={`/packs/${pack.id}`}
                class="block w-full px-6 py-3 border-2 border-primary-600 text-primary-600 font-semibold rounded-xl hover:bg-primary-50 transition-all duration-300 text-center">
                View Details
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const packCards = document.querySelectorAll('.pack-card');

    filterBtns.forEach((btn: Element) => {
      btn.addEventListener('click', function(this: Element) {
        const category = this.getAttribute('data-category');
        
        // Update active button
        filterBtns.forEach((b: Element) => b.classList.remove('active', 'bg-primary-600', 'text-white'));
        filterBtns.forEach((b: Element) => b.classList.add('bg-gray-200', 'text-gray-700'));
        this.classList.add('active', 'bg-primary-600', 'text-white');
        this.classList.remove('bg-gray-200', 'text-gray-700');
        
        // Filter cards
        packCards.forEach((card: Element) => {
          const cardElement = card as HTMLElement;
          if (category === 'all' || card.getAttribute('data-category') === category) {
            cardElement.style.display = 'block';
          } else {
            cardElement.style.display = 'none';
          }
        });
      });
    });
  });
</script> 