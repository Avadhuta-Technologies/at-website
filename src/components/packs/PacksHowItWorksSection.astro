---
export interface Step {
  number: string;
  title: string;
  description: string;
  icon: string;
}

export interface Props {
  // New format - single data object
  data?: {
    title?: string;
    steps?: Step[];
  };
  // Old format - individual props (for backward compatibility)
  title?: string;
  steps?: Step[];
  className?: string;
}

const { data, title: titleProp, steps: stepsProp, className = "" } = Astro.props;

// Use data object if provided, otherwise use individual props
const title = data?.title || titleProp || "How It Works";
const steps = data?.steps || stepsProp || [];

// SVG Icon Components - Each with unique design matching step content
const getSvgIcon = (iconType: string) => {
  switch (iconType) {
    case "pick-pod":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
      </svg>`;
    case "select-pack":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 12l4-2.5V7"></path>
      </svg>`;
    case "kick-off":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
      </svg>`;
    case "review-launch":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v3m0 0v3m0-3h3m-3 0H9"></path>
      </svg>`;
    case "stack-scale":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4m0 0v4m0-4h4m-4 0H8"></path>
      </svg>`;
    default:
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>`;
  }
};
---

<section class={`py-16 bg-transparent ${className}`}>
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-12 text-dark dark:text-white">{title}</h2>
    
    <!-- Packs-specific layout: 5 steps in a responsive grid -->
    <div class="max-w-6xl mx-auto">
      <!-- Progress Bar and Icons in One Line -->
      <div class="hidden md:flex items-center justify-between mb-8 relative">
        <!-- Progress Line -->
        <div class="absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-green-400 via-emerald-400 to-teal-400 rounded-full connection-line"></div>
        <div class="absolute top-1/2 left-0 h-1 bg-gradient-to-r from-green-400 via-emerald-400 to-teal-400 rounded-full connection-progress" style="width: 0%"></div>
        
        <!-- Step Icons -->
        {steps.map((step, idx) => (
          <div class="relative z-10 flex items-center justify-center w-12 h-12 bg-gradient-to-br from-green-500 via-emerald-500 to-teal-500 rounded-full shadow-lg connection-node transition-all duration-300" data-step={idx}>
            <div class="w-6 h-6 flex items-center justify-center">
              <Fragment set:html={getSvgIcon(step.icon || 'default')} />
            </div>
          </div>
        ))}
      </div>

      <!-- Steps Grid - Responsive layout for packs -->
      <div data-animate="row-staggered" data-base-delay="200" data-card-delay="80" data-row-delay="150" data-columns-per-row="5" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 md:gap-4">
        {steps.map((step, idx) => (
          <div class="step-card group relative hover-lift" data-step={idx}>
            <!-- Card Container -->
            <div class="bg-white dark:bg-slate-900 rounded-2xl shadow-lg p-6 h-full transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 relative overflow-hidden cursor-pointer border border-gray-100 dark:border-slate-800 flex flex-col">
              
              <!-- Background Pattern -->
              <div class="absolute inset-0 bg-gradient-to-br from-green-50/30 to-emerald-50/30 dark:from-green-900/10 dark:to-emerald-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>

              <!-- Background Icon - Circle centered at bottom-right corner (25% visible) -->
              <div class="absolute bottom-0 right-0 w-32 h-32 opacity-15 dark:opacity-12 transition-opacity duration-300 group-hover:opacity-25 dark:group-hover:opacity-20 rounded-full bg-gradient-to-br from-green-400/20 via-emerald-400/20 to-teal-400/20" style="transform: translate(50%, 50%);">
                <div class="w-full h-full flex items-center justify-center">
                  <div class="w-26 h-26 flex items-center justify-center">
                    <Fragment set:html={getSvgIcon(step.icon || 'default')} />
                  </div>
                </div>
              </div>

              <!-- Subtle Gradient Overlay -->
              <div class="absolute bottom-0 right-0 w-20 h-20 bg-gradient-to-tl from-gray-100/15 via-transparent to-transparent dark:from-gray-800/15 rounded-tl-2xl"></div>

              <!-- Content -->
              <div class="relative z-10 flex-1">
                <!-- Title -->
                <div class="mb-3">
                  <h3 class="text-lg font-bold text-dark dark:text-white group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors duration-300">
                    {step.title}
                  </h3>
                </div>
                
                <!-- Collapsible Description -->
                <div class="description-container overflow-hidden transition-all duration-500">
                  {(() => {
                    const parts = step.description.split('\n\n');
                    const mainDescription = parts[0];
                    const listSection = parts.slice(1).join('\n\n');
                    
                    return (
                      <>
                        <div class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed description-text mb-4">
                          {mainDescription}
                        </div>
                        {listSection && (
                          <div class="bg-gradient-to-r from-green-50/80 to-emerald-50/80 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-200/50 dark:border-green-700/30 list-section">
                            <div class="text-gray-700 dark:text-gray-200 text-sm leading-relaxed">
                              {(() => {
                                const lines = listSection.split('\n');
                                const header = lines[0];
                                const items = lines.slice(1);
                                
                                return (
                                  <>
                                    <div class="font-semibold text-green-700 dark:text-green-300 mb-2 text-base">
                                      {header}
                                    </div>
                                    <div class="space-y-1">
                                      {items.map(item => (
                                        <div class="flex items-start space-x-3">
                                          <div class="w-5 h-5 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full mt-0.5 flex-shrink-0 flex items-center justify-center shadow-sm">
                                            <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                          </div>
                                          <div class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
                                            {item}
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </>
                                );
                              })()}
                            </div>
                          </div>
                        )}
                      </>
                    );
                  })()}
                </div>
              </div>

              <!-- Hover Border Effect -->
              <div class="absolute inset-0 rounded-2xl border-2 border-transparent group-hover:border-green-400/30 transition-all duration-300"></div>
            </div>
          </div>
        ))}
      </div>

      <!-- Mobile Progress Indicator -->
      <div class="md:hidden mt-8">
        <div class="flex justify-center space-x-2">
          {steps.map((_, idx) => (
            <div class="w-3 h-3 bg-gray-300 rounded-full progress-dot" data-step={idx}></div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .step-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .step-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.25);
  }

  .step-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #10B981, #059669, #0D9488);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .step-card:hover::before {
    opacity: 1;
  }

  /* Animation delays */
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  .animation-delay-800 { animation-delay: 0.8s; }
  .animation-delay-1000 { animation-delay: 1.0s; }

  /* Fade in animations */
  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 