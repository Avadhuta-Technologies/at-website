---
import { getBadgeStyle, getDotColor, getGradientClass } from '../../utils/colorUtils';
import { catalogUtils } from '../../content/catalog/_index.js';
import { generatePackSlug } from '../../utils/slugUtils.js';

export interface Props {
  packId: string; // Use packId instead of individual props
  learnMoreUrl?: string;
  actionUrl?: string;
  actionText?: string;
}

const { packId, learnMoreUrl, actionUrl, actionText } = Astro.props;

// Get pack data from centralized catalog
const pack = catalogUtils.getProductById(packId, 'pack');

if (!pack) {
  throw new Error(`Pack with ID "${packId}" not found in catalog`);
}

// Extract data from catalog
const {
  id,
  title,
  description,
  icon,
  badge,
  badgeColor,
  priceINR,
  priceUSD,
  duration,
  deliverables,
  idealFor,
  addOns,
  whyItWorks,
  testimonials,
  cta
} = pack;

// Default URLs if not provided
const defaultLearnMoreUrl = `/packs/${generatePackSlug(title)}`;
const defaultActionUrl = `/packs/${generatePackSlug(title)}`;
const defaultActionText = 'Add Pack';

const finalLearnMoreUrl = learnMoreUrl || defaultLearnMoreUrl;
const finalActionUrl = actionUrl || defaultActionUrl;
const finalActionText = actionText || defaultActionText;
---

<div class="pack-card group relative bg-white rounded-2xl shadow-lg hover:shadow-2xl overflow-hidden flex flex-col h-full animate-fade-in-up">
  <div class="relative z-10 flex flex-col h-full p-6">
    <!-- Header with Icon and Badge -->
    <div class="flex items-center justify-between mb-6">
      <div class={`w-14 h-14 rounded-xl bg-gradient-to-r ${getGradientClass(badgeColor)} flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg`}>
        <img src={icon} alt={`${title} Icon`} class="w-7 h-7 filter brightness-0 invert" />
      </div>
      <span class={`text-xs px-3 py-1 rounded-full font-semibold ${getBadgeStyle(badgeColor)} transform transition-all duration-300 group-hover:scale-105`}>
        {badge}
      </span>
    </div>
    
    <!-- Title and Description -->
    <div class="mb-6">
      <h3 class="font-bold text-lg mb-3 transition-colors duration-300 text-dark group-hover:text-blue-600 ">
        {title}
      </h3>
      <p class="text-gray-600 leading-relaxed text-sm">
        {description}
      </p>
    </div>
    
    <!-- Ideal For Section -->
    {idealFor && idealFor.length > 0 && (
      <div class="mb-6">
        <h4 class="font-semibold text-sm text-gray-700  mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Ideal For
        </h4>
        <ul class="space-y-2">
          {idealFor.slice(0, 2).map((item) => (
            <li class="flex items-start text-sm text-gray-600  group/item">
              <span class="w-2 h-2 bg-green-500 rounded-full mr-3 mt-2 flex-shrink-0 transition-all duration-300 group-hover/item:scale-150"></span>
              <span class="leading-relaxed">{item}</span>
            </li>
          ))}
        </ul>
      </div>
    )}
    
    <!-- Deliverables Section -->
    {deliverables && deliverables.length > 0 && (
      <div class="mb-6">
        <h4 class="font-semibold text-sm text-gray-700  mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Deliverables
        </h4>
        <ul class="space-y-1">
          {deliverables.slice(0, 2).map((item) => (
            <li class="flex items-start text-xs text-gray-500 ">
              <span class="w-2 h-2 bg-green-500 rounded-full mr-2 mt-1 flex-shrink-0"></span>
              <span>{item.split(' - ')[0]}</span>
            </li>
          ))}
          {deliverables.length > 2 && (
            <li class="text-xs text-blue-600  font-medium">
              +{deliverables.length - 2} more
            </li>
          )}
        </ul>
      </div>
    )}
    
    <!-- Duration Section -->
    {duration && (
      <div class="mb-6">
        <h4 class="font-semibold text-sm text-gray-700  mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Timeline
        </h4>
        <div class="flex items-center text-sm text-gray-600 ">
          <span class={`w-2 h-2 rounded-full mr-3 ${getDotColor(badgeColor)}`}></span>
          <span>{duration}</span>
        </div>
      </div>
    )}
    
    <!-- Pricing and Action Buttons -->
    <div class="mt-auto pt-4 border-t border-gray-100 ">
      <div class="mb-4">
        <div class="flex items-center justify-between mb-2">
          <div>
            {priceINR && <span class="font-bold text-base text-dark ">{priceINR}</span>}
            {priceUSD && <span class="text-xs text-gray-500 ml-2">({priceUSD})</span>}
          </div>
          {duration && <span class="text-xs text-gray-500">{duration}</span>}
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="flex gap-3">
        <button 
          data-add-to-cart
          data-item-id={id}
          data-item-type="pack"
          data-item-title={title}
          data-item-description={description}
          data-item-price={priceINR}
          data-item-duration={duration}
          class="pack-cart-btn flex-1 text-center py-2.5 px-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl text-sm">
          Add Pack
        </button>
        <a href={finalLearnMoreUrl} class="flex-1 border-2 text-center py-2.5 px-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 border-blue-500 text-blue-600 hover:bg-blue-50
          text-sm">
          View Details
        </a>
      </div>
    </div>
  </div>
  
  <!-- Enhanced hover effect overlay -->
  <div class="absolute inset-0 transition-all duration-500 rounded-2xl bg-gradient-to-br from-blue-500/0 to-purple-500/0 group-hover:from-blue-500/5 group-hover:to-purple-500/5"></div>
</div>

<style>
  .pack-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }
  .pack-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 24px 48px -12px rgba(0, 0, 0, 0.25);
  }
  .pack-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #3B82F6, #8B5CF6, #EC4899);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  .pack-card:hover::before {
    opacity: 1;
  }
  .animate-fade-in-up { 
    animation: fadeInUp 0.8s ease-out; 
  }
  @keyframes fadeInUp {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script>
  // Pack Card Cart Logic
  class PackCardCart {
    constructor(packId, buttonElement) {
      this.packId = packId;
      this.button = buttonElement;
      this.init();
    }

    async init() {
      await this.updateButtonText();
      this.setupEventListeners();
    }

    async updateButtonText() {
      try {
        // Import the shared utilities
        const { SummaryShared } = await import('/src/utils/summaryShared.js');
        const shared = new SummaryShared();
        
        const status = await shared.getPackCartStatus(this.packId);
        
        if (status.inCart) {
          // Pack is in cart - show remove button
          this.button.textContent = 'Remove Pack';
          this.button.className = this.button.className.replace(
            'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600',
            'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
          );
        } else {
          // Pack is not in cart - show add button
          this.button.textContent = 'Add Pack';
          this.button.className = this.button.className.replace(
            'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700',
            'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600'
          );
        }
      } catch (error) {
        console.error('Error updating pack button text:', error);
      }
    }

    setupEventListeners() {
      this.button.addEventListener('click', async (e) => {
        e.preventDefault();
        await this.handleCartAction();
      });
    }

    async handleCartAction() {
      try {
        const { SummaryShared } = await import('/src/utils/summaryShared.js');
        const shared = new SummaryShared();
        
        await shared.addPack(this.packId);
        
        // Update button text after action
        setTimeout(() => {
          this.updateButtonText();
        }, 100);
      } catch (error) {
        console.error('Error handling pack cart action:', error);
      }
    }
  }

  // Initialize pack card cart functionality when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const packButtons = document.querySelectorAll('.pack-cart-btn');
    packButtons.forEach(button => {
      const packId = button.getAttribute('data-item-id');
      if (packId) {
        new PackCardCart(packId, button);
      }
    });
  });

  // Listen for cart updates to refresh button states
  window.addEventListener('cart-updated', () => {
    const packButtons = document.querySelectorAll('.pack-cart-btn');
    packButtons.forEach(button => {
      const packId = button.getAttribute('data-item-id');
      if (packId) {
        // Re-initialize the cart logic for this button
        new PackCardCart(packId, button);
      }
    });
  });
</script> 