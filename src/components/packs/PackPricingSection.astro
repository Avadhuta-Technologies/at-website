---
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';

export interface Props {
  pack: {
    id: string;
    title: string;
    description: string;
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
    duration: string;
    cta: {
      primaryButton: string;
      secondaryButton: string;
    };
  };
}

const { pack } = Astro.props;
---

<section class="py-20 relative overflow-hidden" id="pricing">
  <div class="container mx-auto max-w-screen-2xl px-4 relative z-10">
    <div class="max-w-2xl mx-auto text-center">
      <h2 class="text-3xl md:text-4xl font-inter font-bold mb-4 text-graphite-900">Investment & ROI</h2>
      <p class="text-lg font-inter text-graphite-600 mb-8">Transparent pricing, no surprises</p>
      <div class="group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1">
        <!-- Card Background -->
        <div class="absolute inset-0 bg-white/90 backdrop-blur-sm border border-white/30 rounded-xl shadow-lg group-hover:shadow-xl transition-all duration-300"></div>
        
        <!-- Card Content -->
        <div class="relative p-8">
          <!-- Updated Price Display -->
          <div class="mb-4">
            <DiscountedPriceDisplay 
              basePriceINR={pack.basePriceINR}
              basePriceUSD={pack.basePriceUSD}
              discountPercentage={pack.discountPercentage}
              showBadge={true}
              showSavings={true}
              showOriginalPrice={true}
              size="xl"
              variant="conversion"
            />
          </div>
          <div class="text-graphite-600 font-inter mb-4">{pack.duration} delivery</div>
          <div class="inline-flex items-center px-4 py-2 bg-mint-100 text-mint-800 rounded-full text-sm font-inter font-semibold mb-6 border border-mint-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
            Best Value Guarantee
          </div>
          
          <div class="flex flex-col sm:flex-row gap-4 justify-center items-center w-full">
            <button 
              id={`pack-pricing-cta-${pack.id}`}
              data-add-to-cart
              data-item-id={pack.id}
              data-item-type="pack"
              data-item-title={pack.title}
              data-item-description={pack.description}
              class="flex items-center pack-pricing-cta-btn px-6 py-3 bg-gradient-to-r from-mint-500 to-cerulean-500 text-white font-inter font-semibold rounded-lg hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 hover:scale-105 hover:shadow-md group flex-shrink-0 shadow-sm"
              data-action="add">
              <span class="cta-text">{pack.cta.primaryButton}</span>
              <svg class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
              </svg>
            </button>
            <a href="/contact" class="px-6 py-3 glass border-graphite-300/50 text-graphite-700 font-inter font-semibold rounded-lg hover:bg-graphite-50/50 hover:border-graphite-400/70 transition-all duration-300 group hover:scale-105">{pack.cta.secondaryButton}</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Import SummaryShared for cart operations
  import { SummaryShared } from '../../utils/summaryShared.js';

  // Interactive functionality for pack detail page
  document.addEventListener('DOMContentLoaded', async () => {
    const shared = new SummaryShared();
    
    // Initialize pack buttons with correct cart state
    await shared.initializePackButtons();
    
    // Add event listeners for pack cart operations
    const packButtons = document.querySelectorAll('[data-add-to-cart][data-item-type="pack"]');
    
    packButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const packId = button.getAttribute('data-item-id');
        if (packId) {
          await shared.handlePackCartOperation(packId, button);
        }
      });
    });
    
    // Listen for cart updates to refresh button states
    window.addEventListener('cart-updated', async () => {
      await shared.initializePackButtons();
    });
  });
</script> 