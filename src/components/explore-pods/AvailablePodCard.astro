---
export interface Props {
  pod: {
    name: string;
    tagline: string;
    idealFor: string[];
    whatsInPod: {
      description: string;
      teamComposition: string[];
      upgradeNote: string;
    };
    whatCanDo: string[];
    deliveryTimelines: string[];
    whyTrust: string[];
    pastUseCases: string[];
    pricing: string[];
  };
  index: number;
}

const { pod, index } = Astro.props;

interface ColorClasses {
  bg: string;
  border: string;
  text: string;
  badge: string;
  iconBg: string;
}

// Color mapping for different pod types
const getColorClasses = (index: number): ColorClasses => {
  const colors: ColorClasses[] = [
    { 
      bg: 'bg-blue-50/80', 
      border: 'border-blue-200/50', 
      text: 'text-blue-700', 
      badge: 'bg-blue-100/90 text-blue-800 backdrop-blur-sm',
      iconBg: 'bg-blue-100/80'
    },
    { 
      bg: 'bg-purple-50/80', 
      border: 'border-purple-200/50', 
      text: 'text-purple-700', 
      badge: 'bg-purple-100/90 text-purple-800 backdrop-blur-sm',
      iconBg: 'bg-purple-100/80'
    },
    { 
      bg: 'bg-green-50/80', 
      border: 'border-green-200/50', 
      text: 'text-green-700', 
      badge: 'bg-green-100/90 text-green-800 backdrop-blur-sm',
      iconBg: 'bg-green-100/80'
    },
    { 
      bg: 'bg-pink-50/80', 
      border: 'border-pink-200/50', 
      text: 'text-pink-700', 
      badge: 'bg-pink-100/90 text-pink-800 backdrop-blur-sm',
      iconBg: 'bg-pink-100/80'
    },
    { 
      bg: 'bg-orange-50/80', 
      border: 'border-orange-200/50', 
      text: 'text-orange-700', 
      badge: 'bg-orange-100/90 text-orange-800 backdrop-blur-sm',
      iconBg: 'bg-orange-100/80'
    },
    { 
      bg: 'bg-teal-50/80', 
      border: 'border-teal-200/50', 
      text: 'text-teal-700', 
      badge: 'bg-teal-100/90 text-teal-800 backdrop-blur-sm',
      iconBg: 'bg-teal-100/80'
    }
  ];
  return colors[index % colors.length];
};

const colors = getColorClasses(index);

// Generate contextual icon based on pod content
const getPodIcon = (pod: any) => {
  const name = pod.name.toLowerCase();
  const tagline = pod.tagline.toLowerCase();
  const description = pod.whatsInPod.description.toLowerCase();
  const idealFor = pod.idealFor.join(' ').toLowerCase();
  
  // AI/ML related pods
  if (name.includes('ai') || name.includes('ml') || name.includes('intelligence') || 
      tagline.includes('ai') || description.includes('ai') || idealFor.includes('ai')) {
    return 'ü§ñ';
  }
  
  // Development/Engineering pods
  if (name.includes('dev') || name.includes('engineer') || name.includes('development') ||
      tagline.includes('dev') || description.includes('development')) {
    return '‚öôÔ∏è';
  }
  
  // Design/Creative pods
  if (name.includes('design') || name.includes('creative') || name.includes('ui') || name.includes('ux') ||
      tagline.includes('design') || description.includes('design')) {
    return 'üé®';
  }
  
  // Business/Strategy pods
  if (name.includes('business') || name.includes('strategy') || name.includes('consult') ||
      tagline.includes('business') || description.includes('strategy')) {
    return 'üìä';
  }
  
  // Marketing/Growth pods
  if (name.includes('marketing') || name.includes('growth') || name.includes('sales') ||
      tagline.includes('marketing') || description.includes('growth')) {
    return 'üìà';
  }
  
  // Product/Management pods
  if (name.includes('product') || name.includes('management') || name.includes('pm') ||
      tagline.includes('product') || description.includes('management')) {
    return 'üìã';
  }
  
  // Data/Analytics pods
  if (name.includes('data') || name.includes('analytics') || name.includes('insights') ||
      tagline.includes('data') || description.includes('analytics')) {
    return 'üìä';
  }
  
  // Security/Compliance pods
  if (name.includes('security') || name.includes('compliance') || name.includes('audit') ||
      tagline.includes('security') || description.includes('compliance')) {
    return 'üîê';
  }
  
  return 'üöÄ';
};

// Generate a simple ID from the pod name
const podId = pod.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
---

<div class="pod-card group relative overflow-hidden rounded-2xl transition-all duration-300 hover:scale-105 hover:-translate-y-2 cursor-pointer" data-pod-id={podId} data-pod-slug={podId}>
  <!-- Card Background with Glass Morphism -->
  <div class="absolute inset-0 bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-2xl shadow-lg group-hover:shadow-xl transition-all duration-300"></div>
  
  <!-- Decorative Background Elements -->
  <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-blue-100/50 to-purple-100/50 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
  <div class="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-tr from-green-100/50 to-blue-100/50 rounded-full translate-y-8 -translate-x-8 group-hover:scale-110 transition-transform duration-300"></div>
  
  <!-- Card Content -->
  <div class="relative p-6 flex flex-col h-full">
    <!-- Card Header -->
    <div class="flex items-start justify-between mb-4">
      <div class={`w-14 h-14 ${colors.iconBg} rounded-xl flex items-center justify-center backdrop-blur-sm group-hover:scale-110 transition-transform duration-300`}>
        <span class="text-2xl">{getPodIcon(pod)}</span>
      </div>
      <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold ${colors.badge} border border-current/20`}>
        Pod
      </span>
    </div>
    
    <!-- Title and Tagline -->
    <h3 class="text-xl font-bold text-gray-900 mb-2 group-hover:text-primary-600 transition-colors duration-200">
      {pod.name}
    </h3>
    
    <p class="text-sm text-gray-600 mb-4">
      {pod.tagline}
    </p>
    
    <!-- Pricing -->
    <div class="flex items-baseline space-x-2 mb-4">
      <span class="text-2xl font-bold text-gray-900">
        {pod.pricing[0]}
      </span>
    </div>
    
    {pod.pricing[1] && (
      <p class="text-sm text-gray-500 mb-4">
        {pod.pricing[1]}
      </p>
    )}
    
    <!-- Description -->
    <div class="flex-1 mb-6">
      <p class="text-gray-600 leading-relaxed text-sm pod-description">
        {pod.whatsInPod.description}
      </p>
    </div>
    
    <!-- Features List -->
    <div class="space-y-3 mb-6">
      {pod.idealFor.slice(0, 3).map((feature: string) => (
        <div class="flex items-center">
          <div class="w-8 h-8 bg-green-100/80 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <span class="text-sm text-gray-600 font-medium">{feature}</span>
        </div>
      ))}
    </div>
    

    
    <!-- Action Bar -->
    <div class="flex items-center justify-between space-y-3 pt-4 border-t border-gray-100/50 mt-auto">
      
      <!-- Dynamic CTA Button -->
      <button 
        id="pod-cta-{podId}"
        data-pod-id={podId}
        data-item-id={podId}
        data-item-type="pod"
        data-item-title={pod.name}
        data-item-description={pod.whatsInPod.description}
        data-item-price={pod.pricing[0]}
        class="pod-cta-btn w-full inline-flex items-center justify-center px-4 py-3 font-semibold rounded-xl transition-all duration-200 group-hover:shadow-lg"
        onclick="console.log('üîµ [AvailablePodCard] Pod CTA button clicked for:', '{{pod.name}}', 'with ID:', '{{podId}}');">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
        </svg>
        <span class="cta-text">Reserve Pod</span>
      </button>

      <!-- Details Link -->
      <div class="flex items-center justify-center">
        <a 
          href={`/pods/${podId}`} 
          class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700 font-medium transition-colors duration-200"
        >
          View Details
          <svg class="w-4 h-4 ml-1 group-hover:translate-x-0.5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
      
    </div>
  </div>
</div>

<script>
  // Handle pod card clicks for navigation
  document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('click', function(e) {
      // Check if the clicked element is a pod card
      const podCard = e.target.closest('.pod-card');
      if (podCard) {
        // Check if the click was on a button or link (CTA elements)
        const isCTAElement = e.target.closest('button, a, [data-add-to-cart]');
        
        if (!isCTAElement) {
          // Get the pod slug from the data attribute
          const podSlug = podCard.getAttribute('data-pod-slug');
          if (podSlug) {
            // Navigate to the pod details page
            window.location.href = `/pods/${podSlug}`;
          }
        }
      }
    });
  });

  // Debug logging for AvailablePodCard component
  console.log('üîµ [AvailablePodCard] Component loaded for pod:', '{{pod.name}}');
  console.log('üîµ [AvailablePodCard] Generated podId:', '{{podId}}');
  console.log('üîµ [AvailablePodCard] Pod data:', {
    name: '{{pod.name}}',
    tagline: '{{pod.tagline}}',
    pricing: ['{{pod.pricing[0]}}', '{{pod.pricing[1]}}'],
    description: '{{pod.whatsInPod.description}}',
    idealFor: ['{{pod.idealFor[0]}}', '{{pod.idealFor[1]}}', '{{pod.idealFor[2]}}']
  });

  // Monitor cart events and update CTA buttons
  if (typeof window !== 'undefined') {
    window.addEventListener('cart-updated', (event) => {
      const customEvent = event as CustomEvent;
      console.log('üîµ [AvailablePodCard] Cart updated event received:', customEvent.detail);
      updatePodCTAButtons();
    });
    
    // Update CTA buttons on page load
    document.addEventListener('DOMContentLoaded', () => {
      updatePodCTAButtons();
    });
    
    // Function to update pod CTA buttons based on cart state
    function updatePodCTAButtons() {
      try {
        const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
        const selectedPod = cart.find((item: any) => item.type === 'pod');
        
        // Get all pod CTA buttons
        const podButtons = document.querySelectorAll('.pod-cta-btn');
        
        podButtons.forEach((button: Element) => {
          const podId = button.getAttribute('data-pod-id');
          const ctaText = button.querySelector('.cta-text');
          
          if (selectedPod && selectedPod.id === podId) {
            // This pod is selected - show "Remove Pod"
            button.classList.remove('bg-gradient-to-r', 'from-primary-600', 'to-primary-700', 'text-white', 'hover:from-primary-700', 'hover:to-primary-800');
            button.classList.add('bg-red-500', 'text-white', 'hover:bg-red-600');
            button.setAttribute('data-action', 'remove');
            if (ctaText) ctaText.textContent = 'Remove Pod';
          } else {
            // This pod is not selected - show "Reserve Pod"
            button.classList.remove('bg-red-500', 'text-white', 'hover:bg-red-600');
            button.classList.add('bg-gradient-to-r', 'from-primary-600', 'to-primary-700', 'text-white', 'hover:from-primary-700', 'hover:to-primary-800');
            button.setAttribute('data-action', 'add');
            if (ctaText) ctaText.textContent = 'Reserve Pod';
          }
        });
      } catch (error) {
        console.error('Error updating pod CTA buttons:', error);
      }
    }
  }
</script>

<style>
  /* Pod Card Animations */
  .pod-card {
    opacity: 1 !important;
    transform: translateY(0) !important;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    display: block !important;
  }

  .pod-card.animate {
    opacity: 1;
    transform: translateY(0);
  }



  /* Hover Effects */
  .pod-card:hover {
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .pod-card {
      padding: 1.5rem;
    }
  }
</style> 