---
export interface Props {
  title: string;
  subtitle: string;
  faqs: Array<{
    question: string;
    answer: string;
  }>;
  className?: string;
}

const { title, subtitle, faqs, className = "" } = Astro.props;
---

<section
  class="relative z-20 overflow-hidden bg-white pt-20 pb-8 lg:pt-[120px] lg:pb-[50px]"
>
  <div class="container mx-auto px-4">
    <div class="flex flex-wrap -mx-4">
      <div class="w-full px-4">
        <div class="mx-auto max-w-[800px] text-center mb-20">
          <h2 class="text-dark mb-3 text-3xl leading-[1.2] font-bold sm:text-4xl md:text-[40px]">
            {title}
          </h2>
          <p class="mx-auto max-w-[485px] text-base text-body-color">
            {subtitle}
          </p>
        </div>
      </div>
    </div>

    <div class="flex flex-wrap -mx-4">
      <div class="w-full px-4">
        <div class="mx-auto max-w-[800px]">
          {faqs.map((faq, index) => (
            <div class="wow fadeInUp mb-8" data-wow-delay=".1s">
              <div class="faq-item">
                <button 
                  class="faq-question w-full px-8 py-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors duration-200"
                  data-faq-index={index}
                >
                  <h3 class="mb-6 text-xl font-semibold text-dark sm:text-2xl lg:text-xl xl:text-2xl">
                    {faq.question}
                  </h3>
                  <svg class="faq-icon w-6 h-6 text-gray-500 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div class="faq-answer hidden px-8 pb-6">
                  <p class="text-base text-body-color">
                    {faq.answer}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // FAQ Accordion functionality
  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      const answer = item.querySelector('.faq-answer');
      const icon = item.querySelector('.faq-icon');
      
      if (question && answer && icon) {
        question.addEventListener('click', () => {
          const isOpen = answer.classList.contains('hidden');
          
          // Close all other FAQ items
          faqItems.forEach(otherItem => {
            const otherAnswer = otherItem.querySelector('.faq-answer');
            const otherIcon = otherItem.querySelector('.faq-icon');
            if (otherAnswer && otherIcon && otherItem !== item) {
              otherAnswer.classList.add('hidden');
              otherIcon.classList.remove('rotate-180');
            }
          });
          
          // Toggle current item
          if (isOpen) {
            answer.classList.remove('hidden');
            icon.classList.add('rotate-180');
          } else {
            answer.classList.add('hidden');
            icon.classList.remove('rotate-180');
          }
        });
      }
    });
  });
</script>