---
import { catalogUtils } from '../../content/catalog/_index.js';
import AvailablePodCard from '../explore-pods/AvailablePodCard.astro';

export interface Props {
  data: {
    title: string;
    subtitle: string;
    featuredPodIds?: string[]; // Optional: specific pod IDs to display
  };
} 

const { data } = Astro.props;

// Get pods from centralized catalog
let pods: any[] = [];
if (data.featuredPodIds) {
  // Get specific pods by IDs
  pods = data.featuredPodIds.map(id => catalogUtils.getProductById(id, 'pod')).filter(Boolean);
} else {
  // Get all pods
  const allProducts = catalogUtils.getAllProducts().pods;
  pods = allProducts || [];
  console.log("ðŸš€ ~ pods:", pods)
}

const validPods = pods.filter(pod => 
  pod && 
  typeof pod === 'object' && 
  'name' in pod && 
  'tagline' in pod && 
  'idealFor' in pod && 
  'whatsInPod' in pod
) as Array<{
  name: string;
  tagline: string;
  idealFor: string[];
  whatsInPod: {
    description: string;
    teamComposition: string[];
    upgradeNote: string;
  };
  whatCanDo: string[];
  deliveryTimelines: string[];
  whyTrust: string[];
  pastUseCases: string[];
  pricing: string[];
}>;

// Color mapping for different pod types
const getColorClasses = (color: string) => {
  const colorMap: Record<string, { bg: string; border: string; text: string; badge: string }> = {
    blue: { 
      bg: 'bg-cerulean-50', 
      border: 'border-cerulean-200', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100 text-cerulean-800' 
    },
    purple: { 
      bg: 'bg-lavender-50', 
      border: 'border-lavender-200', 
      text: 'text-lavender-700', 
      badge: 'bg-lavender-100 text-lavender-800' 
    },
    green: { 
      bg: 'bg-mint-50', 
      border: 'border-mint-200', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100 text-mint-800' 
    },
    pink: { 
      bg: 'bg-lavender-50', 
      border: 'border-lavender-200', 
      text: 'text-lavender-700', 
      badge: 'bg-lavender-100 text-lavender-800' 
    },
    orange: { 
      bg: 'bg-mint-50', 
      border: 'border-mint-200', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100 text-mint-800' 
    },
    teal: { 
      bg: 'bg-cerulean-50', 
      border: 'border-cerulean-200', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100 text-cerulean-800' 
    }
  };
  return colorMap[color] || colorMap.blue;
};
---

<section id="pods-section" class="py-20 relative overflow-hidden">
  <!-- Enhanced Background -->
  <div class="absolute inset-0 bg-gradient-to-br from-slate-100 via-slate-50 to-slate-200/50"></div>
  
  <!-- Background Elements -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="absolute top-20 left-10 w-32 h-32 bg-mint-200/30 rounded-full blur-xl animate-pulse"></div>
    <div class="absolute bottom-20 right-10 w-40 h-40 bg-cerulean-200/25 rounded-full blur-xl animate-pulse" style="animation-delay: 2s;"></div>
    <div class="absolute top-1/2 left-1/4 w-24 h-24 bg-lavender-200/30 rounded-full blur-lg animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/3 right-1/4 w-20 h-20 bg-mint-300/20 rounded-full blur-lg animate-pulse" style="animation-delay: 3s;"></div>
    <div class="absolute bottom-1/3 left-1/3 w-28 h-28 bg-cerulean-300/20 rounded-full blur-xl animate-pulse" style="animation-delay: 1.5s;"></div>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <!-- Section Header -->
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-slate-900 mb-4 font-satoshi">
        {data.title}
      </h2>
      <p class="text-lg text-slate-600 leading-relaxed font-inter">
        {data.subtitle} {validPods.length}
      </p>
    </div>
    
    <!-- Pods Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
      {validPods?.slice(0, 6).map((pod, index) => (
        <div class="pod-card glass-card p-6 rounded-2xl border border-slate-200/50 hover:scale-[1.02] transition-all duration-500 flex flex-col h-full">
          <!-- Card Header -->
          <div class="mb-4">
            <div class="flex items-center justify-between mb-3">
              <div class="pod-badge glass-card-light px-2 py-1 rounded-lg text-xs font-semibold font-satoshi">
                Pod {index + 1}
              </div>
              <div class="w-7 h-7 bg-mint-500/10 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
              </div>
            </div>
            <h3 class="text-lg font-bold text-slate-900 mb-1 font-satoshi leading-tight">
              {pod.name}
            </h3>
            <p class="text-slate-600 text-xs font-inter line-clamp-2">
              {pod.tagline}
            </p>
          </div>
          
          <!-- Compact Content -->
          <div class="flex-1 space-y-4">
            <!-- Quick Overview -->
            <div class="overview-section">
              <p class="text-slate-600 text-xs font-inter line-clamp-3 leading-relaxed">
                {pod.whatsInPod.description}
              </p>
            </div>

            <!-- Key Highlights -->
            <div class="highlights-grid">
              <!-- Ideal For -->
              <div class="highlight-item">
                <div class="highlight-icon">
                  <svg class="w-3 h-3 text-cerulean-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
                <div class="highlight-content">
                  <div class="highlight-label font-satoshi text-xs font-semibold text-slate-700">Ideal For</div>
                  <div class="highlight-text font-inter text-xs text-slate-600 line-clamp-1">
                    {pod.idealFor[0]}
                  </div>
                </div>
              </div>

              <!-- Team Size -->
              <div class="highlight-item">
                <div class="highlight-icon">
                  <svg class="w-3 h-3 text-lavender-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                  </svg>
                </div>
                <div class="highlight-content">
                  <div class="highlight-label font-satoshi text-xs font-semibold text-slate-700">Team</div>
                  <div class="highlight-text font-inter text-xs text-slate-600 line-clamp-1">
                    {pod.whatsInPod.teamComposition.length} members
                  </div>
                </div>
              </div>

              <!-- Timeline -->
              <div class="highlight-item">
                <div class="highlight-icon">
                  <svg class="w-3 h-3 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="highlight-content">
                  <div class="highlight-label font-satoshi text-xs font-semibold text-slate-700">Timeline</div>
                  <div class="highlight-text font-inter text-xs text-slate-600 line-clamp-1">
                    {pod.deliveryTimelines?.[0] || 'Custom'}
                  </div>
                </div>
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="quick-actions">
              <div class="action-tags">
                {pod.idealFor.slice(0, 2).map((item) => (
                  <span class="action-tag glass-card-light text-xs font-inter text-slate-600 px-2 py-1 rounded-md">
                    {item}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <!-- Card Footer -->
          <div class="mt-4 pt-3 border-t border-slate-200/30">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-1">
                <svg class="w-3 h-3 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                <span class="text-xs text-slate-600 font-inter font-medium">
                  Ready to start
                </span>
              </div>
              <a href={`/pods/${pod.name.toLowerCase().replace(/\s+/g, '-')}`} class="text-mint-600 hover:text-mint-700 text-sm font-semibold font-satoshi transition-colors flex items-center">
                Details
                <svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Explore All Pods Button -->
    <div class="text-center">
      <a 
        href="/explore-pods" 
        class="inline-flex items-center px-8 py-4 glass-button text-slate-700 font-semibold rounded-xl border border-slate-200/50 hover:scale-105 transition-all duration-300 group"
      >
        <span class="font-satoshi">Explore All Pods</span>
        <svg class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  /* Glass Card Utilities */
  .glass-card {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(148, 163, 184, 0.1);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  .glass-card-light {
    background: rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(148, 163, 184, 0.1);
  }

  .glass-button {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    border: 1px solid rgba(148, 163, 184, 0.2);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  /* Compact Layout */
  .overview-section {
    margin-bottom: 0.5rem;
  }

  .highlights-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .highlight-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.4);
    border-radius: 0.5rem;
    border: 1px solid rgba(148, 163, 184, 0.1);
    transition: all 0.2s ease;
  }

  .highlight-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .highlight-icon {
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 0.25rem;
    border: 1px solid rgba(148, 163, 184, 0.1);
  }

  .highlight-content {
    flex: 1;
    min-width: 0;
  }

  .highlight-label {
    font-size: 0.625rem;
    font-weight: 600;
    color: #475569;
    margin-bottom: 0.125rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .highlight-text {
    font-size: 0.75rem;
    color: #64748b;
    line-height: 1.2;
  }

  .quick-actions {
    margin-top: 0.5rem;
  }

  .action-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.375rem;
  }

  .action-tag {
    background: rgba(255, 255, 255, 0.4);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    border: 1px solid rgba(148, 163, 184, 0.1);
    font-size: 0.625rem;
    color: #64748b;
    transition: all 0.2s ease;
  }

  .action-tag:hover {
    background: rgba(255, 255, 255, 0.6);
    transform: translateY(-1px);
  }

  .pod-badge {
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    border: 1px solid rgba(148, 163, 184, 0.1);
    color: #334155;
  }

  /* Text Clamping */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }

  /* Card Animations */
  .pod-card {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .pod-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Hover Effects */
  .pod-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
  }

  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .pod-card {
      padding: 1.5rem;
    }

    .highlights-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem;
    }

    .highlight-item {
      padding: 0.375rem;
    }

    .highlight-icon {
      width: 1.25rem;
      height: 1.25rem;
    }
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .glass-card {
      background: rgba(30, 41, 59, 0.7);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .glass-card-light {
      background: rgba(30, 41, 59, 0.5);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .glass-button {
      background: rgba(30, 41, 59, 0.8);
      border-color: rgba(148, 163, 184, 0.3);
    }

    .highlight-item {
      background: rgba(30, 41, 59, 0.4);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .highlight-icon {
      background: rgba(30, 41, 59, 0.8);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .highlight-label {
      color: #cbd5e1;
    }

    .highlight-text {
      color: #94a3b8;
    }

    .action-tag {
      background: rgba(30, 41, 59, 0.4);
      border-color: rgba(148, 163, 184, 0.2);
      color: #94a3b8;
    }

    .action-tag:hover {
      background: rgba(30, 41, 59, 0.6);
    }

    .pod-badge {
      background: rgba(30, 41, 59, 0.6);
      border-color: rgba(148, 163, 184, 0.2);
      color: #e2e8f0;
    }

    h2, h3, h4, h5 {
      color: #f1f5f9;
    }

    p, span {
      color: #cbd5e1;
    }

    .text-slate-900 {
      color: #f1f5f9;
    }

    .text-slate-600, .text-slate-700 {
      color: #cbd5e1;
    }
  }
</style>

<script>
  // Scroll-triggered animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const cardObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          // Add delay for staggered animation
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 100);
        }
      });
    }, observerOptions);

    // Observe all pod cards
    document.querySelectorAll('.pod-card').forEach(card => {
      cardObserver.observe(card);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
</script>
