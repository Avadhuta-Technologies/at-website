---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    questions: Array<{
      question: string;
      answer: string;
    }>;
  };
}

const { data } = Astro.props;
---

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4 gradient-title">{data.title}</h2>
      <p class="text-lg text-gray-600">{data.subtitle}</p>
    </div>
    
    <div class="max-w-4xl mx-auto">
      <div class="space-y-4">
        {data.questions.map((item, index) => (
          <div class="faq-item group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <!-- Card Background with Gradient -->
            <div class="absolute inset-0 bg-gradient-to-br from-white/90 to-white/70 backdrop-blur-sm border border-white/30 rounded-xl shadow-sm group-hover:shadow-xl transition-all duration-300"></div>
            
            <!-- Decorative Background Elements -->
            <div class="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-blue-100/50 to-purple-100/50 rounded-full -translate-y-8 translate-x-8 group-hover:scale-110 transition-transform duration-300"></div>
            <div class="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-tr from-green-100/50 to-blue-100/50 rounded-full translate-y-6 -translate-x-6 group-hover:scale-110 transition-transform duration-300"></div>
            
            <!-- Card Content -->
            <div class="relative p-6">
              <button 
                class="faq-toggle w-full flex items-center justify-between text-left focus:outline-none focus:ring-2 focus:ring-blue-500/20 rounded-lg transition-all duration-200"
                data-faq-index={index}
              >
                <div class="flex items-start gap-4">
                 
                  
                  <!-- Question Text -->
                  <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-bold text-gray-900 group-hover:text-gray-800 transition-colors duration-300 leading-tight pr-8">
                      {item.question}
                    </h3>
                  </div>
                </div>
                
                <!-- Expand/Collapse Icon -->
                <div class="faq-icon flex-shrink-0 w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center transition-all duration-300 group-hover:scale-110">
                  <svg class="w-3 h-3 text-white transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </button>
              
              <!-- Answer Content (Hidden by default) -->
              <div class="faq-content hidden mt-4 pl-4">
                <div class="bg-gradient-to-r from-gray-50/80 to-white/60 rounded-lg p-4 border border-gray-100/50 backdrop-blur-sm">
                  <p class="text-gray-700 leading-relaxed text-sm">
                    {item.answer}
                  </p>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  /* FAQ Item Animations */
  .faq-item {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .faq-item.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Active FAQ Item */
  .faq-item.active {
    transform: translateY(-2px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  .faq-item.active .faq-icon {
    transform: rotate(180deg);
  }

  /* Content Animation */
  .faq-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out, margin 0.3s ease-in-out;
    opacity: 0;
    margin-top: 0;
  }

  .faq-content.show {
    max-height: 500px;
    opacity: 1;
    margin-top: 1rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .faq-item {
      padding: 1rem;
    }
    
    .faq-content {
      padding-left: 3.5rem;
    }
  }
</style>

<script>
  // FAQ Accordion Functionality
  function initFAQAccordion() {
    const faqToggles = document.querySelectorAll('.faq-toggle');
    
    faqToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const faqItem = this.closest('.faq-item');
        const content = faqItem.querySelector('.faq-content');
        const icon = faqItem.querySelector('.faq-icon');
        
        // Close all other FAQ items
        document.querySelectorAll('.faq-item').forEach(item => {
          if (item !== faqItem) {
            item.classList.remove('active');
            const otherContent = item.querySelector('.faq-content');
            otherContent.classList.remove('show');
            otherContent.style.display = 'none';
          }
        });
        
        // Toggle current FAQ item
        const isActive = faqItem.classList.contains('active');
        
        if (isActive) {
          // Close
          faqItem.classList.remove('active');
          content.classList.remove('show');
          setTimeout(() => {
            content.style.display = 'none';
          }, 300);
        } else {
          // Open
          faqItem.classList.add('active');
          content.style.display = 'block';
          setTimeout(() => {
            content.classList.add('show');
          }, 10);
        }
      });
    });
  }

  // Scroll-triggered animations for FAQ items
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const faqObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          // Add delay for staggered animation
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 100);
        }
      });
    }, observerOptions);

    // Observe all FAQ items
    document.querySelectorAll('.faq-item').forEach(item => {
      faqObserver.observe(item);
    });
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    initFAQAccordion();
    initScrollAnimations();
  });
</script> 