---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    steps: Array<{
      number: string;
      title: string;
      description: string;
      icon: string;
      podTypes?: Array<{
        name: string;
        description: string;
      }>;
      benefits?: string[];
      compositionTitle?: string;
      composition?: string[];
      adaptabilityTitle?: string;
      adaptabilityFeatures?: Array<{
        title: string;
        description: string;
      }>;
    }>;
  };
}

const { data } = Astro.props;
---

<section class="py-20 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        {data.title}
      </h2>
      <p class="text-lg text-gray-600 leading-relaxed">
        {data.subtitle}
      </p>
    </div>
    
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {data.steps.map((step, index) => (
          <div class="step bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md transition-all duration-300">
            <!-- Step Header -->
            <div class="flex items-center mb-4">
              <div class="flex-shrink-0 w-10 h-10 bg-primary-600 text-white font-bold text-lg rounded-full flex items-center justify-center mr-4">
                {step.number}
              </div>
              <h3 class="text-xl font-semibold text-gray-900">
                {step.title}
              </h3>
            </div>
            
            <!-- Step Description -->
            <p class="text-gray-600 leading-relaxed mb-6">
              {step.description}
            </p>
            
            <!-- Pod Types (for step 1) -->
            {step.podTypes && (
              <div class="mb-6">
                <h4 class="font-semibold text-gray-900 mb-3">Available Pods:</h4>
                <div class="space-y-2">
                  {step.podTypes.map((pod) => (
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg border border-gray-200">
                      <div class="w-2 h-2 bg-primary-600 rounded-full mr-3"></div>
                      <div>
                        <div class="font-medium text-gray-900 text-sm">{pod.name}</div>
                        <div class="text-gray-600 text-xs">{pod.description}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Benefits (for step 2) -->
            {step.benefits && (
              <div class="mb-6">
                <h4 class="font-semibold text-gray-900 mb-3">Key Benefits:</h4>
                <div class="space-y-2">
                  {step.benefits.map((benefit) => (
                    <div class="flex items-center p-3 bg-green-50 rounded-lg border border-green-200">
                      <svg class="w-4 h-4 text-green-600 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                      <span class="text-gray-700 text-sm">{benefit}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Composition (for step 3) -->
            {step.composition && (
              <div class="mb-6">
                <h4 class="font-semibold text-gray-900 mb-3">{step.compositionTitle}</h4>
                <div class="space-y-2">
                  {step.composition.map((item) => (
                    <div class="flex items-center p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <svg class="w-4 h-4 text-blue-600 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <span class="text-gray-700 text-sm">{item}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Adaptability Features (for step 4) -->
            {step.adaptabilityFeatures && (
              <div class="mb-6">
                <h4 class="font-semibold text-gray-900 mb-3">{step.adaptabilityTitle}</h4>
                <div class="space-y-3">
                  {step.adaptabilityFeatures.map((feature) => (
                    <div class="p-3 bg-amber-50 rounded-lg border border-amber-200">
                      <h5 class="font-medium text-amber-900 text-sm mb-1">{feature.title}</h5>
                      <p class="text-amber-800 text-xs">{feature.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
    
   
  </div>
</section>

<style>
  .how-it-works-section {
    padding: 4rem 0;
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
    position: relative;
    overflow: hidden;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  /* Section Header */
  .section-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .header-badge {
    display: inline-flex;
    align-items: center;
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1rem;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .section-title {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 800;
    color: #1e293b;
    margin-bottom: 1rem;
    line-height: 1.1;
  }

  .section-description {
    font-size: 1.125rem;
    color: #64748b;
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  /* Steps Flow */
  .steps-flow {
    position: relative;
  }

  .flow-path {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    z-index: 1;
    pointer-events: none;
  }

  .flow-line {
    stroke-dasharray: 10 5;
    stroke-dashoffset: 100;
    transition: stroke-dashoffset 1s ease-in-out;
  }

  .flow-dot {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .flow-line.animate {
    stroke-dashoffset: 0;
  }

  .flow-dot.animate {
    opacity: 1;
  }

  /* Steps Container */
  .steps-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 3rem;
    position: relative;
    z-index: 2;
  }

  /* Individual Step */
  .step {
    text-align: left;
    padding: 2rem;
    background: white;
    border-radius: 1rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .step:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);
  }

  /* Step Icon Background */
  .step-icon-bg {
    position: absolute;
    bottom: -1rem;
    right: -1rem;
    width: 8rem;
    height: 8rem;
    opacity: 0.05;
    color: #3b82f6;
    z-index: 1;
  }

  .step-icon-bg svg {
    width: 100%;
    height: 100%;
  }

  .step-number {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    background: #10b981;
    color: white;
    border-radius: 50%;
    font-weight: 700;
    font-size: 0.875rem;
    margin-right: 0.75rem;
  }

  .step-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.75rem;
    line-height: 1.2;
    display: flex;
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .step-description {
    font-size: 0.875rem;
    color: #64748b;
    line-height: 1.5;
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
  }

  /* Pod Types */
  .pod-types {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    position: relative;
    z-index: 2;
    flex-grow: 1;
  }

  .pod-type {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: #f8fafc;
    border-radius: 0.5rem;
    border: 1px solid #e2e8f0;
    font-size: 0.875rem;
  }

  .pod-name {
    font-weight: 600;
    color: #1e293b;
    font-size: 0.875rem;
  }

  .pod-desc {
    color: #64748b;
    font-size: 0.75rem;
  }

  /* Benefits */
  .benefits {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    position: relative;
    z-index: 2;
  }

  .benefit {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: #f0fdf4;
    border-radius: 0.5rem;
    border: 1px solid #bbf7d0;
  }

  .benefit svg {
    width: 1rem;
    height: 1rem;
    color: #10b981;
    flex-shrink: 0;
  }

  .benefit span {
    color: #374151;
    font-size: 0.875rem;
    font-weight: 500;
  }

  /* Composition */
  .composition h4 {
    font-size: 1rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
  }

  .composition-items {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    position: relative;
    z-index: 2;
  }

  .composition-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: #f8fafc;
    border-radius: 0.5rem;
    border: 1px solid #e2e8f0;
  }

  .composition-item svg {
    width: 1rem;
    height: 1rem;
    color: #3b82f6;
    flex-shrink: 0;
  }

  .composition-item span {
    color: #374151;
    font-size: 0.875rem;
  }

  /* Adaptability */
  .adaptability h4 {
    font-size: 1rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
  }

  .adaptability-items {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    position: relative;
    z-index: 2;
  }

  .adaptability-item {
    padding: 0.75rem;
    background: #fef3c7;
    border-radius: 0.5rem;
    border: 1px solid #fde68a;
  }

  .adaptability-item h5 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #92400e;
    margin-bottom: 0.25rem;
  }

  .adaptability-item p {
    font-size: 0.75rem;
    color: #a16207;
    line-height: 1.4;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .steps-container {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
  }

  @media (max-width: 768px) {
    .steps-container {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .flow-path {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .step {
      padding: 1.5rem;
    }

    .step-icon-bg {
      width: 6rem;
      height: 6rem;
      bottom: -0.5rem;
      right: -0.5rem;
    }

    .step-title {
      font-size: 1.125rem;
    }
  }

  /* Animations */
  .step {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease-out;
  }

  .step.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .how-it-works-section {
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    }

    .section-title {
      color: #f1f5f9;
    }

    .section-description {
      color: #94a3b8;
    }

    .step {
      background: #1e293b;
      border-color: #334155;
    }

    .step-title {
      color: #f1f5f9;
    }

    .step-description {
      color: #94a3b8;
    }

    .pod-type {
      background: #334155;
      border-color: #475569;
    }

    .pod-name {
      color: #f1f5f9;
    }

    .pod-desc {
      color: #94a3b8;
    }

    .benefit {
      background: #064e3b;
      border-color: #065f46;
    }

    .benefit span {
      color: #d1fae5;
    }

    .composition-item {
      background: #334155;
      border-color: #475569;
    }

    .composition-item span {
      color: #e2e8f0;
    }

    .adaptability-item {
      background: #451a03;
      border-color: #78350f;
    }

    .adaptability-item h5 {
      color: #fef3c7;
    }

    .adaptability-item p {
      color: #fbbf24;
    }
  }
</style>

<script>
  // Scroll-triggered animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const stepObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
          
          // Animate flow path progressively
          setTimeout(() => {
            const flowLine = document.querySelector('.flow-line');
            const flowDots = document.querySelectorAll('.flow-dot');
            
            if (flowLine) {
              flowLine.classList.add('animate');
            }
            
            flowDots.forEach((dot, dotIndex) => {
              if (dotIndex <= index) {
                setTimeout(() => {
                  dot.classList.add('animate');
                }, dotIndex * 200);
              }
            });
          }, index * 300);
        }
      });
    }, observerOptions);

    // Observe all steps
    document.querySelectorAll('.step').forEach(step => {
      stepObserver.observe(step);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
</script> 