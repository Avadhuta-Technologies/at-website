---
export interface Step {
  number: string;
  title: string;
  description: string;
  icon?: string;
}

export interface Props {
  // New format - single data object
  data?: {
    title?: string;
    steps?: Step[];
  };
  // Old format - individual props (for backward compatibility)
  title?: string;
  steps?: Step[];
  className?: string;
}

const defaultSteps: Step[] = [
  { 
    number: "1.", 
    title: "Choose Your Pod", 
    description: "Pick from a curated set of delivery pods—built for MVPs, AI apps, ecommerce, design sprints, or full product builds. Each pod comes pre-structured with the right blend of human expertise and AI-powered workflows.\n\nAvailable Pods:\nBuildPod: Full-stack development team\nVisionPod: UX/UI design & prototyping\nCodePod: Developer + AI pair-programming unit\nLaunchPod: End-to-end product launch squad", 
    icon: "choose-pod" 
  },
  { 
    number: "2.", 
    title: "Align on Outcomes", 
    description: "We define clear goals, scope, and success metrics upfront. No hourly billing—just outcome-based delivery that keeps everyone focused and accountable.\n\nYou get:\nTransparent timelines\nMilestone-driven execution\nFlexible scaling as your needs grow", 
    icon: "align-outcomes" 
  },
  { 
    number: "3.", 
    title: "Your Pod Gets to Work", 
    description: "Your NovaPod starts delivering from day one—powered by human builders, supported by AI agents. From design to code to QA, everything runs in sync, fast.\n\nWhat's inside a pod?\nProduct managers\nEngineers + AI dev copilots\nDesigners + AI research assistants\nAutomated workflows and delivery pipelines", 
    icon: "pod-working" 
  },
  { 
    number: "4.", 
    title: "Review. Launch. Iterate.", 
    description: "You stay in control with regular updates, reviews, and testable outputs. Once launched, your pod can evolve into a support or growth pod—or spin up a new one instantly.\n\nBuilt to adapt:\nRetain the same pod or rotate\nLayer in new pods for expansion\nScale delivery without re-hiring", 
    icon: "launch-iterate" 
  }
];

const { data, title: titleProp, steps: stepsProp, className = "" } = Astro.props;

// Use data object if provided, otherwise use individual props
const title = data?.title || titleProp || "How It Works";
const steps = data?.steps || stepsProp || defaultSteps;

// SVG Icon Components - Each with unique design matching step content
const getSvgIcon = (iconType: string) => {
  switch (iconType) {
    case "choose-pod":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
      </svg>`;
    case "align-outcomes":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v3m0 0v3m0-3h3m-3 0H9"></path>
      </svg>`;
    case "pod-working":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
      </svg>`;
    case "launch-iterate":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v3m0 0v3m0-3h3m-3 0H9"></path>
      </svg>`;
    default:
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>`;
  }
};
---

<section id="how-it-works" class={`py-20 bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800 ${className}`}>
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-dark dark:text-white animate-fade-in-up">
        {title}
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto animate-fade-in-up animation-delay-200">
        From concept to launch in weeks, not months
      </p>
    </div>
    
    <!-- Home-specific layout: 4 steps in a 2x2 grid -->
    <div class="max-w-6xl mx-auto">
      

      <!-- Steps Grid - 2x2 layout for home page -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {steps.map((step, idx) => (
          <div class={`step-card group relative hover-lift bg-white dark:bg-slate-800 rounded-2xl shadow-lg p-8 h-full transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 border border-gray-100 dark:border-slate-700 animate-fade-in-up animation-delay-${(idx + 1) * 200}`}>
            
            <!-- Step Number and Icon -->
            <div class="flex items-center mb-6">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-xl flex items-center justify-center mr-4 transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg">
                <Fragment set:html={getSvgIcon(step.icon || 'default')} />
              </div>
              <div class="flex-1">
                <div class="text-sm font-semibold text-blue-600 dark:text-blue-400 mb-1">Step {step.number}</div>
                <h3 class="text-xl font-bold text-dark dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                  {step.title}
                </h3>
              </div>
            </div>
            
            <!-- Description -->
            <div class="text-gray-600 dark:text-gray-300 leading-relaxed">
              {(() => {
                const parts = step.description.split('\n\n');
                const mainDescription = parts[0];
                const listSection = parts.slice(1).join('\n\n');
                
                return (
                  <>
                    <div class="mb-4 text-base">
                      {mainDescription}
                    </div>
                    {listSection && (
                      <div class="bg-gradient-to-r from-blue-50/80 to-purple-50/80 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-4 border border-blue-200/50 dark:border-blue-700/30">
                        <div class="text-gray-700 dark:text-gray-200 text-sm leading-relaxed">
                          {(() => {
                            const lines = listSection.split('\n');
                            const header = lines[0];
                            const items = lines.slice(1);
                            
                            return (
                              <>
                                <div class="font-semibold text-blue-700 dark:text-blue-300 mb-2">
                                  {header}
                                </div>
                                <div class="space-y-2">
                                  {items.map(item => (
                                    <div class="flex items-start space-x-3">
                                      <div class="w-5 h-5 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full mt-0.5 flex-shrink-0 flex items-center justify-center shadow-sm">
                                        <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                                          <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                      </div>
                                      <div class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
                                        {item}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </>
                            );
                          })()}
                        </div>
                      </div>
                    )}
                  </>
                );
              })()}
            </div>
          </div>
        ))}
      </div>

      <!-- Mobile Progress Indicator -->
      <div class="md:hidden mt-8">
        <div class="flex justify-center space-x-2">
          {steps.map((_, idx) => (
            <div class="w-3 h-3 bg-gray-300 rounded-full progress-dot" data-step={idx}></div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .step-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .step-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.25);
  }

  .step-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #3B82F6, #8B5CF6, #EC4899);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .step-card:hover::before {
    opacity: 1;
  }

  /* Animation delays */
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  .animation-delay-800 { animation-delay: 0.8s; }

  /* Fade in animations */
  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 