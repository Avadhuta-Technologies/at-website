---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    steps: Array<{
      number: string;
      title: string;
      description: string;
      icon: string;
      podTypes?: Array<{
        name: string;
        description: string;
      }>;
      benefits?: string[];
      compositionTitle?: string;
      composition?: string[];
      adaptabilityTitle?: string;
      adaptabilityFeatures?: Array<{
        title: string;
        description: string;
      }>;
    }>;
  };
}

const { data } = Astro.props;

// Get contextually appropriate icon based on step content
const getStepIcon = (step: any, index: number) => {
  const title = step.title.toLowerCase();
  
  // Step 1: Choose Pod
  if (index === 0) return '🎯';
  
  // Step 2: Get Matched
  if (index === 1) return '🤝';
  
  // Step 3: Start Building
  if (index === 2) return '🚀';
  
  // Step 4: Scale & Adapt
  if (index === 3) return '📈';
  
  return '📋';
};

// Get color scheme based on step
const getStepColorClasses = (index: number) => {
  const colorSchemes = [
    'from-[#22c55e]/10 to-[#0ea5e9]/10 border-[#22c55e]/30', // Step 1
    'from-green-500/10 to-teal-500/10 border-green-200/30', // Step 2
    'from-orange-500/10 to-red-500/10 border-orange-200/30', // Step 3
    'from-purple-500/10 to-pink-500/10 border-purple-200/30' // Step 4
  ];
  return colorSchemes[index] || colorSchemes[0];
};
---

<section id="how-it-works" class="py-20 relative overflow-hidden">
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-manrope font-bold gradient-title mb-4">
        {data.title}
      </h2>
      <p class="text-lg font-inter text-graphite-600 leading-relaxed">
        {data.subtitle}
      </p>
    </div>
    
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {data.steps.map((step, index) => (
          <div class="step-card group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1">
            <!-- Card Background with Gradient -->
            <div class="absolute inset-0 bg-gradient-to-br from-white/90 to-white/70 backdrop-blur-sm border border-white/30 rounded-xl shadow-sm group-hover:shadow-xl transition-all duration-300"></div>
            
            <!-- Decorative Background Elements -->
            <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-[#22c55e]/50 to-[#0ea5e9]/50 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
            <div class="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-tr from-[#0ea5e9]/50 to-[#22c55e]/50 rounded-full translate-y-8 -translate-x-8 group-hover:scale-110 transition-transform duration-300"></div>
            
            <!-- Card Content -->
            <div class="relative p-6 flex flex-col h-full">
              <!-- Step Header with Icon and Number -->
              <div class="flex items-start justify-between mb-5">
                <div class={`w-14 h-14 bg-gradient-to-br ${getStepColorClasses(index)} rounded-xl flex items-center justify-center border group-hover:scale-110 transition-transform duration-300`}>
                  <span class="text-2xl">{getStepIcon(step, index)}</span>
                </div>
                
                <!-- Step Number Badge -->
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-inter font-medium bg-primary-100 text-primary-700 border border-primary-200">
                  Step {step.number}
                </span>
              </div>
              
              <!-- Title and Description -->
              <div class="mb-5">
                <h3 class="text-xl font-manrope font-bold text-gray-900 mb-3 group-hover:text-gray-800 transition-colors duration-300 leading-tight">
                  {step.title}
                </h3>
                <p class="text-graphite-600 leading-relaxed text-sm font-inter line-clamp-3">
                  {step.description}
                </p>
              </div>
              
              <!-- Content Sections -->
              <div class="flex-1 space-y-4">
                <!-- Pod Types (for step 1) -->
                {step.podTypes && (
                  <div class="content-section">
                    <div class="section-header">
                      <svg class="w-4 h-4 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                      </svg>
                      <h4 class="font-manrope font-semibold text-gray-900 text-sm">Available Pods</h4>
                    </div>
                    <div class="content-grid">
                      {step.podTypes.map((pod) => (
                        <div class="content-item">
                          <div class="item-icon">
                            <svg class="w-3 h-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                          </div>
                          <div class="item-content">
                            <div class="item-title text-sm font-manrope">{pod.name}</div>
                            <div class="item-description text-xs font-inter line-clamp-1">{pod.description}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <!-- Benefits (for step 2) -->
                {step.benefits && (
                  <div class="content-section">
                    <div class="section-header">
                      <svg class="w-4 h-4 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                      </svg>
                      <h4 class="font-manrope font-semibold text-gray-900 text-sm">Key Benefits</h4>
                    </div>
                    <div class="content-grid">
                      {step.benefits.map((benefit) => (
                        <div class="content-item">
                          <div class="item-icon">
                            <svg class="w-3 h-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                          </div>
                          <div class="item-content">
                            <div class="item-text text-xs font-inter line-clamp-2">{benefit}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <!-- Composition (for step 3) -->
                {step.composition && (
                  <div class="content-section">
                    <div class="section-header">
                      <svg class="w-4 h-4 text-purple-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                      </svg>
                      <h4 class="font-manrope font-semibold text-gray-900 text-sm">{step.compositionTitle}</h4>
                    </div>
                    <div class="content-grid">
                      {step.composition.map((item) => (
                        <div class="content-item">
                          <div class="item-icon">
                            <svg class="w-3 h-3 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                          </div>
                          <div class="item-content">
                            <div class="item-text text-xs font-inter line-clamp-1">{item}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <!-- Adaptability Features (for step 4) -->
                {step.adaptabilityFeatures && (
                  <div class="content-section">
                    <div class="section-header">
                      <svg class="w-4 h-4 text-pink-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      <h4 class="font-manrope font-semibold text-gray-900 text-sm">{step.adaptabilityTitle}</h4>
                    </div>
                    <div class="content-grid">
                      {step.adaptabilityFeatures.map((feature) => (
                        <div class="content-item">
                          <div class="item-content">
                            <div class="item-title text-sm font-manrope">{feature.title}</div>
                            <div class="item-description text-xs font-inter line-clamp-2">{feature.description}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  /* Enhanced Card Animations */
  .step-card {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .step-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Hover Effects */
  .step-card:hover {
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  /* Content Layout */
  .content-section {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .section-header {
    display: flex;
    align-items: center;
    padding-bottom: 0.375rem;
    border-bottom: 1px solid rgba(148, 163, 184, 0.2);
  }

  .section-header h4 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin: 0;
    font-family: 'Manrope', sans-serif;
  }

  .content-grid {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .content-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 0.5rem;
    border: 1px solid rgba(241, 243, 244, 0.4);
    transition: all 0.2s ease;
    backdrop-filter: blur(8px);
  }

  .content-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.8);
    border-color: rgba(241, 243, 244, 0.6);
  }

  .item-icon {
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 0.375rem;
    border: 1px solid rgba(148, 163, 184, 0.1);
  }

  .item-content {
    flex: 1;
    min-width: 0;
  }

  .item-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.125rem;
    line-height: 1.3;
    font-family: 'Manrope', sans-serif;
  }

  .item-description {
    font-size: 0.75rem;
    color: #6b7280;
    line-height: 1.3;
    font-family: 'Inter', sans-serif;
  }

  .item-text {
    font-size: 0.75rem;
    color: #6b7280;
    line-height: 1.3;
    font-family: 'Inter', sans-serif;
  }

  /* Text Clamping */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .step-card {
      padding: 1.25rem;
    }

    .content-item {
      padding: 0.5rem;
    }

    .item-icon {
      width: 1.25rem;
      height: 1.25rem;
    }
  }
</style>

<script>
  // Scroll-triggered animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const stepObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          // Add delay for staggered animation
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 150);
        }
      });
    }, observerOptions);

    // Observe all steps
    document.querySelectorAll('.step-card').forEach(step => {
      stepObserver.observe(step);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
</script> 