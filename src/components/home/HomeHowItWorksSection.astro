---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    steps: Array<{
      number: string;
      title: string;
      description: string;
      features: string[];
      podType?: string;
    }>;
  };
}

const { data } = Astro.props;

// Get step icon based on step number
const getStepIcon = (stepNumber: string) => {
  const icons: Record<string, string> = {
    '1': 'ðŸŽ¯',
    '2': 'ðŸ“‹',
    '3': 'ðŸš€',
    '4': 'ðŸ“ˆ'
  };
  return icons[stepNumber] || 'ðŸ“‹';
};

// Get color scheme based on step
const getStepColorClasses = (index: number) => {
  const colorSchemes = [
    'bg-blue-50 border-blue-200 text-blue-700', // Step 1
    'bg-green-50 border-green-200 text-green-700', // Step 2
    'bg-purple-50 border-purple-200 text-purple-700', // Step 3
    'bg-orange-50 border-orange-200 text-orange-700' // Step 4
  ];
  return colorSchemes[index] || colorSchemes[0];
};

// Get icon background color
const getIconBgColor = (index: number) => {
  const bgColors = [
    'bg-blue-100', // Step 1
    'bg-green-100', // Step 2
    'bg-purple-100', // Step 3
    'bg-orange-100' // Step 4
  ];
  return bgColors[index] || bgColors[0];
};
---

<section id="how-it-works" class="py-20 bg-gray-50">
  <div class="container mx-auto px-4">
    <!-- Header -->
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        {data.title}
      </h2>
      <p class="text-lg text-gray-600 leading-relaxed">
        {data.subtitle}
      </p>
    </div>
    
    <!-- Steps Grid -->
    <div class="max-w-7xl mx-auto">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {data.steps.map((step, index) => (
          <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
            <!-- Step Header -->
            <div class="flex items-center justify-between mb-4">
              <div class={`w-12 h-12 ${getIconBgColor(index)} rounded-lg flex items-center justify-center`}>
                <span class="text-xl">{getStepIcon(step.number)}</span>
              </div>
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
                Step {step.number}
              </span>
            </div>
            
            <!-- Step Title -->
            <h3 class="text-xl font-semibold text-gray-900 mb-3">
              {step.title}
            </h3>
            
            <!-- Step Description -->
            <p class="text-gray-600 text-sm leading-relaxed mb-4">
              {step.description}
            </p>
            
            <!-- Features List -->
            {step.features && step.features.length > 0 && (
              <div class="space-y-2">
                {step.features.map((feature) => (
                  <div class="flex items-start space-x-2">
                    <svg class="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span class="text-sm text-gray-600">{feature}</span>
                  </div>
                ))}
              </div>
            )}
            
            <!-- Pod Type Badge -->
            {/* {step.podType && (
              <div class="mt-4 pt-4 border-t border-gray-100">
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-50 text-blue-700">
                  {step.podType}
                </span>
              </div>
            )} */}
          </div>
        ))}
      </div>
    </div>
    
    <!-- Connection Lines (Desktop Only) -->
    <!-- <div class="hidden lg:block max-w-7xl mx-auto mt-8">
      <div class="flex justify-between items-center px-6">
        {data.steps.map((_, index) => (
          <div class="flex-1 flex items-center">
            {index < data.steps.length - 1 && (
              <div class="flex-1 h-0.5 bg-gray-300 relative">
                <div class="absolute right-0 top-1/2 transform -translate-y-1/2 w-3 h-3 bg-gray-300 rounded-full"></div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div> -->
  </div>
</section>

<style>
  #how-it-works {
    background-color: transparent;
  }
  /* Smooth animations */
  .hover\:-translate-y-1:hover {
    transform: translateY(-4px);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .grid {
      gap: 1rem;
    }
  }
</style>

<script>
  // Add scroll animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const stepObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            const targetElement = entry.target as HTMLElement;
            targetElement.style.opacity = '1';
            targetElement.style.transform = 'translateY(0)';
          }, index * 200);
        }
      });
    }, observerOptions);

    // Observe all step cards
    document.querySelectorAll('#how-it-works .grid > div').forEach((step, index) => {
      const stepElement = step as HTMLElement;
      stepElement.style.opacity = '0';
      stepElement.style.transform = 'translateY(20px)';
      stepElement.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      stepObserver.observe(step);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
</script> 