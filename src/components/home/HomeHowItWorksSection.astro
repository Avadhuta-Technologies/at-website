---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    steps: Array<{
      number: string;
      title: string;
      description: string;
      icon: string;
      podTypes?: Array<{
        name: string;
        description: string;
      }>;
      benefits?: string[];
      compositionTitle?: string;
      composition?: string[];
      adaptabilityTitle?: string;
      adaptabilityFeatures?: Array<{
        title: string;
        description: string;
      }>;
    }>;
  };
}

const { data } = Astro.props;
---

<section id="how-it-works" class="py-20 relative overflow-hidden">
  <!-- Enhanced Background -->
  <div class="absolute inset-0 bg-gradient-to-br from-slate-100 via-slate-50 to-slate-200/50"></div>
  
  <!-- Background Elements -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="absolute top-20 left-10 w-32 h-32 bg-mint-200/30 rounded-full blur-xl animate-pulse"></div>
    <div class="absolute bottom-20 right-10 w-40 h-40 bg-cerulean-200/25 rounded-full blur-xl animate-pulse" style="animation-delay: 2s;"></div>
    <div class="absolute top-1/2 left-1/4 w-24 h-24 bg-lavender-200/30 rounded-full blur-lg animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/3 right-1/4 w-20 h-20 bg-mint-300/20 rounded-full blur-lg animate-pulse" style="animation-delay: 3s;"></div>
    <div class="absolute bottom-1/3 left-1/3 w-28 h-28 bg-cerulean-300/20 rounded-full blur-xl animate-pulse" style="animation-delay: 1.5s;"></div>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-slate-900 mb-4 font-satoshi">
        {data.title}
      </h2>
      <p class="text-lg text-slate-600 leading-relaxed font-inter">
        {data.subtitle}
      </p>
    </div>
    
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {data.steps.map((step, index) => (
          <div class="step glass-card p-6 rounded-2xl border border-slate-200/50 hover:scale-[1.02] transition-all duration-500 flex flex-col h-full">
            <!-- Step Header with Icon -->
            <div class="flex items-center mb-4">
              <div class="flex-shrink-0 w-12 h-12 bg-mint-500/10 text-mint-700 font-bold text-lg rounded-xl flex items-center justify-center mr-3 border border-mint-200/50">
                {step.number}
              </div>
              <div class="flex-1 min-w-0">
                <div class="flex items-center mb-1">
                  <div class="mr-2">
                    {index === 0 && (
                      <svg class="w-6 h-6 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                      </svg>
                    )}
                    {index === 1 && (
                      <svg class="w-6 h-6 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                    )}
                    {index === 2 && (
                      <svg class="w-6 h-6 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                    )}
                    {index === 3 && (
                      <svg class="w-6 h-6 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                    )}
                  </div>
                  <h3 class="text-lg font-semibold text-slate-900 font-satoshi leading-tight">
                    {step.title}
                  </h3>
                </div>
              </div>
            </div>
            
            <!-- Step Description -->
            <div class="mb-6">
              <p class="text-slate-600 leading-relaxed font-inter text-sm line-clamp-3">
                {step.description}
              </p>
            </div>
            
            <!-- Content Sections -->
            <div class="flex-1 space-y-4">
              <!-- Pod Types (for step 1) -->
              {step.podTypes && (
                <div class="content-section">
                  <div class="section-header">
                    <svg class="w-4 h-4 text-mint-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <h4 class="font-semibold text-slate-900 font-satoshi text-sm">Available Pods</h4>
                  </div>
                  <div class="content-grid">
                    {step.podTypes.map((pod) => (
                      <div class="content-item glass-card-light">
                        <div class="item-icon">
                          <svg class="w-3 h-3 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                          </svg>
                        </div>
                        <div class="item-content">
                          <div class="item-title font-satoshi text-sm">{pod.name}</div>
                          <div class="item-description font-inter text-xs line-clamp-1">{pod.description}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <!-- Benefits (for step 2) -->
              {step.benefits && (
                <div class="content-section">
                  <div class="section-header">
                    <svg class="w-4 h-4 text-cerulean-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                    </svg>
                    <h4 class="font-semibold text-slate-900 font-satoshi text-sm">Key Benefits</h4>
                  </div>
                  <div class="content-grid">
                    {step.benefits.map((benefit) => (
                      <div class="content-item glass-card-light">
                        <div class="item-icon">
                          <svg class="w-3 h-3 text-cerulean-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </div>
                        <div class="item-content">
                          <div class="item-text font-inter text-xs line-clamp-2">{benefit}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <!-- Composition (for step 3) -->
              {step.composition && (
                <div class="content-section">
                  <div class="section-header">
                    <svg class="w-4 h-4 text-lavender-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                    </svg>
                    <h4 class="font-semibold text-slate-900 font-satoshi text-sm">{step.compositionTitle}</h4>
                  </div>
                  <div class="content-grid">
                    {step.composition.map((item) => (
                      <div class="content-item glass-card-light">
                        <div class="item-icon">
                          <svg class="w-3 h-3 text-lavender-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                          </svg>
                        </div>
                        <div class="item-content">
                          <div class="item-text font-inter text-xs line-clamp-1">{item}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <!-- Adaptability Features (for step 4) -->
              {step.adaptabilityFeatures && (
                <div class="content-section">
                  <div class="section-header">
                    <svg class="w-4 h-4 text-mint-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <h4 class="font-semibold text-slate-900 font-satoshi text-sm">{step.adaptabilityTitle}</h4>
                  </div>
                  <div class="content-grid">
                    {step.adaptabilityFeatures.map((feature) => (
                      <div class="content-item glass-card-light">
                        <div class="item-content">
                          <div class="item-title font-satoshi text-sm">{feature.title}</div>
                          <div class="item-description font-inter text-xs line-clamp-2">{feature.description}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  /* Glass Card Utilities */
  .glass-card {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(148, 163, 184, 0.1);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  .glass-card-light {
    background: rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(148, 163, 184, 0.1);
  }

  /* Content Layout */
  .content-section {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .section-header {
    display: flex;
    align-items: center;
    padding-bottom: 0.375rem;
    border-bottom: 1px solid rgba(148, 163, 184, 0.2);
  }

  .section-header h4 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #334155;
    margin: 0;
  }

  .content-grid {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .content-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
  }

  .content-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .item-icon {
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 0.375rem;
    border: 1px solid rgba(148, 163, 184, 0.1);
  }

  .item-content {
    flex: 1;
    min-width: 0;
  }

  .item-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #334155;
    margin-bottom: 0.125rem;
    line-height: 1.3;
  }

  .item-description {
    font-size: 0.75rem;
    color: #64748b;
    line-height: 1.3;
  }

  .item-text {
    font-size: 0.75rem;
    color: #475569;
    line-height: 1.3;
  }

  /* Text Clamping */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }

  /* Step Animations */
  .step {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .step.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Hover Effects */
  .step:hover {
    transform: translateY(-6px) scale(1.02);
    box-shadow: 0 16px 32px rgba(0, 0, 0, 0.15);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .step {
      padding: 1.25rem;
    }

    .content-item {
      padding: 0.5rem;
    }

    .item-icon {
      width: 1.25rem;
      height: 1.25rem;
    }
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .glass-card {
      background: rgba(30, 41, 59, 0.7);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .glass-card-light {
      background: rgba(30, 41, 59, 0.5);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .section-header {
      border-bottom-color: rgba(148, 163, 184, 0.3);
    }

    .section-header h4 {
      color: #e2e8f0;
    }

    .item-icon {
      background: rgba(30, 41, 59, 0.8);
      border-color: rgba(148, 163, 184, 0.2);
    }

    .item-title {
      color: #e2e8f0;
    }

    .item-description {
      color: #94a3b8;
    }

    .item-text {
      color: #cbd5e1;
    }

    h2, h3, h4, h5 {
      color: #f1f5f9;
    }

    p, span {
      color: #cbd5e1;
    }

    .text-slate-900 {
      color: #f1f5f9;
    }

    .text-slate-600, .text-slate-700 {
      color: #cbd5e1;
    }
  }
</style>

<script>
  // Scroll-triggered animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const stepObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          // Add delay for staggered animation
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 150);
        }
      });
    }, observerOptions);

    // Observe all steps
    document.querySelectorAll('.step').forEach(step => {
      stepObserver.observe(step);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
</script> 