---
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';
import { generatePackSlug } from '../../utils/slugUtils.js';

export interface Props {
  pack: {
    id: string;
    title: string;
    description: string;
    segmentName?: string;
    badge?: string;
    badgeColor?: string;
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
    duration: string;
    deliverables: string[];
    idealFor: string[];
    addOns: string[];
    whyItWorks: string;
    testimonials: Array<{
      quote: string;
      author: string;
      role: string;
    }>;
    cta: {
      title: string;
      subtitle: string;
      primaryButton: string;
      secondaryButton: string;
    };
  };
  index: number;
  className?: string;
}

const { pack, index, className = "" } = Astro.props;

// Helper function to get pack icon based on title
const getPackIcon = (pack: any) => {
  const title = pack.title.toLowerCase();
  
  if (title.includes('startup') || title.includes('accelerator')) return '🚀';
  if (title.includes('mvp') || title.includes('prototype')) return '⚡';
  if (title.includes('design') || title.includes('ui')) return '🎨';
  if (title.includes('development') || title.includes('build')) return '⚙️';
  if (title.includes('testing') || title.includes('qa')) return '🔍';
  if (title.includes('deployment') || title.includes('launch')) return '🚀';
  if (title.includes('maintenance') || title.includes('support')) return '🔧';
  if (title.includes('optimization') || title.includes('performance')) return '📈';
  if (title.includes('security') || title.includes('audit')) return '🔐';
  if (title.includes('analytics') || title.includes('insights')) return '📊';
  
  return '📦';
};

// Helper function to get badge color classes
const getBadgeColorClasses = (color: string) => {
  const colorMap: Record<string, string> = {
    'blue': 'bg-blue-100/90 text-blue-800 border-blue-200/50',
    'green': 'bg-green-100/90 text-green-800 border-green-200/50',
    'purple': 'bg-purple-100/90 text-purple-800 border-purple-200/50',
    'orange': 'bg-orange-100/90 text-orange-800 border-orange-200/50',
    'red': 'bg-red-100/90 text-red-800 border-red-200/50',
    'teal': 'bg-teal-100/90 text-teal-800 border-teal-200/50',
    'indigo': 'bg-indigo-100/90 text-indigo-800 border-indigo-200/50',
    'pink': 'bg-pink-100/90 text-pink-800 border-pink-200/50'
  };
  
  return colorMap[color] || colorMap['blue'];
};
---

<div class={`pack-card group relative overflow-hidden rounded-2xl transition-all duration-300 hover:scale-105 hover:-translate-y-2 cursor-pointer ${className}`} data-pack-id={pack.id} data-pack-slug={generatePackSlug(pack.title)}>
  <!-- Card Background with Glass Morphism -->
  <div class="absolute inset-0 bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-2xl shadow-lg group-hover:shadow-xl transition-all duration-300"></div>
  
  <!-- Decorative Background Elements -->
  <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-[#22c55e]/50 to-[#0ea5e9]/50 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
  <div class="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-tr from-[#0ea5e9]/50 to-[#22c55e]/50 rounded-full translate-y-8 -translate-x-8 group-hover:scale-110 transition-transform duration-300"></div>
  
  <!-- Card Content -->
  <div class="relative p-6 flex flex-col h-full">
    <!-- Segment Name -->
    {pack.segmentName && (
      <div class="mb-4">
        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100/80 text-gray-600 border border-gray-200/50 backdrop-blur-sm">
          {pack.segmentName}
        </span>
      </div>
    )}
    
    <!-- Icon and Badge Row -->
    <div class="flex items-start justify-between mb-5">
      <div class="w-14 h-14 bg-gradient-to-br from-[#22c55e]/10 to-[#0ea5e9]/10 rounded-xl flex items-center justify-center border border-[#22c55e]/30 group-hover:scale-110 transition-transform duration-300">
        <span class="text-2xl">{getPackIcon(pack)}</span>
      </div>
      {pack.badge && (
        <span class={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium border ${getBadgeColorClasses(pack.badgeColor || 'blue')}`}>
          {pack.badge}
        </span>
      )}
    </div>
    
    <!-- Title -->
    <h3 class="text-xl font-bold text-gray-900 mb-4 group-hover:text-gray-800 transition-colors duration-300 leading-tight">
      {pack.title}
    </h3>
    
    <!-- Description -->
    <div class="flex-1 mb-4">
      <p class="text-gray-600 leading-relaxed text-sm">
        {pack.description}
      </p>
    </div>

    <!-- Updated Price Display -->
    <div class="mb-4">
      <DiscountedPriceDisplay 
        basePriceINR={pack.basePriceINR}
        basePriceUSD={pack.basePriceUSD}
        discountPercentage={pack.discountPercentage}
        showBadge={true}
        showSavings={true}
        showOriginalPrice={true}
        size="md"
        variant="conversion"
      />
      <p class="text-xs text-gray-500 mt-1">{pack.duration} delivery</p>
    </div>
    
    <!-- Action Buttons -->
    <div class="flex flex-col space-y-3 pt-4 border-t border-gray-100/50">
      <div class="flex gap-2">
        <button 
          data-add-to-cart
          data-item-id={pack.id}
          data-item-type="pack"
          data-item-title={pack.title}
          data-item-description={pack.description}
          class="flex-1 inline-flex items-center justify-center px-3 py-2 bg-gradient-to-r from-primary-600 to-primary-700 text-white text-sm font-semibold rounded-lg hover:from-primary-700 hover:to-primary-800 transition-all duration-300 group-hover:scale-105">
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <span>Add to Pod</span>
        </button>
        <a href={`/packs/${generatePackSlug(pack.title)}`} class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 text-gray-700 text-sm font-semibold rounded-lg hover:bg-gray-50 transition-all duration-300">
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <span>Details</span>
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  /* Pack Card Animations */
  .pack-card {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .pack-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Hover Effects */
  .pack-card:hover {
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .pack-card {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // Import SummaryShared for cart operations
  import { SummaryShared } from '../../utils/summaryShared.js';

  // Interactive functionality for home pack cards
  document.addEventListener('DOMContentLoaded', async () => {
    const shared = new SummaryShared();
    
    // Initialize pack buttons with correct cart state
    await shared.initializePackButtons();
    
    // Add event listeners for pack cart operations
    const packButtons = document.querySelectorAll('[data-add-to-cart][data-item-type="pack"]');
    
    packButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const packId = button.getAttribute('data-item-id');
        if (packId) {
          await shared.handlePackCartOperation(packId, button);
        }
      });
    });
    
    // Listen for cart updates to refresh button states
    window.addEventListener('cart-updated', async () => {
      await shared.initializePackButtons();
    });
  });
</script>

 