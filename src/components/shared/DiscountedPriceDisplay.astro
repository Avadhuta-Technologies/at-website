---
import { getDiscountedPriceDisplay, getDiscountBadgeText, getDiscountBadgeColor } from '../../utils/pricingUtils.ts';

export interface Props {
  basePriceINR: number;
  basePriceUSD: number;
  discountPercentage: number;
  showBadge?: boolean;
  showSavings?: boolean;
  showOriginalPrice?: boolean;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
  variant?: 'default' | 'conversion' | 'minimal';
  itemType?: 'pod' | 'pack';
}

const { 
  basePriceINR, 
  basePriceUSD, 
  discountPercentage, 
  showBadge = true,
  showSavings = true,
  showOriginalPrice = true,
  size = 'md',
  className = "",
  variant = 'default',
  itemType
} = Astro.props;

// Size classes
const sizeClasses = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-lg',
  xl: 'text-xl'
};

// Default to INR for server-side rendering
const defaultCurrency = 'INR';
const priceDisplay = getDiscountedPriceDisplay(basePriceINR, basePriceUSD, discountPercentage, defaultCurrency);

// Determine if there's a discount
const hasDiscount = discountPercentage > 0;
---

<div class={`discounted-price-display ${sizeClasses[size]} ${className}`} 
     data-base-price-inr={basePriceINR} 
     data-base-price-usd={basePriceUSD}
     data-discount-percentage={discountPercentage}
     data-show-badge={showBadge}
     data-show-savings={showSavings}
     data-show-original-price={showOriginalPrice}
     data-variant={variant}
     data-item-type={itemType}>
  
  <!-- Minimal Clean Design -->
  <div class="price-display-minimal">
    {showBadge && hasDiscount && (
      <div class="discount-badge-minimal inline-block px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-700 mb-2">
        {discountPercentage}% OFF
      </div>
    )}
    
    <div class="price-row flex items-baseline gap-2">
      {showOriginalPrice && hasDiscount && (
        <span class="original-price text-gray-500 line-through">
          {priceDisplay.originalPrice}
        </span>
      )}
      <span class="final-price font-semibold text-gray-900">
        {hasDiscount ? priceDisplay.discountedPrice : priceDisplay.originalPrice}
      </span>
    </div>
    
    {showSavings && hasDiscount && (
      <div class="savings-text text-xs text-green-600 mt-1">
        Save {priceDisplay.savings}
      </div>
    )}
  </div>
</div>

<script>
  import { getDiscountedPriceDisplay, getDiscountBadgeText, getDiscountBadgeColor } from '../../utils/pricingUtils.ts';

  // Initialize discounted price display based on user location
  async function initializeDiscountedPriceDisplay() {
    try {
      // Wait for user location to be available
      if (typeof window === 'undefined') return;
      
      console.log('üåç [DiscountedPriceDisplay] Checking user location...');
      
      // Wait for location detection to complete
      if (!(window as any).userLocation) {
        console.log('üåç [DiscountedPriceDisplay] Waiting for location detection...');
        return;
      }
      
      console.log('üåç [DiscountedPriceDisplay] Found userLocation:', (window as any).userLocation);
      
      // Get location info
      const locationInfo = document.getElementById('location-info');
      let userCurrency: 'INR' | 'USD' = 'INR'; // Default
      
      if (locationInfo) {
        console.log('üåç [DiscountedPriceDisplay] Found location info:', {
          country: locationInfo.getAttribute('data-country'),
          currency: locationInfo.getAttribute('data-currency'),
          timezone: locationInfo.getAttribute('data-timezone')
        });
        const currency = locationInfo.getAttribute('data-currency');
        userCurrency = (currency === 'INR' || currency === 'USD') ? currency : 'INR';
      } else if ((window as any).userLocation) {
        console.log('üåç [DiscountedPriceDisplay] Using window.userLocation');
        userCurrency = (window as any).userLocation.currency || 'INR';
      } else {
        console.log('üåç [DiscountedPriceDisplay] No location info found, defaulting to INR');
        userCurrency = 'INR';
      }
      
      console.log('üåç [DiscountedPriceDisplay] Using currency:', userCurrency);
      
      // Update all price displays on the page
      const priceDisplays = document.querySelectorAll('.discounted-price-display');
      console.log('üåç [DiscountedPriceDisplay] Found', priceDisplays.length, 'price displays to update');
      
      priceDisplays.forEach((display, index) => {
        const basePriceINR = parseInt(display.getAttribute('data-base-price-inr') || '0');
        const basePriceUSD = parseInt(display.getAttribute('data-base-price-usd') || '0');
        const discountPercentage = parseInt(display.getAttribute('data-discount-percentage') || '0');
        const showBadge = display.getAttribute('data-show-badge') === 'true';
        const showSavings = display.getAttribute('data-show-savings') === 'true';
        const showOriginalPrice = display.getAttribute('data-show-original-price') === 'true';
        const variant = display.getAttribute('data-variant');
        const itemType = display.getAttribute('data-item-type');
        
        console.log(`üåç [DiscountedPriceDisplay] Updating display ${index}:`, {
          basePriceINR,
          basePriceUSD,
          discountPercentage,
          userCurrency,
          variant,
          itemType
        });
        
        // Get updated price display
        const priceDisplay = getDiscountedPriceDisplay(basePriceINR, basePriceUSD, discountPercentage, userCurrency);
        
        // Update discount badge
        const badgeElement = display.querySelector('.discount-badge-minimal');
        if (badgeElement && showBadge && discountPercentage > 0) {
          badgeElement.textContent = `${discountPercentage}% OFF`;
          badgeElement.className = `discount-badge-minimal inline-block px-2 py-1 rounded text-xs font-medium ${getDiscountBadgeColor(discountPercentage)} mb-2`;
        }
        
        // Update original price
        const originalPriceElement = display.querySelector('.original-price');
        if (originalPriceElement && showOriginalPrice && discountPercentage > 0) {
          originalPriceElement.textContent = priceDisplay.originalPrice;
        }
        
        // Update final price
        const finalPriceElement = display.querySelector('.final-price');
        if (finalPriceElement) {
          finalPriceElement.textContent = discountPercentage > 0 ? priceDisplay.discountedPrice : priceDisplay.originalPrice;
        }
        
        // Update savings text
        const savingsElement = display.querySelector('.savings-text');
        if (savingsElement && showSavings && discountPercentage > 0) {
          savingsElement.textContent = `Save ${priceDisplay.savings}`;
        }
        
        // Update item type
        if (itemType) {
          display.setAttribute('data-item-type', itemType);
        }
      });
    } catch (error) {
      console.warn('üåç [DiscountedPriceDisplay] Failed to initialize discounted price display:', error);
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDiscountedPriceDisplay);
  } else {
    setTimeout(initializeDiscountedPriceDisplay, 100);
  }

  // Initialize when location is detected
  if (typeof window !== 'undefined') {
    window.addEventListener('location-detected', () => {
      console.log('üåç [DiscountedPriceDisplay] Location detected event received');
      setTimeout(initializeDiscountedPriceDisplay, 100);
    });
    
    window.addEventListener('location-changed', () => {
      console.log('üåç [DiscountedPriceDisplay] Location changed event received');
      setTimeout(initializeDiscountedPriceDisplay, 100);
    });
    
    // Fallback initialization
    setTimeout(initializeDiscountedPriceDisplay, 2000);
  }
</script>

<style>
  .price-display-minimal {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  
  .price-row {
    display: flex;
    align-items: baseline;
    gap: 0.5rem;
  }
  
  .final-price {
    font-weight: 600;
    color: #111827;
  }
  
  .original-price {
    color: #6b7280;
    text-decoration: line-through;
  }
  
  .savings-text {
    color: #059669;
    font-size: 0.75rem;
  }
  
  .discount-badge-minimal {
    background-color: #f0fdf4;
    color: #166534;
    border: 1px solid #bbf7d0;
  }
</style> 