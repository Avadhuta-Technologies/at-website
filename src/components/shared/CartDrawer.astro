---
// Cart Drawer Component
---

<div id="cart-drawer" class="fixed top-0 bottom-0 right-0 w-80 bg-white shadow-2xl transform translate-x-full transition-transform duration-300 ease-in-out z-[9999] border-l border-gray-200 flex flex-col">
  <!-- Header -->
  <div class="flex items-center justify-between p-4 border-b border-gray-200 bg-white text-gray-900 flex-shrink-0">
    <h3 class="text-lg font-semibold">Your Cart</h3>
    <div class="flex items-center space-x-2">
      <button id="minimize-cart" class="p-1 hover:bg-gray-100 rounded transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
        </svg>
      </button>
      <button id="close-cart" class="p-1 hover:bg-gray-100 rounded transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Cart Content -->
  <div class="flex-1 overflow-y-auto">
    <div id="cart-content" class="p-4">
      <!-- Loading State -->
      <div id="cart-loading" class="text-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p class="text-gray-500">Loading cart...</p>
      </div>

      <!-- Empty State -->
      <div id="cart-empty" class="text-center py-8 hidden">
        <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
        </svg>
        <p class="text-gray-500">Your cart is empty</p>
        <p class="text-sm text-gray-400">Add a pod and packs to get started</p>
      </div>

      <!-- Cart Items -->
      <div id="cart-items" class="space-y-4 hidden">
        <!-- Items will be dynamically inserted here -->
      </div>
    </div>
  </div>

  <!-- Cart Summary -->
  <div id="cart-summary" class="border-t border-gray-200 p-4 bg-gray-50 flex-shrink-0">
    <div class="flex justify-between items-center mb-4">
      <span class="text-sm font-medium text-gray-700">Total Items:</span>
      <span id="cart-total-items" class="text-sm font-semibold text-gray-900">0</span>
    </div>
    
    <button 
      id="checkout-btn"
      class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
      disabled
    >
      Continue to Checkout
    </button>
  </div>
</div>

<script>
  class CartDrawer {
    constructor() {
      this.isOpen = false;
      this.isMinimized = false;
      this.init();
    }

    async init() {
      this.setupEventListeners();
      this.loadCart();
      
      // Listen for cart updates
      window.addEventListener('cart-updated', () => {
        this.loadCart();
      });
    }

    setupEventListeners() {
      // Close button
      document.getElementById('close-cart')?.addEventListener('click', () => {
        this.close();
      });

      // Minimize button
      document.getElementById('minimize-cart')?.addEventListener('click', () => {
        this.toggleMinimize();
      });

      // Checkout button
      document.getElementById('checkout-btn')?.addEventListener('click', () => {
        window.location.href = '/checkout';
      });

      // Close on backdrop click
      document.addEventListener('click', (e) => {
        const drawer = document.getElementById('cart-drawer');
        if (e.target === drawer) {
          this.close();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });
    }

    async loadCart() {
      try {
        const cart = this.getCartFromLocalStorage();
        this.renderCart(cart);
      } catch (error) {
        console.error('Error loading cart:', error);
        this.showEmpty();
      }
    }

    getCartFromLocalStorage() {
      try {
        const cartData = localStorage.getItem('novapod-cart');
        return cartData ? JSON.parse(cartData) : [];
      } catch (error) {
        console.error('Error reading localStorage:', error);
        return [];
      }
    }

    renderCart(cart) {
      const loadingEl = document.getElementById('cart-loading');
      const emptyEl = document.getElementById('cart-empty');
      const itemsEl = document.getElementById('cart-items');
      const totalItemsEl = document.getElementById('cart-total-items');
      const checkoutBtn = document.getElementById('checkout-btn');

      if (cart.length === 0) {
        loadingEl?.classList.add('hidden');
        emptyEl?.classList.remove('hidden');
        itemsEl?.classList.add('hidden');
        
        if (totalItemsEl) totalItemsEl.textContent = '0';
        if (checkoutBtn) {
          checkoutBtn.disabled = true;
          checkoutBtn.textContent = 'Cart is Empty';
        }
        return;
      }

      loadingEl?.classList.add('hidden');
      emptyEl?.classList.add('hidden');
      itemsEl?.classList.remove('hidden');

      // Separate pods and packs
      const podItems = cart.filter(item => item.type === 'pod');
      const packItems = cart.filter(item => item.type === 'pack');

      let html = '';

      // Render pod items
      if (podItems.length > 0) {
        html += '<div class="mb-6">';
        html += '<h4 class="text-sm font-semibold text-gray-700 mb-3">Pod</h4>';
        podItems.forEach(item => {
          html += this.renderCartItem(item);
        });
        html += '</div>';
      }

      // Render pack items
      if (packItems.length > 0) {
        html += '<div class="border-t border-gray-200 pt-4 mt-4">';
        html += '<h4 class="text-sm font-semibold text-gray-700 mb-3">Packs</h4>';
        packItems.forEach(item => {
          html += this.renderCartItem(item);
        });
        html += '</div>';
      }

      if (itemsEl) itemsEl.innerHTML = html;

      // Update summary
      if (totalItemsEl) totalItemsEl.textContent = cart.length.toString();
      
      if (checkoutBtn) {
        checkoutBtn.disabled = false;
        checkoutBtn.textContent = 'Continue to Checkout';
      }

      // Add remove event listeners
      this.addRemoveListeners();
    }

    renderCartItem(item) {
      const itemColor = item.type === 'pod' ? 'blue' : 'green';
      
      return `
        <div class="cart-item bg-white rounded-lg border border-gray-200 p-4" data-item-id="${item.id}" data-item-type="${item.type}">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center mb-2">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${itemColor}-100 text-${itemColor}-800 mr-2">
                  ${item.type === 'pod' ? 'Pod' : 'Pack'}
                </span>
                <h4 class="text-sm font-semibold text-gray-900">${item.title}</h4>
              </div>
              <p class="text-xs text-gray-600 mb-2 line-clamp-2">${item.description}</p>
              <span class="text-sm font-medium text-gray-900">${item.price}</span>
            </div>
            <button 
              class="remove-item-btn ml-2 p-1 text-gray-400 hover:text-red-500 transition-colors"
              title="Remove item"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      `;
    }

    addRemoveListeners() {
      const removeBtns = document.querySelectorAll('.remove-item-btn');
      removeBtns.forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.preventDefault();
          const cartItem = btn.closest('.cart-item');
          if (cartItem) {
            const itemId = cartItem.getAttribute('data-item-id');
            const itemType = cartItem.getAttribute('data-item-type');
            
            if (itemId && itemType) {
              // Remove item from localStorage
              const cartData = localStorage.getItem('novapod-cart');
              if (cartData) {
                const cart = JSON.parse(cartData);
                const updatedCart = cart.filter((item: any) => !(item.id === itemId && item.type === itemType));
                localStorage.setItem('novapod-cart', JSON.stringify(updatedCart));
                
                // Dispatch cart-updated event
                window.dispatchEvent(new CustomEvent('cart-updated'));
              }
            }
          }
        });
      });
    }

    showEmpty() {
      const loadingEl = document.getElementById('cart-loading');
      const emptyEl = document.getElementById('cart-empty');
      const itemsEl = document.getElementById('cart-items');
      
      loadingEl?.classList.add('hidden');
      emptyEl?.classList.remove('hidden');
      itemsEl?.classList.add('hidden');
    }

    open() {
      const drawer = document.getElementById('cart-drawer');
      if (drawer) {
        drawer.classList.remove('translate-x-full');
        this.isOpen = true;
        document.body.style.overflow = 'hidden';
      }
    }

    close() {
      const drawer = document.getElementById('cart-drawer');
      if (drawer) {
        drawer.classList.add('translate-x-full');
        this.isOpen = false;
        document.body.style.overflow = '';
      }
    }

    toggleMinimize() {
      const drawer = document.getElementById('cart-drawer');
      if (drawer) {
        if (this.isMinimized) {
          drawer.classList.remove('w-16');
          drawer.classList.add('w-80');
        } else {
          drawer.classList.remove('w-80');
          drawer.classList.add('w-16');
        }
        this.isMinimized = !this.isMinimized;
      }
    }
  }

  // Initialize cart drawer
  if (typeof window !== 'undefined') {
    window.cartDrawer = new CartDrawer();
  }

  // Global function to open cart drawer
  window.openCartDrawer = function() {
    if (window.cartDrawer) {
      window.cartDrawer.open();
    }
  };
</script> 