---
// Pod Replacement Confirmation Modal Component
---

<div id="pod-replacement-modal" class="fixed inset-0 bg-black bg-opacity-50 z-[9999] hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full mx-4 transform transition-all duration-300 scale-95 opacity-0" id="pod-replacement-modal-content">
    <!-- Header -->
    <div class="flex items-center justify-between p-6 border-b border-gray-200">
      <div class="flex items-center">
        <div class="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mr-3">
          <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900">Replace Pod?</h3>
      </div>
      <button id="close-pod-replacement-modal" class="text-gray-400 hover:text-gray-600 transition-colors">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Content -->
    <div class="p-6">
      <p class="text-gray-600 mb-4">
        You're about to replace your current pod. This will also remove any packs you've selected.
      </p>
      
      <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
        <div class="flex items-start">
          <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
          <div>
            <h4 class="font-semibold text-orange-900 mb-1">What will happen:</h4>
            <ul class="text-sm text-orange-800 space-y-1">
              <li>‚Ä¢ Current pod "<span id="current-pod-name" class="font-medium">Pod Name</span>" will be removed</li>
              <li>‚Ä¢ All selected packs will be removed</li>
              <li>‚Ä¢ New pod "<span id="new-pod-name" class="font-medium">New Pod Name</span>" will be selected</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Actions -->
    <div class="flex gap-3 p-6 border-t border-gray-200">
      <button id="confirm-pod-replacement-btn" class="flex-1 bg-orange-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-orange-700 transition-colors">
        Replace Pod
      </button>
      <button id="cancel-pod-replacement-btn" class="flex-1 border border-gray-300 text-gray-700 py-3 px-4 rounded-lg font-semibold hover:bg-gray-50 transition-colors">
        Cancel
      </button>
    </div>
  </div>
</div>

<script>
  class PodReplacementModal {
    constructor() {
      this.modal = document.getElementById('pod-replacement-modal');
      this.modalContent = document.getElementById('pod-replacement-modal-content');
      this.currentPod = null;
      this.newPod = null;
      this.onConfirm = null;
      this.init();
    }

    init() {
      this.setupEventListeners();
    }

    setupEventListeners() {
      // Close button
      document.getElementById('close-pod-replacement-modal')?.addEventListener('click', () => {
        this.hide();
      });

      // Cancel button
      document.getElementById('cancel-pod-replacement-btn')?.addEventListener('click', () => {
        this.hide();
      });

      // Confirm button
      document.getElementById('confirm-pod-replacement-btn')?.addEventListener('click', () => {
        if (this.onConfirm) {
          this.onConfirm(this.currentPod, this.newPod);
        }
        this.hide();
      });

      // Close on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.hide();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isVisible()) {
          this.hide();
        }
      });
    }

    show(currentPod, newPod, onConfirm) {
      this.currentPod = currentPod;
      this.newPod = newPod;
      this.onConfirm = onConfirm;

      // Update modal content
      const currentPodName = document.getElementById('current-pod-name');
      const newPodName = document.getElementById('new-pod-name');
      
      if (currentPodName) {
        currentPodName.textContent = currentPod.title || currentPod.name || 'Current Pod';
      }
      if (newPodName) {
        newPodName.textContent = newPod.title || newPod.name || 'New Pod';
      }

      if (this.modal && this.modalContent) {
        this.modal.classList.remove('hidden');
        this.modal.classList.add('flex');
        
        // Trigger animation
        setTimeout(() => {
          this.modalContent.classList.remove('scale-95', 'opacity-0');
          this.modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
      }
    }

    hide() {
      if (this.modal && this.modalContent) {
        this.modalContent.classList.remove('scale-100', 'opacity-100');
        this.modalContent.classList.add('scale-95', 'opacity-0');
        
        setTimeout(() => {
          this.modal.classList.add('hidden');
          this.modal.classList.remove('flex');
        }, 300);
        
        // Restore body scroll
        document.body.style.overflow = '';
        
        // Clear references
        this.currentPod = null;
        this.newPod = null;
        this.onConfirm = null;
      }
    }

    isVisible() {
      return this.modal && !this.modal.classList.contains('hidden');
    }
  }

  // Initialize modal when DOM is ready
  if (typeof window !== 'undefined') {
    window.podReplacementModal = new PodReplacementModal();
  }

  // Global function to show pod replacement modal
  window.showPodReplacementModal = function(currentPod, newPod, onConfirm) {
    console.log('üîç [PodReplacementModal] showPodReplacementModal called with:', { currentPod, newPod });
    if (window.podReplacementModal) {
      window.podReplacementModal.show(currentPod, newPod, onConfirm);
    } else {
      console.error('üîç [PodReplacementModal] podReplacementModal not found');
    }
  };
</script> 