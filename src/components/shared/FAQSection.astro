---
interface Props {
  data: {
    title: string;
    subtitle: string;
    faqs: Array<{
      question: string;
      answer: string;
    }>;
  };
  className?: string;
}

const { data, className = "" } = Astro.props;
---

<section class={`py-20 bg-gradient-to-br from-gray-50 to-white ${className}`}>
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900 gradient-title">
        {data.title}
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed animate-fade-in-up animation-delay-200">
        {data.subtitle}
      </p>
    </div>

    <!-- FAQ Accordion -->
    <div class="max-w-4xl mx-auto">
      <div class="bg-white rounded-2xl shadow-xl transform transition-all duration-500 hover:shadow-2xl animate-fade-in-up animation-delay-400">
        <div class="divide-y divide-gray-200">
          {data.faqs.map((faq, index) => (
            <div class="faq-item">
              <button 
                class="faq-question w-full px-8 py-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors duration-200"
                data-faq-index={index}
              >
                <span class="text-lg font-semibold text-gray-900">{faq.question}</span>
                <svg class="faq-icon w-6 h-6 text-gray-500 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              <div class="faq-answer hidden px-8 pb-6">
                <p class="text-gray-600 leading-relaxed">{faq.answer}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // FAQ Accordion functionality
  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      const answer = item.querySelector('.faq-answer');
      const icon = item.querySelector('.faq-icon');
      
      if (question && answer && icon) {
        question.addEventListener('click', () => {
          const isOpen = answer.classList.contains('hidden');
          
          // Close all other FAQ items
          faqItems.forEach(otherItem => {
            const otherAnswer = otherItem.querySelector('.faq-answer');
            const otherIcon = otherItem.querySelector('.faq-icon');
            if (otherAnswer && otherIcon && otherItem !== item) {
              otherAnswer.classList.add('hidden');
              otherIcon.classList.remove('rotate-180');
            }
          });
          
          // Toggle current item
          if (isOpen) {
            answer.classList.remove('hidden');
            icon.classList.add('rotate-180');
          } else {
            answer.classList.add('hidden');
            icon.classList.remove('rotate-180');
          }
        });
      }
    });
  });
</script> 