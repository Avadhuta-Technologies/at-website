---
export interface Props {
  // New format - single data object
  data?: {
    badge?: string;
    title: string;
    subtitle?: string;
    description?: string;
    stats?: Array<{ value: string; label: string }>;
    primaryButton?: { label: string; href: string };
    secondaryButton?: { label: string; href: string };
  };
  // Old format - individual props (for backward compatibility)
  badge?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  stats?: Array<{ value: string; label: string }>;
  showBackgroundGraphics?: boolean;
  showWave?: boolean;
  className?: string;
  primaryButton?: { label: string; href: string };
  secondaryButton?: { label: string; href: string };
}

const {
  data,
  badge: badgeProp,
  title: titleProp,
  subtitle: subtitleProp,
  description: descriptionProp,
  stats: statsProp = [],
  showBackgroundGraphics = true,
  showWave = true,
  className = "",
  primaryButton: primaryButtonProp,
  secondaryButton: secondaryButtonProp
} = Astro.props;

// Use data object if provided, otherwise use individual props
const badge = data?.badge || badgeProp;
const title = data?.title || titleProp;
const subtitle = data?.subtitle || subtitleProp;
const description = data?.description || descriptionProp;
const stats = data?.stats || statsProp;
const primaryButton = data?.primaryButton || primaryButtonProp;
const secondaryButton = data?.secondaryButton || secondaryButtonProp;
---

<section class={`relative bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 overflow-hidden hero-section ${className}`}>
 

  <!-- Main Content -->
  <div class="relative z-10 container mx-auto px-4 py-20 md:py-32">
    <div class="max-w-4xl mx-auto text-center">


      <!-- Main Heading -->
      <h1 data-animate="fade-in-up" class="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight">
        <span class="bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
          {title}
        </span>
      </h1>
      
      {subtitle && (
        <!-- Subtitle -->
        <h2 data-animate="fade-in-up" class="text-xl md:text-2xl lg:text-3xl font-medium text-gray-300 mb-8">
          {subtitle}
        </h2>
      )}



      <!-- CTA Buttons -->
      <div data-animate="fade-in-up" class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16 cta-buttons">
        {primaryButton && (
          <a href={primaryButton.href} data-button-label={primaryButton.label} onclick="if(window.handleButtonClick) { window.handleButtonClick(event, this.getAttribute('data-button-label')); } else { console.log('handleButtonClick not available'); }" class="group relative px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl primary-btn">
            <span class="relative z-10">{primaryButton.label}</span>
            <div class="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-700 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </a>
        )}
        {secondaryButton && (
          <a href={secondaryButton.href} data-button-label={secondaryButton.label} onclick="if(window.handleButtonClick) { window.handleButtonClick(event, this.getAttribute('data-button-label')); } else { console.log('handleButtonClick not available'); }" class="group px-8 py-4 border-2 border-gray-400 text-gray-300 font-semibold rounded-xl hover:border-white hover:text-white transition-all duration-300 transform hover:scale-105 secondary-btn">
            <span class="flex items-center">{secondaryButton.label}</span>
          </a>
        )}
      </div>


    </div>
  </div>

  {showWave && (
    <!-- Bottom Wave -->
    <div class="absolute bottom-0 left-0 right-0 rotate-180">
      <svg class="w-full h-16 text-white" viewBox="0 0 1200 120" preserveAspectRatio="none">
        <path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" opacity=".25" fill="currentColor"></path>
        <path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" opacity=".5" fill="currentColor"></path>
        <path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" fill="currentColor"></path>
      </svg>
    </div>
  )}
</section>

<script>
  // Use ScrollUtils if available, otherwise use direct implementation
  function handleButtonClick(event: Event, buttonLabel: string) {
    console.log('Button clicked:', buttonLabel);
    
    // @ts-ignore
    if (window.ScrollUtils) {
      console.log('Using ScrollUtils');
      // @ts-ignore
      window.ScrollUtils.handleButtonClick(event, buttonLabel);
    } else {
      console.log('Using fallback implementation');
      // Fallback implementation
      event.preventDefault();
      
      const label = buttonLabel.toLowerCase();
      let sectionId = null;
      
      // Map button labels to section IDs
      if (label.includes('get started with a pod')) {
        sectionId = 'choose-pod-section';
      } else if (label.includes('start with a novapod')) {
        sectionId = 'available-pods';
      } else if (label.includes('see how it works')) {
        sectionId = 'how-it-works';
      }
      
      console.log('Mapped section ID:', sectionId);
      
      if (sectionId) {
        // Special handling for available-pods section - navigate to explore-pods page
        if (sectionId === 'available-pods') {
          console.log('Navigating to explore-pods page with available-pods section');
          window.location.href = '/explore-pods#available-pods';
          return;
        }
        
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
          console.log('Found target section, scrolling...');
          targetSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        } else {
          console.warn(`Section with id "${sectionId}" not found, trying again after delay...`);
          // Try again after a short delay in case the section is still loading
          setTimeout(() => {
            const retrySection = document.getElementById(sectionId);
            if (retrySection) {
              console.log('Found target section on retry, scrolling...');
              retrySection.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            } else {
              console.error(`Section with id "${sectionId}" still not found after retry`);
            }
          }, 500);
        }
      } else {
        // No matching section, use default navigation
        const target = event.target as HTMLAnchorElement;
        const href = target?.href || '#';
        window.location.href = href;
      }
    }
  }

  // Make function globally available immediately
  // @ts-ignore
  window.handleButtonClick = handleButtonClick;
  
  // Also make it available on DOMContentLoaded as backup
  document.addEventListener('DOMContentLoaded', function() {
    // @ts-ignore
    window.handleButtonClick = handleButtonClick;
    console.log('handleButtonClick function made available');
  });
</script>