---
import SimpleRecaptchaWidget from '../shared/SimpleRecaptchaWidget.astro';
import { getSiteKey, getFormConfig } from '../../config/recaptcha';

// Step Coordinator Component - Using catalog as single source of truth
---

<div id="step-coordinator" class="w-full">
  <!-- Step content will be loaded here -->
</div>

<script>
  import { SummaryShared } from '../../utils/summaryShared.js';
  import { generatePodSlug, generatePackSlug } from '../../utils/slugUtils.js';

  class SummaryStepCoordinator {
    private currentStep: number;
    private currentEventListeners: any[];
    private summaryShared: SummaryShared;

    constructor() {
      this.currentStep = 1;
      this.currentEventListeners = [];
      this.summaryShared = new SummaryShared();
      this.init();
    }

    async init() {
      console.log('🔍 [SummaryStepCoordinator] Initializing...');

      // Initialize shared utilities
      await this.summaryShared.init();

      this.setupEventListeners();
      this.loadStep(this.currentStep);
      console.log('🔍 [SummaryStepCoordinator] Initialization complete');
    }

    setupEventListeners() {
      // Listen for step changes
      window.addEventListener('step-changed', (e) => {
        const newStep = e.detail.step;
        console.log('🔍 [StepCoordinator] Step coordinator received step change:', newStep);
        console.log('🔍 [StepCoordinator] Current step before change:', this.currentStep);
        console.log('🔍 [StepCoordinator] Event detail:', e.detail);

        if (newStep >= 1 && newStep <= 3) {
          this.currentStep = newStep;

          // Store current step in DOM element for shared utility to access
          const stepCoordinator = document.getElementById('step-coordinator');
          if (stepCoordinator) {
            stepCoordinator._currentStep = newStep;
          }

          console.log('🔍 [StepCoordinator] Loading step:', newStep);
          this.loadStep(newStep);
        } else {
          console.log('🔍 [StepCoordinator] Invalid step number:', newStep);
        }
      });

      // Listen for cart updates to refresh UI
      window.addEventListener('cart-updated', async (e) => {
        console.log('🔍 [CartUpdated] Event received, current step:', this.currentStep);

        if (this.currentStep === 1) {
          // Check if we still have a pod after the update
          const cart = await this.summaryShared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');

          // Also check localStorage as fallback
          let localStoragePod = null;
          try {
            const localStorageCart = localStorage.getItem('novapod-cart');
            if (localStorageCart) {
              const parsedCart = JSON.parse(localStorageCart);
              localStoragePod = parsedCart.find((item) => item.type === 'pod');
            }
          } catch (error) {
            // Ignore localStorage errors
          }

          if (selectedPod || localStoragePod) {
            // Still have a pod, show selected pod
            const podToShow = selectedPod || localStoragePod;
            console.log('🔍 [CartUpdated] Step 1 - Showing selected pod:', podToShow);
            this.showSelectedPod(podToShow);
          } else {
            // No pod, show available pods
            console.log('🔍 [CartUpdated] Step 1 - Showing available pods');
            this.showAvailablePods();
          }
        } else if (this.currentStep === 2) {
          // Update Step 2 pod summary if cart was updated
          const cart = await this.summaryShared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');

          if (selectedPod) {
            console.log('🔍 [CartUpdated] Step 2 - Updating pod summary with:', selectedPod);
            this.updatePodSummary(selectedPod);
          }

          // Update selected packs display
          await this.updateSelectedPacksDisplay();
        }
      });

      // Global pack action handler - only added once
      document.addEventListener('click', async (e) => {
        const target = e.target;

        console.log(`🔍 [${new Date().toISOString()}] [Global] Click detected on:`, target);
        console.log(
          `🔍 [${new Date().toISOString()}] [Global] Target matches button[data-pack-id]:`,
          target && target.matches('button[data-pack-id]')
        );

        // Handle pack add/remove buttons
        if (target && target.matches('button[data-pack-id]')) {
          e.preventDefault();
          e.stopPropagation();

          const packId = target.getAttribute('data-pack-id');
          const currentAction = target.getAttribute('data-action');

          // Determine the correct action based on button text and current state
          let action;
          if (target.textContent.trim() === 'Add Pack' || currentAction === 'add') {
            action = 'add';
          } else if (target.textContent.trim() === 'Remove Pack' || currentAction === 'remove') {
            action = 'remove';
          } else {
            console.error(
              '🔍 [Global] Unknown button state:',
              target.textContent,
              'data-action:',
              currentAction
            );
            return;
          }

          console.log(`🔍 [${new Date().toISOString()}] [Global] ===== PACK ACTION START =====`);
          console.log(
            `🔍 [${new Date().toISOString()}] [Global] Button text:`,
            target.textContent.trim()
          );
          console.log(`🔍 [${new Date().toISOString()}] [Global] Data action:`, currentAction);
          console.log(
            `🔍 [${new Date().toISOString()}] [Global] Determined action: ${action} for pack: ${packId}`
          );
          console.log(`🔍 [${new Date().toISOString()}] [Global] Current step:`, this.currentStep);
          console.log(
            `🔍 [${new Date().toISOString()}] [Global] Button disabled state:`,
            target.disabled
          );

          // Add a small delay to prevent rapid clicks
          if (target.disabled) {
            console.log('🔍 [Global] Button already processing, ignoring click');
            return;
          }

          target.disabled = true;
          console.log('🔍 [Global] Button disabled for processing');

          try {
            if (action === 'add') {
              console.log('🔍 [Global] ===== ADDING PACK =====');
              // Check if pod exists before adding pack
              const hasPod = await this.summaryShared.hasPod();
              console.log('🔍 [Global] Has pod:', hasPod);
              if (!hasPod) {
                this.summaryShared.showNotification(
                  'Please select a NovaPod first to add packs',
                  'warning'
                );
                return;
              }
              await this.summaryShared.addPack(packId);
              console.log('🔍 [Global] ===== PACK ADDED SUCCESSFULLY =====');
            } else if (action === 'remove') {
              console.log('🔍 [Global] ===== REMOVING PACK =====');
              await this.summaryShared.removePack(packId);
              console.log('🔍 [Global] ===== PACK REMOVED SUCCESSFULLY =====');
            }

            // Refresh pack cards display immediately for better UX
            if (this.currentStep === 2) {
              console.log('🔍 [Global] ===== REFRESHING UI =====');
              await this.refreshPackCards();
              await this.updateSelectedPacksDisplay();
              console.log('🔍 [Global] ===== UI REFRESHED =====');
            }
          } catch (error) {
            console.error('🔍 [Global] Error in pack action:', error);
          } finally {
            // Re-enable button after a short delay
            setTimeout(() => {
              target.disabled = false;
              console.log('🔍 [Global] ===== PACK ACTION END - Button re-enabled =====');
            }, 500);
          }
        }

        // Handle delete pack buttons in selected packs container
        const deleteBtn = target.closest('#selected-packs-list button[data-action="remove"]');
        if (deleteBtn && deleteBtn.getAttribute('data-pack-id')) {
          e.preventDefault();
          e.stopPropagation();

          const packId = deleteBtn.getAttribute('data-pack-id');
          if (packId) {
            console.log('🔍 [Global] Deleting pack from selected packs:', packId);
            await this.summaryShared.removePack(packId);

            // Refresh the packs display if we're on Step 2
            if (this.currentStep === 2) {
              await this.refreshPackCards();
              await this.updateSelectedPacksDisplay();
            }
          }
        }
      });
    }

    async loadStep(step) {
      console.log('🔍 [loadStep] Loading step:', step);
      const coordinator = document.getElementById('step-coordinator');
      if (!coordinator) {
        console.error('🔍 [loadStep] Step coordinator element not found');
        return;
      }

      // Update URL with current step
      this.updateURL(step);

      // Clean up existing event listeners before loading new step
      this.cleanupEventListeners();

      switch (step) {
        case 1:
          console.log('🔍 [loadStep] Loading Step 1');
          await this.loadStep1();
          break;
        case 2:
          console.log('🔍 [loadStep] Loading Step 2');
          await this.loadStep2();
          break;
        case 3:
          console.log('🔍 [loadStep] Loading Step 3');
          await this.loadStep3();
          break;
        default:
          console.error('🔍 [loadStep] Unknown step:', step);
      }
    }

    updateURL(step) {
      try {
        const url = new URL(window.location);
        url.searchParams.set('step', step.toString());
        window.history.replaceState({}, '', url);
        console.log('🔍 [updateURL] Updated URL to step:', step);
      } catch (error) {
        console.error('🔍 [updateURL] Error updating URL:', error);
      }
    }

    cleanupEventListeners() {
      console.log('🔍 [cleanupEventListeners] Cleaning up event listeners');
      // Store references to event listeners so we can remove them
      if (this.currentEventListeners) {
        this.currentEventListeners.forEach((listener) => {
          document.removeEventListener('click', listener);
        });
      }
      this.currentEventListeners = [];
    }

    async loadStep1() {
      const coordinator = document.getElementById('step-coordinator');
      coordinator.innerHTML = `
        <div id="step-1-content" class="step-content">
          <!-- Content will be dynamically loaded based on cart state -->
        </div>
      `;

      await this.initializeStep1();
    }

    async loadStep2() {
      const coordinator = document.getElementById('step-coordinator');
      coordinator.innerHTML = `
        <div id="step-2-content" class="step-content">
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Enhance Your Pod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Add recommended packs to maximize your NovaPod's potential. These add-ons are carefully selected to complement your chosen pod.
            </p>
          </div>

          <!-- Selected Items Row (Pod + Packs) -->
          <div class="flex flex-col lg:flex-row gap-6 mb-8">
                        <!-- Selected Pod Summary -->
            <div id="pod-summary" class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-xl p-4 border border-mint-200 flex-1 min-w-0 flex flex-col h-full">
              <!-- Header Section -->
              <h3 class="text-base font-semibold text-graphite-900 mb-2">Selected Pod</h3>
              
 
              <!-- Pod Details Section -->
              <div class="flex-1 space-y-2 mb-3">
                <!-- Pod Description -->
                <div class="bg-white/60 rounded-lg p-2.5 border border-mint-200/50">
                  <div class="flex items-center space-x-3 mb-2">
                  <div class="w-8 h-8 bg-mint-500 rounded-lg flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                  </div>
                  <div class="min-w-0 flex-1">                  
                    <h4 id="summary-pod-title" class="text-base font-semibold text-graphite-900 truncate">Your Pod</h4>
                    <p id="summary-pod-price" class="text-sm text-mint-600 font-medium">₹0/month</p>
                  </div>
                </div>
                  <p id="summary-pod-description" class="text-xs text-graphite-700 leading-relaxed">Pod description will appear here</p>
                </div>
              </div>

              <!-- CTA Section - Always at bottom -->
              <div class="ml-auto mt-auto pt-3 border-t border-mint-200/50">                
                  <button id="edit-pod-btn" class="text-xs text-mint-600 hover:text-mint-700 font-medium">
                    Change Pod
                  </button>
                </div>
              </div>

            <!-- Selected Packs Section - Only show if packs are selected -->
            <div id="selected-packs-section" class="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm flex-1 min-w-0 hidden">
              <h3 class="text-lg font-semibold text-graphite-900 mb-4">Selected Packs</h3>
              <div id="selected-packs-list" class="space-y-3 mb-6">
                ${this.renderSelectedPacksWithDelete()}
              </div>
              <!-- Continue button in selected packs container -->
              <div class="flex justify-end items-center pt-4 border-t border-gray-200">
                <button id="step2-continue-btn-selected" class="bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-3 px-8 rounded-lg font-semibold hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105">
                  Continue
                </button>
              </div>
            </div>
          </div>

          <!-- Packs Section -->
          <div class="mb-8">
            <h3 id="packs-section-title" class="text-xl font-semibold text-graphite-900 mb-6">Available Packs</h3>
            <div id="packs-grid">
              <!-- Packs will be dynamically loaded here -->
            </div>
          </div>

          <!-- Navigation -->
          <div class="flex justify-end items-center pt-8 border-t border-gray-200">
            <button id="step2-continue-btn" class="bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-3 px-8 rounded-lg font-semibold hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105">
              Continue
            </button>
          </div>
        </div>
      `;

      await this.initializeStep2();
    }

    async loadStep3() {
      console.log('🔍 [loadStep3] Starting Step 3 load');
      const coordinator = document.getElementById('step-coordinator');
      if (!coordinator) {
        console.error('🔍 [loadStep3] Step coordinator element not found');
        return;
      }

      // Debug: Check cart state before loading step 3
      const cart = await this.summaryShared.getCart();
      const selectedPod = cart.find((item) => item.type === 'pod');
      console.log('🔍 [loadStep3] Cart state:', cart);
      console.log('🔍 [loadStep3] Selected pod:', selectedPod);

      // Get reCAPTCHA site key from configuration
      const { getSiteKey } = await import('../../config/recaptcha');
      const recaptchaSiteKey = getSiteKey('reservation');

      coordinator.innerHTML = `
        <div id="step-3-content" class="step-content">
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Reserve Your NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Complete your reservation by providing your contact information and estimated project duration. We'll get back to you within 24 hours.
            </p>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <!-- Order Summary -->
            <div class="lg:order-2">
              <div class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-2xl p-8 border border-mint-200">
                <h3 class="text-2xl font-bold text-graphite-900 mb-6">Order Summary</h3>
                
                <!-- Pod Summary -->
                <div class="mb-6">
                  <h4 class="font-semibold text-graphite-900 mb-3">Selected Pod</h4>
                  <div id="final-pod-summary" class="p-4 bg-white rounded-lg">
                    <div class="flex items-center justify-between">
                      <div>
                        <h5 id="final-pod-title" class="font-semibold text-graphite-900">Selected Pod</h5>
                      </div>
                      <p id="final-pod-price" class="font-bold text-mint-600">₹0/month</p>
                    </div>
                  </div>
                </div>

                <!-- Packs Summary -->
                <div id="final-packs-summary" class="mb-6">
                  <h4 class="font-semibold text-graphite-900 mb-3">Selected Packs</h4>
                  <div id="final-packs-list" class="space-y-2">
                    <!-- Packs will be listed here -->
                  </div>
                </div>

                <!-- Duration Display -->
                <div class="pt-4 border-t border-mint-200">
                  <div class="flex items-center justify-between">
                    <span class="text-lg font-semibold text-graphite-900">Duration</span>
                    <span id="final-duration-display" class="text-lg text-graphite-600">1 month</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Contact Form -->
            <div class="lg:order-1">
              <form id="reservation-form" class="space-y-6">
                <div>
                  <label for="name" class="block text-sm font-medium text-graphite-700 mb-2">Full Name *</label>
                  <input type="text" id="name" name="name" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="email" class="block text-sm font-medium text-graphite-700 mb-2">Email Address *</label>
                  <input type="email" id="email" name="email" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="phone" class="block text-sm font-medium text-graphite-700 mb-2">Phone Number</label>
                  <input type="tel" id="phone" name="phone" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="company" class="block text-sm font-medium text-graphite-700 mb-2">Company Name</label>
                  <input type="text" id="company" name="company" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="message" class="block text-sm font-medium text-graphite-700 mb-2">Additional Requirements</label>
                  <textarea id="message" name="message" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors" placeholder="Tell us about your project requirements, timeline, or any specific needs..."></textarea>
                </div>
                
                <!-- Hidden input for reservation period -->
                <input type="hidden" id="reservation-period" name="reservation-period" value="1">
                
                <!-- Reservation Period Selection -->
                <div>
                  <label class="block text-sm font-medium text-graphite-700 mb-3">Estimated Project Duration</label>
                  <div class="flex flex-wrap gap-3">
                    <button 
                      type="button"
                      class="step3-duration-chip px-4 py-2 rounded-lg border-2 transition-all duration-200 font-medium text-sm bg-mint-500 border-mint-500 text-white"
                      data-duration="1"
                    >
                      1 Month
                    </button>
                    <button 
                      type="button"
                      class="step3-duration-chip px-4 py-2 rounded-lg border-2 transition-all duration-200 font-medium text-sm bg-white border-gray-300 text-gray-700 hover:border-mint-400 hover:text-mint-600"
                      data-duration="3"
                    >
                      3 Months
                    </button>
                    <button 
                      type="button"
                      class="step3-duration-chip px-4 py-2 rounded-lg border-2 transition-all duration-200 font-medium text-sm bg-white border-gray-300 text-gray-700 hover:border-mint-400 hover:text-mint-600"
                      data-duration="6"
                    >
                      6 Months
                    </button>
                    <button 
                      type="button"
                      class="step3-duration-chip px-4 py-2 rounded-lg border-2 transition-all duration-200 font-medium text-sm bg-white border-gray-300 text-gray-700 hover:border-mint-400 hover:text-mint-600"
                      data-duration="12"
                    >
                      12 Months
                    </button>
                  </div>
                  <p class="text-sm text-graphite-500 mt-2">Duration is for project estimation only - pricing remains monthly</p>
                </div>
                
                <!-- reCAPTCHA Widget -->
                <div class="flex justify-center">
                  <div id="recaptcha-container" class="recaptcha-widget">
                    <div class="g-recaptcha" 
                         data-sitekey="${recaptchaSiteKey}"
                         data-theme="light"
                         data-size="normal"
                         data-callback="onReservationRecaptchaSuccess"
                         data-expired-callback="onReservationRecaptchaExpired"
                         data-error-callback="onReservationRecaptchaError">
                    </div>
                  </div>
                </div>
                
                <button type="submit" class="w-full bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-4 px-8 rounded-xl font-semibold text-lg hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105 shadow-lg">
                  Reserve My NovaPod
                </button>
              </form>
            </div>
          </div>

          <!-- Navigation removed - no back button in Step 3 -->
        </div>
        
        <!-- Thank You Modal -->
        <div id="thank-you-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
          <div class="bg-white rounded-2xl p-8 max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div class="text-center mb-6">
              <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-graphite-900 mb-2">Thank You!</h3>
              <p class="text-graphite-600">Your NovaPod reservation has been submitted successfully.</p>
            </div>
            
            <div class="bg-gray-50 rounded-lg p-6 mb-6">
              <h4 class="font-semibold text-graphite-900 mb-4">Reservation Details</h4>
              <div id="modal-reservation-details" class="space-y-3 text-sm">
                <!-- Details will be populated here -->
              </div>
            </div>
            
            <div class="flex justify-center">
              <button id="close-modal-btn" class="bg-mint-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-mint-600 transition-colors">
                Close
              </button>
            </div>
          </div>
        </div>
      `;

      await this.initializeStep3();
    }

    async initializeStep1() {
      console.log('🔍 [initializeStep1] Starting initialization...');

      // Get cart data from localStorage (single source of truth)
      let cart = [];
      let selectedPod = null;

      try {
        // Try this.summaryShared.getCart() first
        cart = await this.summaryShared.getCart();
        console.log('🔍 [initializeStep1] Cart from this.summaryShared.getCart():', cart);
        selectedPod = cart.find((item) => item.type === 'pod');
        console.log(
          '🔍 [initializeStep1] Selected pod from this.summaryShared.getCart():',
          selectedPod
        );
      } catch (error) {
        console.error('🔍 [initializeStep1] Error with this.summaryShared.getCart():', error);
      }

      // Fallback: Direct localStorage check
      if (!selectedPod) {
        try {
          const localStorageCart = localStorage.getItem('novapod-cart');
          console.log('🔍 [initializeStep1] Direct localStorage value:', localStorageCart);

          if (localStorageCart) {
            const parsedCart = JSON.parse(localStorageCart);
            console.log('🔍 [initializeStep1] Parsed localStorage cart:', parsedCart);
            selectedPod = parsedCart.find((item) => item.type === 'pod');
            console.log('🔍 [initializeStep1] Selected pod from direct localStorage:', selectedPod);
          }
        } catch (error) {
          console.error('🔍 [initializeStep1] Error reading direct localStorage:', error);
        }
      }

      if (selectedPod) {
        // Show selected pod
        console.log('🔍 [initializeStep1] Showing selected pod:', selectedPod);
        await this.showSelectedPod(selectedPod);
      } else {
        // Show available pods
        console.log('🔍 [initializeStep1] No pod found, showing available pods');
        await this.showAvailablePods();
      }

      this.addStep1EventListeners();
      console.log('🔍 [initializeStep1] Initialization complete');
    }

    async initializeStep2() {
      console.log('🔍 [initializeStep2] Starting initialization...');

      // Get cart data from localStorage (single source of truth)
      const cart = await this.summaryShared.getCart();
      const selectedPod = cart.find((item) => item.type === 'pod');
      console.log('🔍 [initializeStep2] Cart from localStorage:', cart);
      console.log('🔍 [initializeStep2] Selected pod:', selectedPod);
      console.log(
        '🔍 [initializeStep2] Selected pod reservationMonths:',
        selectedPod?.reservationMonths
      );

      if (selectedPod) {
        // Update the pod summary display
        console.log('🔍 [initializeStep2] Calling updatePodSummary...');
        await this.updatePodSummary(selectedPod);

        // Directly call updatePodDetails to ensure it runs
        console.log('🔍 [initializeStep2] Calling updatePodDetails directly...');
        await this.updatePodDetails(selectedPod);

        // Update pricing based on current reservation period
        const currentMonths = selectedPod.reservationMonths || 1;
        console.log('🔍 [initializeStep2] Updating pricing for', currentMonths, 'months');
        await this.updatePricingForReservationPeriod(currentMonths);

        // Load packs for the selected pod
        console.log('🔍 [initializeStep2] Loading packs...');
        await this.loadPacksForStep2(selectedPod);

        // Update selected packs display
        console.log('🔍 [initializeStep2] Updating selected packs display...');
        await this.updateSelectedPacksDisplay();
      } else {
        console.log('🔍 [initializeStep2] No pod found, redirecting to Step 1');
        this.summaryShared.showNotification('Please select a NovaPod first to proceed', 'warning');
        // Navigate back to Step 1
        this.summaryShared.navigateToStep(1);
        return;
      }

      this.addStep2EventListeners();
      console.log('🔍 [initializeStep2] Initialization complete');
    }

    async initializeStep3() {
      console.log('🔍 [initializeStep3] Starting Step 3 initialization...');
      const cart = await this.summaryShared.getCart();
      const selectedPod = cart.find((item) => item.type === 'pod');
      const selectedPacks = cart.filter((item) => item.type === 'pack');

      console.log('🔍 [initializeStep3] Cart state:', cart);
      console.log('🔍 [initializeStep3] Selected pod:', selectedPod);
      console.log('🔍 [initializeStep3] Selected packs:', selectedPacks);

      if (selectedPod) {
        console.log('🔍 [initializeStep3] Pod found, updating final summary...');
        await this.updateFinalSummary(selectedPod, selectedPacks);
        console.log('🔍 [initializeStep3] Final summary updated successfully');
      } else {
        console.log('🔍 [initializeStep3] No pod found, redirecting to Step 1');
        this.summaryShared.showNotification('Please select a NovaPod first to proceed', 'warning');
        // Navigate back to Step 1
        this.summaryShared.navigateToStep(1);
        return;
      }

      this.addStep3EventListeners();
      console.log('🔍 Step 3 initialization complete');
    }

    async showSelectedPod(podItem) {
      const step1Content = document.getElementById('step-1-content');

      if (step1Content) {
        // Replace the entire step 1 content with selected pod display
        step1Content.innerHTML = `
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Your Selected NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Review your selected pod. You can customize the project duration in Step 3.
            </p>
          </div>

          <!-- Selected Pod Display -->
          <div class="max-w-xl mx-auto mb-6">
            <div class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-xl p-6 border border-mint-200">
              <!-- Header Section -->
              <div class="flex items-start space-x-3 mb-4">
                <div class="w-10 h-10 bg-mint-500 rounded-lg flex items-center justify-center flex-shrink-0">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <div class="flex-1 min-w-0">
                  <h3 id="selected-pod-title" class="text-lg font-bold text-graphite-900 mb-1 truncate">
                    <a href="/pods/${generatePodSlug(
                      podItem.title || podItem.name
                    )}" class="hover:text-mint-600 transition-colors cursor-pointer" title="View pod details">
                      ${podItem.title || podItem.name || 'Selected Pod'}
                      <svg class="w-3 h-3 inline ml-1 text-mint-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                      </svg>
                    </a>
                  </h3>
                  <p id="selected-pod-description" class="text-xs text-graphite-600 mb-2 line-clamp-2">${
                    podItem.description || podItem.tagline || 'Pod description'
                  }</p>
                </div>
              </div>
              

              
              
              <!-- Pricing and Actions Section -->
              <div class="bg-white rounded-lg p-4 border border-mint-200 mb-4">
                <div class="flex items-center justify-between">
                  <div class="flex items-baseline space-x-2">
                    <p id="selected-pod-price" class="text-2xl font-bold text-mint-600">Calculating...</p>
                    <p class="text-sm text-graphite-500">per month</p>
                  </div>
                  <button id="change-pod-btn" class="text-sm text-mint-600 hover:text-mint-700 font-medium underline">
                    Change Pod
                  </button>
                </div>
                
                
              
                <!-- Compact Details Grid -->
                <div class="space-y-3">
                  
                  
                  <!-- Team Composition -->
                  ${
                    podItem.whatsInPod?.teamComposition &&
                    podItem.whatsInPod.teamComposition.length > 0
                      ? `
                    <div class="bg-white rounded-lg p-3 border border-gray-200">
                      <h4 class="text-xs font-semibold text-graphite-900 mb-2 flex items-center">
                        <svg class="w-3 h-3 text-mint-500 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                        </svg>
                        Team Composition
                      </h4>
                      <div class="space-y-1.5">
                        ${podItem.whatsInPod.teamComposition
                          .map(
                            (member) => `
                          <div class="flex items-center space-x-1.5">
                            <div class="w-4 h-4 bg-mint-100 rounded-sm flex items-center justify-center">
                              <svg class="w-2.5 h-2.5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                              </svg>
                            </div>
                            <span class="text-xs text-graphite-700">${member}</span>
                          </div>
                        `
                          )
                          .join('')}
                      </div>
                    </div>
                  `
                      : ''
                  }
                  
                  <!-- What Can Do (Deliverables) -->
                  ${
                    podItem.whatCanDo && podItem.whatCanDo.length > 0
                      ? `
                    <div class="bg-white rounded-lg p-3 border border-gray-200">
                      <h4 class="text-xs font-semibold text-graphite-900 mb-2 flex items-center">
                        <svg class="w-3 h-3 text-mint-500 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        What You Get
                      </h4>
                      <div class="space-y-1.5">
                        ${podItem.whatCanDo
                          .slice(0, 4)
                          .map(
                            (capability) => `
                          <div class="flex items-center space-x-1.5">
                            <div class="w-4 h-4 bg-cerulean-100 rounded-sm flex items-center justify-center">
                              <svg class="w-2.5 h-2.5 text-cerulean-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                            </div>
                            <span class="text-xs text-graphite-700">${capability}</span>
                          </div>
                        `
                          )
                          .join('')}
                        ${
                          podItem.whatCanDo.length > 4
                            ? `
                          <div class="flex items-center space-x-1.5">
                            <div class="w-4 h-4 bg-gray-100 rounded-sm flex items-center justify-center">
                              <svg class="w-2.5 h-2.5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                              </svg>
                            </div>
                            <span class="text-xs text-graphite-600">+${
                              podItem.whatCanDo.length - 4
                            } more capabilities</span>
                          </div>
                        `
                            : ''
                        }
                      </div>
                    </div>
                  `
                      : ''
                  }                  
                </div>
                
              </div>
              <!-- Action Buttons -->
                <div class="flex gap-2">
                  <button id="remove-pod-btn" class="flex-1 px-3 py-2 text-xs text-gray-600 hover:text-red-500 rounded-lg font-medium transition-all duration-300 flex items-center justify-center space-x-1.5 bg-gray-50 hover:bg-red-50 border border-gray-200 hover:border-red-200">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    <span>Remove</span>
                  </button>
                  
                  <button id="view-pod-details-btn" class="flex-1 px-3 py-2 text-xs border border-gray-300 text-gray-700 rounded-lg font-medium hover:border-mint-400 hover:text-mint-600 hover:bg-mint-50 transition-all duration-300 flex items-center justify-center space-x-1.5">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    <span>View Details</span>
                  </button>
                  
                  <button id="step1-continue-btn" class="flex-1 px-3 py-2 text-xs bg-gradient-to-r from-mint-500 to-cerulean-500 text-white rounded-lg font-medium hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 flex items-center justify-center space-x-1.5 shadow-sm">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                    </svg>
                    <span>Continue</span>
                  </button>
                </div>

              
            </div>
          </div>
        `;

        // Update the pod summary with correct pricing after HTML is rendered
        await this.updatePodSummary(podItem);
      }
    }

    async showAvailablePods() {
      console.log('🔍 [showAvailablePods] Starting to show available pods...');

      const step1Content = document.getElementById('step-1-content');
      console.log('🔍 [showAvailablePods] Step 1 content element found:', !!step1Content);

      if (step1Content) {
        // Show the original "Choose Your NovaPod" section
        step1Content.innerHTML = `
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Choose Your NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Select the perfect NovaPod solution for your business needs. Each pod is designed to deliver exceptional results.
            </p>
          </div>

          <!-- Available Pods Grid -->
          <div id="available-pods-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Pods will be dynamically loaded here -->
          </div>
        `;

        console.log('🔍 [showAvailablePods] HTML set, now loading available pods...');
        await this.loadAvailablePods();
        console.log('🔍 [showAvailablePods] Available pods loaded');
      } else {
        console.error('🔍 [showAvailablePods] Step 1 content element not found!');
      }
    }

    async loadAvailablePods() {
      console.log('🔍 [loadAvailablePods] Starting to load available pods...');

      try {
        const pods = await this.summaryShared.loadPods();
        console.log('🔍 [loadAvailablePods] Pods loaded:', pods);

        const grid = document.getElementById('available-pods-grid');
        console.log('🔍 [loadAvailablePods] Grid element found:', !!grid);

        if (!grid) {
          console.error('🔍 [loadAvailablePods] Grid element not found!');
          return;
        }

        if (!pods || pods.length === 0) {
          console.log('🔍 [loadAvailablePods] No pods found, showing empty state');
          grid.innerHTML =
            '<p class="text-graphite-600 col-span-full text-center py-8">No pods are currently available.</p>';
          return;
        }

        console.log('🔍 [loadAvailablePods] Rendering', pods.length, 'pods');

        grid.innerHTML = pods
          .map(
            (pod) => `
          <div class="bg-white rounded-2xl p-6 border border-gray-200 hover:border-mint-300 transition-all duration-300 hover:shadow-lg flex flex-col h-full">
            <!-- Header with icon and title -->
            <div class="flex items-center space-x-4 mb-4">
              <div class="w-12 h-12 bg-mint-500 rounded-lg flex items-center justify-center flex-shrink-0">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <div class="flex-1 min-w-0">
                <h3 class="text-xl font-semibold text-graphite-900 truncate">${pod.name}</h3>
              </div>
            </div>
            
            <!-- Description -->
            <p class="text-graphite-600 mb-4 flex-1">${pod.tagline}</p>
            
            <!-- Ideal for section -->
            <div class="space-y-2 mb-4">
              <h4 class="text-sm font-medium text-graphite-700">Ideal for:</h4>
              <ul class="text-sm text-graphite-600 space-y-1">
                ${
                  pod.idealFor
                    ? pod.idealFor
                        .slice(0, 2)
                        .map((item) => `<li>• ${item}</li>`)
                        .join('')
                    : ''
                }
              </ul>
            </div>
            
            <!-- Team Composition Preview -->
            ${
              pod.teamComposition && pod.teamComposition.length > 0
                ? `
              <div class="space-y-2 mb-4">
                <h4 class="text-sm font-medium text-graphite-700">Team:</h4>
                <ul class="text-sm text-graphite-600 space-y-1">
                  ${pod.teamComposition
                    .slice(0, 2)
                    .map((member) => `<li>• ${member.split('–')[0].trim()}</li>`)
                    .join('')}
                  ${
                    pod.teamComposition.length > 2
                      ? `<li class="text-mint-600">+${pod.teamComposition.length - 2} more</li>`
                      : ''
                  }
                </ul>
              </div>
            `
                : ''
            }
            
            <!-- Pricing - positioned above button -->
            <div class="mb-4">
              ${
                pod.discountPercentage > 0
                  ? `
                <div class="space-y-1">
                  <div class="text-sm text-gray-500 line-through">₹${(
                    pod.basePriceINR / 100000
                  ).toFixed(1)}L/month</div>
                  <div class="text-lg font-bold text-mint-600">₹${(
                    (pod.basePriceINR * (100 - pod.discountPercentage)) /
                    100 /
                    100000
                  ).toFixed(1)}L/month</div>
                  <div class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full inline-block">${
                    pod.discountPercentage
                  }% OFF</div>
                </div>
              `
                  : `
                <span class="text-lg font-bold text-mint-600">₹${(
                  pod.basePriceINR / 100000
                ).toFixed(1)}L/month</span>
              `
              }
            </div>
            
            <!-- CTA Button - always at bottom -->
            <button class="w-full bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-3 px-6 rounded-lg font-semibold hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105 mt-auto" data-pod-id="${
              pod.id
            }">
              Reserve Pod
            </button>
          </div>
        `
          )
          .join('');

        console.log('🔍 [loadAvailablePods] Pods rendered successfully');
      } catch (error) {
        console.error('🔍 [loadAvailablePods] Error loading pods:', error);
        const grid = document.getElementById('available-pods-grid');
        if (grid) {
          grid.innerHTML =
            '<p class="text-red-600 col-span-full text-center py-8">Error loading pods. Please refresh the page.</p>';
        }
      }
    }

    async loadPacksForStep2(podItem) {
      console.log('🔍 [loadPacksForStep2] Starting with podItem:', podItem);

      const grid = document.getElementById('packs-grid');
      const title = document.getElementById('packs-section-title');

      console.log('🔍 [loadPacksForStep2] Grid element:', grid);
      console.log('🔍 [loadPacksForStep2] Title element:', title);

      if (!grid) {
        console.error('🔍 [loadPacksForStep2] packs-grid element not found!');
        return;
      }

      try {
        // Get all available packs for categories
        const allPacks = await this.summaryShared.loadAllPacks();
        const categories = this.summaryShared.getPackCategories();

        console.log('🔍 [loadPacksForStep2] All packs:', allPacks);
        console.log('🔍 [loadPacksForStep2] Categories:', categories);

        if (!categories || categories.length === 0) {
          console.log('🔍 [loadPacksForStep2] No categories found, showing empty state');
          if (title) title.textContent = 'No Packs Available';
          grid.innerHTML =
            '<p class="text-graphite-600 col-span-full text-center py-8">No packs are currently available.</p>';
          return;
        }

        if (title) title.textContent = 'Available Packs';

        // Create grouped interface with categories only
        const packsSectionHTML = await this.renderPacksSection(categories);
        console.log('🔍 [loadPacksForStep2] Generated HTML length:', packsSectionHTML.length);

        grid.innerHTML = packsSectionHTML;
        console.log('🔍 [loadPacksForStep2] Packs loaded successfully');
      } catch (error) {
        console.error('🔍 [loadPacksForStep2] Error loading packs:', error);
        if (title) title.textContent = 'Error Loading Packs';
        grid.innerHTML =
          '<p class="text-red-600 col-span-full text-center py-8">Error loading packs. Please refresh the page.</p>';
      }
    }

    async renderPacksSection(categories) {
      console.log('🔍 [renderPacksSection] Starting with categories:', categories);

      // Get current cart to check which packs are selected
      const cart = this.getCurrentCart();
      const selectedPackIds = cart.filter((item) => item.type === 'pack').map((item) => item.id);

      console.log('🔍 [renderPacksSection] Selected pack IDs:', selectedPackIds);

      // Render category packs only
      const categoryPacksHTML = categories
        .map(
          (category) => `
        <div class="mb-8">
          <h4 class="text-lg font-semibold text-graphite-900 mb-4">${category.title}</h4>
          <div class="flex overflow-x-auto pb-4">
            ${category.packs
              .map((pack) => this.renderPackCard(pack, selectedPackIds.includes(pack.id)))
              .join('')}
          </div>
        </div>
      `
        )
        .join('');

      console.log('🔍 [renderPacksSection] Category packs HTML length:', categoryPacksHTML.length);

      const finalHTML = `
        <!-- Category Packs Sections -->
        ${categoryPacksHTML}
      `;

      console.log('🔍 [renderPacksSection] Final HTML length:', finalHTML.length);
      return finalHTML;
    }

    renderPackCard(pack, isAdded = false) {
      console.log('🔍 [renderPackCard] Rendering pack:', pack);
      console.log('🔍 [renderPackCard] isAdded:', isAdded);

      // Get current reservation period for pack pricing
      let months = 1; // default
      const selectedChip = document.querySelector('.duration-chip.bg-mint-500');
      if (selectedChip) {
        months = parseInt(selectedChip.getAttribute('data-duration') || '1');
      } else {
        // Try to get from cart
        const cart = this.getCurrentCart();
        const selectedPod = cart.find((item) => item.type === 'pod');
        if (selectedPod && selectedPod.reservationMonths) {
          months = selectedPod.reservationMonths;
        }
      }

      // Use base price directly (no duration multiplication for estimation)
      const discountedPriceINR = (pack.basePriceINR * (100 - pack.discountPercentage)) / 100;

      // Standardize price display - always use L for consistency
      const formatPrice = (price) => {
        if (price >= 100000) {
          return `₹${(price / 100000).toFixed(1)}L`;
        } else if (price >= 1000) {
          return `₹${(price / 1000).toFixed(0)}K`;
        } else {
          return `₹${price}`;
        }
      };

      console.log('🔍 [renderPackCard] Generated HTML for pack:', pack.title);
      return `
        <div class="pack-card bg-white rounded-xl min-w-[300px] p-6 mx-4 border border-gray-200 cursor-pointer ${
          isAdded ? 'border-mint-500' : ''
        }" data-pack-id="${pack.id}">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-cerulean-500 rounded-lg flex items-center justify-center">
                <span class="text-white text-lg">${pack.icon || '📦'}</span>
              </div>
              ${
                pack.badge
                  ? `<span class="px-2 py-1 text-xs font-medium rounded-full ${
                      pack.badgeColor === 'green'
                        ? 'bg-green-100 text-green-800'
                        : pack.badgeColor === 'blue'
                        ? 'bg-blue-100 text-blue-800'
                        : 'bg-purple-100 text-purple-800'
                    }">${pack.badge}</span>`
                  : ''
              }
            </div>
            <div class="text-right">
              ${
                pack.discountPercentage > 0
                  ? `
                <div class="text-sm text-gray-500 line-through">${formatPrice(
                  pack.basePriceINR
                )}</div>
                <div class="text-sm font-medium text-cerulean-600">${formatPrice(
                  discountedPriceINR
                )}</div>
                <div class="text-xs text-green-600">${pack.discountPercentage}% OFF</div>
              `
                  : `
                <div class="text-sm font-medium text-cerulean-600">${formatPrice(
                  pack.basePriceINR
                )}</div>
              `
              }
            </div>
          </div>
          
          <h3 class="text-lg font-semibold text-graphite-900 mb-2">
            <a href="/packs/${generatePackSlug(
              pack.title
            )}" class="hover:text-cerulean-600 transition-colors cursor-pointer" title="View pack details">
              ${pack.title}
              <svg class="w-4 h-4 inline ml-1 text-cerulean-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            </a>
          </h3>
          <p class="text-graphite-600 mb-4">${pack.description}</p>
          
          <div class="flex items-center justify-between">
            <span class="text-sm text-graphite-500">${pack.duration}</span>
            <button class="px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
              isAdded
                ? 'bg-red-500 text-white hover:bg-red-600'
                : 'bg-cerulean-500 text-white hover:bg-cerulean-600'
            }" data-pack-id="${pack.id}" data-action="${isAdded ? 'remove' : 'add'}">
              ${isAdded ? 'Remove Pack' : 'Add Pack'}
            </button>
          </div>
        </div>
      `;
    }

    getCurrentCart() {
      try {
        const cartData = localStorage.getItem('novapod-cart');
        return cartData ? JSON.parse(cartData) : [];
      } catch (error) {
        console.error('Error reading cart from localStorage:', error);
        return [];
      }
    }

    async getPackDetails(packId) {
      try {
        // Import catalog data dynamically
        const { packsCatalog } = await import('/src/content/catalog/_packs.js');

        // Search through all categories to find the pack
        for (const category of packsCatalog.packCategories) {
          const pack = category.packs.find((p) => p.id === packId);
          if (pack) {
            return pack;
          }
        }

        // If not found in categories, search in availablePacks
        const pack = packsCatalog.availablePacks.find((p) => p.id === packId);
        if (pack) {
          return pack;
        }

        console.error('Pack not found in catalog:', packId);
        return null;
      } catch (error) {
        console.error('Error getting pack details from catalog:', error);
        return null;
      }
    }

    async renderSelectedPacks() {
      const cart = this.getCurrentCart();
      const selectedPacks = cart.filter((item) => item.type === 'pack');

      if (selectedPacks.length === 0) {
        return `
          <div class="text-center py-4">
            <p class="text-sm text-graphite-500">No packs selected yet</p>
            <p class="text-xs text-graphite-400 mt-1">Add packs in Step 2 to enhance your pod</p>
          </div>
        `;
      }

      // Get current reservation period for pack pricing
      let months = 1; // default
      const selectedChip = document.querySelector('.duration-chip.bg-mint-500');
      if (selectedChip) {
        months = parseInt(selectedChip.getAttribute('data-duration') || '1');
      } else {
        const selectedPod = cart.find((item) => item.type === 'pod');
        if (selectedPod && selectedPod.reservationMonths) {
          months = selectedPod.reservationMonths;
        }
      }

      // Standardize price display function
      const formatPrice = (price) => {
        if (price >= 100000) {
          return `₹${(price / 100000).toFixed(1)}L`;
        } else if (price >= 1000) {
          return `₹${(price / 1000).toFixed(0)}K`;
        } else {
          return `₹${price}`;
        }
      };

      const packPromises = selectedPacks.map(async (pack) => {
        // Get pack details from catalog
        const packDetails = await this.getPackDetails(pack.id);
        if (!packDetails) return '';

        // Use base price directly (no duration multiplication for estimation)
        const totalPrice =
          (packDetails.basePriceINR * (100 - packDetails.discountPercentage)) / 100;
        const formattedPrice = formatPrice(totalPrice);

        return `
          <div class="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 bg-cerulean-500 rounded-lg flex items-center justify-center">
                <span class="text-white text-sm">${packDetails.icon || '📦'}</span>
              </div>
              <div>
                <span class="font-medium text-graphite-900 text-sm">
                  <a href="/packs/${generatePackSlug(
                    packDetails.title || 'Pack'
                  )}" class="hover:text-cerulean-600 transition-colors cursor-pointer" title="View pack details">
                    ${packDetails.title || 'Pack'}
                    <svg class="w-3 h-3 inline ml-1 text-cerulean-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                  </a>
                </span>
                <p class="text-xs text-graphite-500">${
                  packDetails.description || 'Pack description'
                }</p>
              </div>
            </div>
            <span class="font-semibold text-cerulean-600 text-sm">${formattedPrice}</span>
          </div>
        `;
      });

      const packResults = await Promise.all(packPromises);
      return packResults.join('');
    }

    async renderSelectedPacksWithDelete() {
      const cart = this.getCurrentCart();
      const selectedPacks = cart.filter((item) => item.type === 'pack');

      if (selectedPacks.length === 0) {
        return `
          <div class="text-center py-6">
            <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
              <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
              </svg>
            </div>
            <p class="text-sm text-graphite-500">No packs selected yet</p>
            <p class="text-xs text-graphite-400 mt-1">Browse and add packs below to enhance your pod</p>
          </div>
        `;
      }

      // Get current reservation period for pack pricing
      let months = 1; // default
      const selectedChip = document.querySelector('.duration-chip.bg-mint-500');
      if (selectedChip) {
        months = parseInt(selectedChip.getAttribute('data-duration') || '1');
      } else {
        const selectedPod = cart.find((item) => item.type === 'pod');
        if (selectedPod && selectedPod.reservationMonths) {
          months = selectedPod.reservationMonths;
        }
      }

      // Standardize price display function
      const formatPrice = (price) => {
        if (price >= 100000) {
          return `₹${(price / 100000).toFixed(1)}L`;
        } else if (price >= 1000) {
          return `₹${(price / 1000).toFixed(0)}K`;
        } else {
          return `₹${price}`;
        }
      };

      const packPromises = selectedPacks.map(async (pack) => {
        // Get pack details from catalog
        const packDetails = await this.getPackDetails(pack.id);
        if (!packDetails) return '';

        // Use base price directly (no duration multiplication for estimation)
        const totalPrice =
          (packDetails.basePriceINR * (100 - packDetails.discountPercentage)) / 100;
        const formattedPrice = formatPrice(totalPrice);

        return `
          <div class="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 bg-cerulean-500 rounded-lg flex items-center justify-center">
                <span class="text-white text-sm">${packDetails.icon || '📦'}</span>
              </div>
              <div>
                <span class="font-medium text-graphite-900 text-sm">
                  <a href="/packs/${generatePackSlug(
                    packDetails.title || 'Pack'
                  )}" class="hover:text-cerulean-600 transition-colors cursor-pointer" title="View pack details">
                    ${packDetails.title || 'Pack'}
                    <svg class="w-3 h-3 inline ml-1 text-cerulean-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                  </a>
                </span>
                <p class="text-xs text-graphite-500">${
                  packDetails.description || 'Pack description'
                }</p>
              </div>
            </div>
            <div class="flex items-center space-x-3">
              <span class="font-semibold text-cerulean-600 text-sm">${formattedPrice}</span>
                      <button class="text-gray-600 hover:text-red-500 p-1 rounded hover:bg-red-50/50 transition-colors bg-transparent !text-gray-600" data-pack-id="${
                        pack.id
                      }" data-action="remove" title="Remove Pack">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
              </button>
            </div>
          </div>
        `;
      });

      const packResults = await Promise.all(packPromises);
      return packResults.join('');
    }

    async updateSelectedPacksDisplay() {
      console.log('🔍 [updateSelectedPacksDisplay] ===== STARTING UPDATE =====');
      
      const selectedPacksSection = document.getElementById('selected-packs-section');
      const selectedPacksList = document.getElementById('selected-packs-list');
      
      if (!selectedPacksSection || !selectedPacksList) {
        console.error('🔍 [updateSelectedPacksDisplay] Selected packs elements not found');
        return;
      }

      // Get current cart to check if there are selected packs
      const cart = await this.summaryShared.getCart();
      const selectedPacks = cart.filter((item) => item.type === 'pack');
      
      console.log('🔍 [updateSelectedPacksDisplay] Selected packs count:', selectedPacks.length);

      if (selectedPacks.length === 0) {
        // Hide the section if no packs are selected
        selectedPacksSection.classList.add('hidden');
        console.log('🔍 [updateSelectedPacksDisplay] No packs selected, hiding section');
      } else {
        // Show the section and update content if packs are selected
        selectedPacksSection.classList.remove('hidden');
        console.log('🔍 [updateSelectedPacksDisplay] Packs selected, showing section');
        
        const newContent = await this.renderSelectedPacksWithDelete();
        console.log('🔍 [updateSelectedPacksDisplay] New content length:', newContent.length);
        selectedPacksList.innerHTML = newContent;
      }
      
      console.log('🔍 [updateSelectedPacksDisplay] ===== UPDATE COMPLETED =====');
    }

    async refreshPackCards() {
      console.log('🔍 [refreshPackCards] ===== STARTING PACK CARDS REFRESH =====');
      try {
        const cart = this.getCurrentCart();
        const selectedPackIds = cart.filter((item) => item.type === 'pack').map((item) => item.id);

        console.log('🔍 [refreshPackCards] Selected pack IDs:', selectedPackIds);

        const packCards = document.querySelectorAll('.pack-card');
        console.log('🔍 [refreshPackCards] Found pack cards:', packCards.length);

        packCards.forEach((card) => {
          const packId = card.getAttribute('data-pack-id');
          const button = card.querySelector('button[data-action]');

          if (packId && button) {
            const isSelected = selectedPackIds.includes(packId);
            console.log(
              '🔍 [refreshPackCards] Processing pack:',
              packId,
              'isSelected:',
              isSelected,
              'current action:',
              button.getAttribute('data-action')
            );

            // Update card styling
            if (isSelected) {
              card.classList.add('ring-2', 'ring-mint-500', 'bg-mint-50');
              card.classList.remove('bg-white');
            } else {
              card.classList.remove('ring-2', 'ring-mint-500', 'bg-mint-50');
              card.classList.add('bg-white');
            }

            // Update button
            if (isSelected) {
              button.textContent = 'Remove Pack';
              button.setAttribute('data-action', 'remove');
              // Completely replace the class attribute to avoid conflicts
              button.className =
                'px-4 py-2 rounded-lg font-medium transition-all duration-300 text-gray-600 hover:text-red-500 bg-transparent hover:bg-red-50/50 !text-gray-600';
              button.disabled = false; // Ensure button is enabled
              console.log(
                '🔍 [refreshPackCards] Button classes after update (selected):',
                button.className
              );
            } else {
              button.textContent = 'Add Pack';
              button.setAttribute('data-action', 'add');
              // Completely replace the class attribute to avoid conflicts
              button.className =
                'px-4 py-2 rounded-lg font-medium transition-all duration-300 bg-cerulean-500 text-white hover:bg-cerulean-600';
              button.disabled = false; // Ensure button is enabled
              console.log(
                '🔍 [refreshPackCards] Button classes after update (not selected):',
                button.className
              );
            }

            console.log(
              '🔍 [refreshPackCards] Updated button for pack:',
              packId,
              'new action:',
              button.getAttribute('data-action'),
              'disabled:',
              button.disabled
            );
          }
        });

        // Update the selected packs display in the DOM
        await this.updateSelectedPacksDisplay();

        console.log('🔍 [refreshPackCards] ===== PACK CARDS REFRESH COMPLETED =====');
      } catch (error) {
        console.error('🔍 [refreshPackCards] Error refreshing pack cards:', error);
      }
    }

    showNoPodWarning() {
      const grid = document.getElementById('packs-grid');
      const title = document.getElementById('packs-section-title');

      if (title) title.textContent = 'No Pod Selected';
      if (grid) {
        grid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <div class="bg-yellow-50 border border-yellow-200 rounded-2xl p-8">
              <svg class="w-16 h-16 text-yellow-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <h3 class="text-xl font-semibold text-yellow-800 mb-2">No Pod Selected</h3>
              <p class="text-yellow-700 mb-4">Please go back to step 1 and select a pod before adding packs.</p>
              <button id="go-to-step1-btn" class="bg-yellow-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-yellow-600 transition-colors">
                Go to Step 1
              </button>
            </div>
          </div>
        `;
      }
    }

    async updatePodSummary(podItem) {
      console.log('🔍 [updatePodSummary] Updating pod summary with:', podItem);

      // Get the latest pod data from localStorage
      const cart = await this.summaryShared.getCart();
      const latestPodItem = cart.find((item) => item.type === 'pod');

      if (!latestPodItem) {
        console.error('🔍 [updatePodSummary] No pod found in cart');
        return;
      }

      console.log('🔍 [updatePodSummary] Latest pod item:', latestPodItem);

      // Determine which step we're in and use appropriate selectors
      let selectors;
      if (this.currentStep === 1) {
        // Step 1 uses selected-pod-* selectors
        selectors = {
          titleSelector: '#selected-pod-title',
          priceSelector: '#selected-pod-price',
        };
      } else {
        // Step 2 uses summary-pod-* selectors
        selectors = {
          titleSelector: '#summary-pod-title',
          priceSelector: '#summary-pod-price',
        };
      }

      // Update the pod summary using shared utility
      await this.summaryShared.updatePodSummary(latestPodItem, selectors);

      // Update additional pod details for Step 2
      if (this.currentStep === 2) {
        await this.updatePodDetails(latestPodItem);
      }

      // Note: Removed months display from Step 1 card as requested
      // Price now shows "per month" format instead of reservation period
    }

    async getPodDetails(podId) {
      console.log('🔍 [getPodDetails] Getting pod details for ID:', podId);

      try {
        // Import catalog data dynamically
        const { podsCatalog } = await import('/src/content/catalog/_pods.js');

        // Search for pod in catalog
        const pod = podsCatalog.availablePods.find((p) => p.id === podId);
        if (pod) {
          console.log('🔍 [getPodDetails] Found pod:', pod);
          return pod;
        }

        console.error('🔍 [getPodDetails] Pod not found in catalog:', podId);
        return null;
      } catch (error) {
        console.error('🔍 [getPodDetails] Error getting pod details from catalog:', error);
        return null;
      }
    }

    async updatePodDetails(podItem) {
      console.log('🔍 [updatePodDetails] Updating pod details with:', podItem);

      try {
        // Get detailed pod data from catalog
        const detailedPod = await this.getPodDetails(podItem.id);
        console.log('🔍 [updatePodDetails] Detailed pod data:', detailedPod);

        if (!detailedPod) {
          console.error('🔍 [updatePodDetails] Could not get detailed pod data');
          return;
        }

        // Update description
        const descriptionElement = document.getElementById('summary-pod-description');
        if (descriptionElement) {
          const description =
            detailedPod.whatsInPod?.description ||
            detailedPod.tagline ||
            'Pod description not available';
          console.log('🔍 [updatePodDetails] Setting description:', description);
          descriptionElement.textContent = description;
        } else {
          console.error('🔍 [updatePodDetails] Description element not found');
        }

        // Note: Team and capabilities elements were removed from HTML structure
        // Only update description element which still exists
        console.log('🔍 [updatePodDetails] Team and capabilities elements removed from HTML structure - skipping updates');

        // Add event listener for view details button
        const viewDetailsBtn = document.getElementById('view-pod-details-btn');
        if (viewDetailsBtn) {
          viewDetailsBtn.onclick = () => {
            const podSlug = this.generatePodSlug(detailedPod.name);
            window.open(`/pods/${podSlug}`, '_blank');
          };
        }

        console.log('🔍 [updatePodDetails] Pod details updated successfully');
      } catch (error) {
        console.error('🔍 [updatePodDetails] Error updating pod details:', error);
      }
    }

    generatePodSlug(name) {
      return name
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    async updateFinalSummary(podItem, packItems) {
      await this.summaryShared.updatePodSummary(podItem, {
        titleSelector: '#final-pod-title',
        priceSelector: '#final-pod-price',
      });

      // Update the duration display with current reservation period
      const durationElement = document.getElementById('final-duration-display');
      if (durationElement) {
        const months = podItem.reservationMonths || 1;
        durationElement.textContent = `${months} month${months > 1 ? 's' : ''}`;
      }

      const packsList = document.getElementById('final-packs-list');
      if (packsList) {
        if (packItems.length === 0) {
          packsList.innerHTML = '<p class="text-graphite-500 text-sm">No packs selected</p>';
        } else {
          // Note: Duration is now for estimation only, not for pricing

          // Standardize price display function
          const formatPrice = (price) => {
            if (price >= 100000) {
              return `₹${(price / 100000).toFixed(1)}L`;
            } else if (price >= 1000) {
              return `₹${(price / 1000).toFixed(0)}K`;
            } else {
              return `₹${price}`;
            }
          };

          const packPromises = packItems.map(async (pack) => {
            const packDetails = await this.summaryShared.getPackDetails(pack.id);
            if (!packDetails) return '';

            // Show monthly pack price with discount (no duration multiplication)
            const monthlyPrice =
              (packDetails.basePriceINR * (100 - packDetails.discountPercentage)) / 100;
            const formattedPrice = formatPrice(monthlyPrice);

            return `
              <div class="flex items-center justify-between p-3 bg-white rounded-lg">
                <div class="flex items-center space-x-3">
                <div class="w-8 h-8 bg-cerulean-500 rounded-lg flex items-center justify-center">
                  <span class="text-white text-sm">${packDetails.icon || '📦'}</span>
                </div>
                <span class="font-medium text-graphite-900">
                  <a href="/packs/${generatePackSlug(
                    packDetails.title
                  )}" class="hover:text-cerulean-600 transition-colors cursor-pointer" title="View pack details">
                    ${packDetails.title}
                    <svg class="w-3 h-3 inline ml-1 text-cerulean-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                  </a>
                </span>
              </div>
              <span class="font-semibold text-cerulean-600">${formattedPrice}/month</span>
            </div>
          `;
          });

          const packResults = await Promise.all(packPromises);
          packsList.innerHTML = packResults.join('');
        }
      }

      // No need to update total price since duration is for estimation only
    }

    async initializeStep3DurationChips() {
      console.log('🔍 [initializeStep3DurationChips] Initializing step 3 duration chips...');

      try {
        const cart = await this.summaryShared.getCart();
        const selectedPod = cart.find((item) => item.type === 'pod');
        const currentMonths = selectedPod?.reservationMonths || 1;

        console.log('🔍 [initializeStep3DurationChips] Current months from cart:', currentMonths);

        // Update all step 3 chips to show the current selection
        const allStep3Chips = document.querySelectorAll('.step3-duration-chip');
        allStep3Chips.forEach((chip) => {
          const chipDuration = parseInt(chip.getAttribute('data-duration') || '1');

          if (chipDuration === currentMonths) {
            // Selected chip
            chip.classList.remove(
              'bg-white',
              'border-gray-300',
              'text-gray-700',
              'hover:border-mint-400',
              'hover:text-mint-600'
            );
            chip.classList.add('bg-mint-500', 'border-mint-500', 'text-white');
          } else {
            // Unselected chips
            chip.classList.remove('bg-mint-500', 'border-mint-500', 'text-white');
            chip.classList.add(
              'bg-white',
              'border-gray-300',
              'text-gray-700',
              'hover:border-mint-400',
              'hover:text-mint-600'
            );
          }
        });

        // Update hidden input field
        const hiddenInput = document.getElementById('reservation-period');
        if (hiddenInput) {
          hiddenInput.value = currentMonths.toString();
          console.log(
            '🔍 [initializeStep3DurationChips] Set hidden input value to:',
            currentMonths
          );
        }

        console.log('🔍 [initializeStep3DurationChips] Step 3 duration chips initialized');
      } catch (error) {
        console.error(
          '🔍 [initializeStep3DurationChips] Error initializing step 3 duration chips:',
          error
        );
      }
    }

    async updatePricingForReservationPeriod(months) {
      console.log('🔍 [updatePricingForReservationPeriod] Duration changed to', months, 'months (for estimation only)');

      try {
        // Get current cart
        const cart = await this.summaryShared.getCart();
        const selectedPod = cart.find((item) => item.type === 'pod');

        if (selectedPod) {
          // Update pod summary in Step 1 (no pricing changes)
          if (this.currentStep === 1) {
            await this.updatePodSummary(selectedPod);
          }

          // Update pod summary in Step 2 (no pricing changes)
          if (this.currentStep === 2) {
            await this.updatePodSummary(selectedPod);
          }

          // Update final summary in Step 3 (no pricing changes)
          if (this.currentStep === 3) {
            const selectedPacks = cart.filter((item) => item.type === 'pack');
            await this.updateFinalSummary(selectedPod, selectedPacks);
          }

          // No need to update price displays since duration doesn't affect pricing
        }
      } catch (error) {
        console.error('🔍 [updatePricingForReservationPeriod] Error updating summary:', error);
      }
    }

    updateAllPriceDisplays(months) {
      // Update all DiscountedPriceDisplay components on the page
      const priceDisplays = document.querySelectorAll('.discounted-price-display');
      priceDisplays.forEach((display) => {
        const basePriceINR = parseInt(display.getAttribute('data-base-price-inr') || '0');
        const basePriceUSD = parseInt(display.getAttribute('data-base-price-usd') || '0');
        const discountPercentage = parseInt(
          display.getAttribute('data-discount-percentage') || '0'
        );
        const isPack = display.getAttribute('data-item-type') === 'pack';

        if (basePriceINR > 0) {
          // Use base price directly (no duration multiplication for estimation)
          const finalPriceINR = basePriceINR;
          const finalPriceUSD = basePriceUSD;

          // Update the final price display (new minimal design)
          const finalPriceElement = display.querySelector('.final-price');
          if (finalPriceElement) {
            // Format price based on user location
            let userCurrency = 'INR';
            if (typeof window !== 'undefined' && window.userLocation) {
              userCurrency = window.userLocation.currency;
            }

            const formattedPrice =
              userCurrency === 'INR'
                ? `₹${(finalPriceINR / 100000).toFixed(1)}L`
                : `$${(finalPriceUSD / 1000).toFixed(1)}K`;

            finalPriceElement.textContent = formattedPrice;
          }

          // Update original price if it exists (new minimal design)
          const originalPriceElement = display.querySelector('.original-price');
          if (originalPriceElement) {
            let userCurrency = 'INR';
            if (typeof window !== 'undefined' && window.userLocation) {
              userCurrency = window.userLocation.currency;
            }

            const originalFormattedPrice =
              userCurrency === 'INR'
                ? `₹${(totalPriceINR / 100000).toFixed(1)}L`
                : `$${(totalPriceUSD / 1000).toFixed(1)}K`;

            originalPriceElement.textContent = originalFormattedPrice;
          }

          // Update discount badge if it exists
          const discountBadgeElement = display.querySelector('.discount-badge-minimal');
          if (discountBadgeElement && discountPercentage > 0) {
            discountBadgeElement.textContent = `${discountPercentage}% OFF`;
          }

          // Update savings text if it exists
          const savingsElement = display.querySelector('.savings-text');
          if (savingsElement && discountPercentage > 0) {
            let userCurrency = 'INR';
            if (typeof window !== 'undefined' && window.userLocation) {
              userCurrency = window.userLocation.currency;
            }

            const savingsINR = totalPriceINR - finalPriceINR;
            const savingsUSD = totalPriceUSD - finalPriceUSD;

            const savingsFormatted =
              userCurrency === 'INR'
                ? `₹${(savingsINR / 100000).toFixed(1)}L`
                : `$${(savingsUSD / 1000).toFixed(1)}K`;

            savingsElement.textContent = `Save ${savingsFormatted}`;
          }
        }
      });
    }

    addStep1EventListeners() {
      console.log('🔍 [Step1] Adding event listeners...');

      // Pod selection with replacement confirmation - using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const podButton = target.closest('[data-pod-id]');

        if (podButton) {
          console.log(
            `🔍 [${new Date().toISOString()}] [Step1] Pod button clicked:`,
            podButton.getAttribute('data-pod-id')
          );
          const podId = podButton.getAttribute('data-pod-id');
          const selectedPod = await this.summaryShared.selectPodWithConfirmation(podId);
          if (selectedPod) {
            await this.showSelectedPod(selectedPod);
          }
        }
      });

      // Start journey button (Step 1 only) - using event delegation with double-click protection
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const continueBtn = target.closest('#step1-continue-btn');

        if (continueBtn && this.currentStep === 1) {
          // Prevent double-clicks
          if (continueBtn.disabled) {
            console.log(
              `🔍 [${new Date().toISOString()}] [Step1] Continue button already processing, ignoring duplicate click`
            );
            return;
          }

          console.log(`🔍 [${new Date().toISOString()}] [Step1] Continue to Step 2 button clicked`);
          console.log('🔍 [Step1] Current step before nextStep():', this.currentStep);
          console.log('🔍 [Step1] About to call nextStep()');

          // Disable button to prevent double-clicks
          continueBtn.disabled = true;
          const originalText = continueBtn.textContent;
          continueBtn.textContent = 'Loading...';

          try {
            this.summaryShared.nextStep();
            console.log('🔍 [Step1] nextStep() called');
          } catch (error) {
            console.error(
              `🔍 [${new Date().toISOString()}] [Step1] Error navigating to Step 2:`,
              error
            );
            // Re-enable button on error
            continueBtn.disabled = false;
            continueBtn.textContent = originalText;
          }
        } else if (continueBtn) {
          console.log(
            '🔍 [Step1] Continue button clicked but ignored - not in Step 1 (current step:',
            this.currentStep,
            ')'
          );
        }
      });

      // Change pod button
      document.addEventListener('click', async (e) => {
        if (e.target && e.target.matches('#change-pod-btn')) {
          console.log('🔍 [Step1] Change pod button clicked');
          this.showAvailablePods();
        }
      });

      // Remove pod button - using event delegation to handle clicks on child elements
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const removeBtn = target.closest('#remove-pod-btn');

        if (removeBtn) {
          console.log(`🔍 [${new Date().toISOString()}] [Step1] Remove pod button clicked`);
          e.preventDefault();
          e.stopPropagation();
          await this.summaryShared.removePod();
          this.showAvailablePods();
        }
      });

      // View pod details button - using event delegation with double-click protection
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const viewDetailsBtn = target.closest('#view-pod-details-btn');

        if (viewDetailsBtn) {
          // Prevent double-clicks
          if (viewDetailsBtn.disabled) {
            console.log(
              `🔍 [${new Date().toISOString()}] [Step1] View details button already processing, ignoring duplicate click`
            );
            return;
          }

          console.log(`🔍 [${new Date().toISOString()}] [Step1] View pod details button clicked`);
          e.preventDefault();
          e.stopPropagation();

          // Disable button to prevent double-clicks
          viewDetailsBtn.disabled = true;
          const originalText = viewDetailsBtn.innerHTML;
          viewDetailsBtn.innerHTML = `
            <svg class="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <span>Loading...</span>
          `;

          try {
            // Get the current pod from cart
            const cart = await this.summaryShared.getCart();
            const podItem = cart.find((item) => item.type === 'pod');

            if (podItem && podItem.id) {
              // Navigate to the pod details page
              const podSlug = generatePodSlug(podItem.title || podItem.name);
              console.log(
                `🔍 [${new Date().toISOString()}] [Step1] Navigating to pod details: /pods/${podSlug}`
              );
              window.location.href = `/pods/${podSlug}`;
            } else {
              this.summaryShared.showNotification('No pod selected to view details', 'warning');
              // Re-enable button on error
              viewDetailsBtn.disabled = false;
              viewDetailsBtn.innerHTML = originalText;
            }
          } catch (error) {
            console.error(
              `🔍 [${new Date().toISOString()}] [Step1] Error navigating to pod details:`,
              error
            );
            this.summaryShared.showNotification('Failed to navigate to pod details', 'error');
            // Re-enable button on error
            viewDetailsBtn.disabled = false;
            viewDetailsBtn.innerHTML = originalText;
          }
        }
      });

      // Custom duration chip functionality using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target;

        // Handle duration chip selection (Step 1)
        if (target.matches('.duration-chip')) {
          e.preventDefault();
          const chip = target;
          const months = parseInt(chip.getAttribute('data-duration') || '1');
          console.log('🔍 [Step1] Duration chip selected:', months);

          // Update all chips to show selected state
          const allChips = document.querySelectorAll('.duration-chip');
          allChips.forEach((chipElement) => {
            const chipEl = chipElement;
            const chipDuration = parseInt(chipEl.getAttribute('data-duration') || '1');

            if (chipDuration === months) {
              // Selected chip
              chipEl.classList.remove(
                'bg-white',
                'border-gray-300',
                'text-gray-700',
                'hover:border-mint-400',
                'hover:text-mint-600'
              );
              chipEl.classList.add('bg-mint-500', 'border-mint-500', 'text-white');
            } else {
              // Unselected chips
              chipEl.classList.remove('bg-mint-500', 'border-mint-500', 'text-white');
              chipEl.classList.add(
                'bg-white',
                'border-gray-300',
                'text-gray-700',
                'hover:border-mint-400',
                'hover:text-mint-600'
              );
            }
          });

          // Update storage
          console.log('🔍 [Step1] Calling updateHirePeriod...');
          await this.summaryShared.updateHirePeriod(months);
          console.log('🔍 [Step1] updateHirePeriod completed');

          // Update the months display in Step 1
          const monthsDisplay = document.getElementById('selected-pod-months');
          if (monthsDisplay) {
            monthsDisplay.innerHTML = `Reservation Period: <span class="font-medium">${months} Month${
              months > 1 ? 's' : ''
            }</span>`;
            console.log('🔍 [Step1] Updated months display in Step 1');
          }

          // Update pricing dynamically based on new reservation period
          await this.updatePricingForReservationPeriod(months);

          // Also verify the storage was updated
          try {
            const localStorageCart = localStorage.getItem('novapod-cart');
            if (localStorageCart) {
              const parsedCart = JSON.parse(localStorageCart);
              const pod = parsedCart.find((item) => item.type === 'pod');
              console.log('🔍 [Step1] Pod in localStorage after update:', pod);
            }
          } catch (error) {
            console.error('🔍 [Step1] Error checking localStorage:', error);
          }
        }

        // Handle step 3 duration chip selection
        if (target.matches('.step3-duration-chip')) {
          e.preventDefault();
          const chip = target;
          const months = parseInt(chip.getAttribute('data-duration') || '1');
          console.log('🔍 [Step3] Duration chip selected:', months);

          // Update all step 3 chips to show selected state
          const allStep3Chips = document.querySelectorAll('.step3-duration-chip');
          allStep3Chips.forEach((chipElement) => {
            const chipEl = chipElement;
            const chipDuration = parseInt(chipEl.getAttribute('data-duration') || '1');

            if (chipDuration === months) {
              // Selected chip
              chipEl.classList.remove(
                'bg-white',
                'border-gray-300',
                'text-gray-700',
                'hover:border-mint-400',
                'hover:text-mint-600'
              );
              chipEl.classList.add('bg-mint-500', 'border-mint-500', 'text-white');
            } else {
              // Unselected chips
              chipEl.classList.remove('bg-mint-500', 'border-mint-500', 'text-white');
              chipEl.classList.add(
                'bg-white',
                'border-gray-300',
                'text-gray-700',
                'hover:border-mint-400',
                'hover:text-mint-600'
              );
            }
          });

          // Update hidden input field
          const hiddenInput = document.getElementById('reservation-period');
          if (hiddenInput) {
            hiddenInput.value = months.toString();
            console.log('🔍 [Step3] Updated hidden input value to:', months);
          }

          // Update storage
          console.log('🔍 [Step3] Calling updateHirePeriod...');
          await this.summaryShared.updateHirePeriod(months);
          console.log('🔍 [Step3] updateHirePeriod completed');

          // Update duration display
          const durationDisplay = document.getElementById('final-duration-display');
          if (durationDisplay) {
            durationDisplay.textContent = `${months} month${months > 1 ? 's' : ''}`;
            console.log('🔍 [Step3] Updated duration display to:', months, 'month(s)');
          }

          // Update pricing dynamically based on new reservation period
          await this.updatePricingForReservationPeriod(months);
        }
      });
    }

    addStep2EventListeners() {
      console.log('🔍 [Step2] Adding event listeners...');

      // Pack event listeners are now handled globally in setupEventListeners()
      // Only add Step 2 specific listeners here

      // Edit pod button - using event delegation
      document.addEventListener('click', (e) => {
        const target = e.target;
        const editBtn = target.closest('#edit-pod-btn');

        if (editBtn) {
          this.summaryShared.navigateToStep(1);
        }
      });

      // Remove pod button - using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const removeBtn = target.closest('#remove-pod-step2-btn');

        if (removeBtn) {
          console.log(`🔍 [${new Date().toISOString()}] [Step2] Remove pod button clicked`);
          e.preventDefault();
          e.stopPropagation();
          await this.summaryShared.removePod();
          this.summaryShared.navigateToStep(1);
        }
      });

      // Back button removed from Step 2

      // Continue button (Step 2 only) - using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target;
        const continueBtn = target.closest('#step2-continue-btn, #step2-continue-btn-selected');

        if (continueBtn) {
          console.log('🔍 [Step2] Continue button clicked');
          console.log('🔍 [Step2] Button ID:', continueBtn.id);
          console.log('🔍 [Step2] About to call nextStep()');
          console.log('🔍 [Step2] this.summaryShared available:', typeof this.summaryShared);
          console.log('🔍 [Step2] this.summaryShared.nextStep available:', typeof this.summaryShared?.nextStep);
          
          // Debug: Check cart state before navigation
          const cart = await this.summaryShared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');
          console.log('🔍 [Step2] Cart state before navigation:', cart);
          console.log('🔍 [Step2] Selected pod before navigation:', selectedPod);
          
          // Try multiple approaches to call nextStep
          try {
            if (this.summaryShared && typeof this.summaryShared.nextStep === 'function') {
              this.summaryShared.nextStep();
              console.log('🔍 [Step2] nextStep() called successfully');
            } else if (window.summaryShared && typeof window.summaryShared.nextStep === 'function') {
              window.summaryShared.nextStep();
              console.log('🔍 [Step2] nextStep() called via window.summaryShared');
            } else {
              console.error('🔍 [Step2] summaryShared.nextStep not available');
              // Fallback: manually navigate to step 3
              console.log('🔍 [Step2] About to dispatch step-changed event manually');
              window.dispatchEvent(new CustomEvent('step-changed', { detail: { step: 3 } }));
              console.log('🔍 [Step2] Manually dispatched step-changed event');
            }
          } catch (error) {
            console.error('🔍 [Step2] Error calling nextStep:', error);
            // Fallback: manually navigate to step 3
            console.log('🔍 [Step2] About to dispatch step-changed event in catch block');
            window.dispatchEvent(new CustomEvent('step-changed', { detail: { step: 3 } }));
            console.log('🔍 [Step2] Fallback: manually dispatched step-changed event');
          }
        }
      });

      // Go to step 1 button - using event delegation
      document.addEventListener('click', (e) => {
        const target = e.target;
        const goToStep1Btn = target.closest('#go-to-step1-btn');

        if (goToStep1Btn) {
          this.summaryShared.navigateToStep(1);
        }
      });

      // Debug: Check if buttons exist after adding listeners
      setTimeout(() => {
        const continueBtn1 = document.getElementById('step2-continue-btn');
        const continueBtn2 = document.getElementById('step2-continue-btn-selected');
        console.log('🔍 [Step2] Debug - step2-continue-btn exists:', !!continueBtn1);
        console.log('🔍 [Step2] Debug - step2-continue-btn-selected exists:', !!continueBtn2);
        console.log('🔍 [Step2] Debug - this.summaryShared available:', typeof this.summaryShared);
      }, 100);
    }

    addStep3EventListeners() {
      console.log('🔍 Adding Step 3 event listeners...');

      // Initialize step 3 duration chips with current cart value
      this.initializeStep3DurationChips();

      // Global variables for reCAPTCHA
      let reservationRecaptchaResponse: string | null = null;

      // reCAPTCHA callback functions for reservation
      window.onReservationRecaptchaSuccess = function (response: string) {
        reservationRecaptchaResponse = response;
        console.log('Reservation reCAPTCHA success:', response);
      };

      window.onReservationRecaptchaExpired = function () {
        reservationRecaptchaResponse = null;
        console.log('Reservation reCAPTCHA expired');
      };

      window.onReservationRecaptchaError = function () {
        reservationRecaptchaResponse = null;
        console.log('Reservation reCAPTCHA error');
      };

      // Initialize reCAPTCHA for dynamically created form
      this.initializeRecaptcha();

      // Form submission
      const form = document.getElementById('reservation-form');
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          console.log('🔍 [Step3] Form submission started');

          // Check if reCAPTCHA is completed
          if (!reservationRecaptchaResponse) {
            this.summaryShared.showNotification(
              'Please complete the reCAPTCHA verification before submitting the form.',
              'warning'
            );
            return;
          }

          // Get the submit button and show loading state
          const submitButton = form.querySelector('button[type="submit"]');
          const originalButtonText = submitButton?.textContent || 'Reserve My NovaPod';

          if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = 'Submitting...';
          }

          // Get form data
          const formData = new FormData(form);
          const formValues = {
            name: formData.get('name'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            company: formData.get('company'),
            message: formData.get('message'),
            reservationPeriod: formData.get('reservation-period'),
          };

          // Get cart data
          const cart = await this.summaryShared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');
          const selectedPacks = cart.filter((item) => item.type === 'pack');

          // Create submission data
          const submissionData = {
            timestamp: new Date().toISOString(),
            formData: formValues,
            cartItems: {
              pod: selectedPod,
              packs: selectedPacks,
            },
            totalItems: cart.length,
            step: this.currentStep,
            reservationPeriod: formValues.reservationPeriod,
          };

          // Log everything to console
          console.log('🔍 [Step3] ===== FORM SUBMISSION DATA =====');
          console.log('🔍 [Step3] Form Values:', formValues);
          console.log('🔍 [Step3] Cart Items:', cart);
          console.log('🔍 [Step3] Selected Pod:', selectedPod);
          console.log('🔍 [Step3] Selected Packs:', selectedPacks);
          console.log('🔍 [Step3] Complete Submission Data:', submissionData);
          console.log('🔍 [Step3] ===== END FORM SUBMISSION DATA =====');

          try {
            // Get reservation period from hidden input
            const reservationPeriod = formData.get('reservation-period') || '1';

            // Prepare data for HubSpot submission
            const hubspotData = {
              ...formValues,
              selected_pod: selectedPod ? selectedPod.title || selectedPod.name : '',
              selected_pod_slug: selectedPod ? selectedPod.slug || '' : '',
              selected_packs:
                selectedPacks.length > 0
                  ? selectedPacks.map((pack) => pack.title || pack.name).join(', ')
                  : '',
              reservation_period: `${reservationPeriod} month${
                parseInt(reservationPeriod) > 1 ? 's' : ''
              }`,
              source: 'NovaPod Reservation Form',
              recaptchaResponse: reservationRecaptchaResponse,
              recaptchaAction:
                selectedPod && selectedPod.slug
                  ? `pod_reservation_${selectedPod.slug}`
                  : 'pod_reservation',
            };

            console.log('🔍 [Step3] Submitting to HubSpot:', hubspotData);

            // Submit to HubSpot via API
            const response = await fetch('/api/contact', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(hubspotData),
            });

            const result = await response.json();

            if (result.success) {
              console.log('🔍 [Step3] HubSpot submission successful:', result);
              // Show thank you modal with details first
              this.showThankYouModal(submissionData);
              // Clear form and cart after successful submission (this will also navigate to step 1)
              setTimeout(async () => {
                await this.clearFormAndCart();
              }, 2000); // Show modal for 2 seconds before clearing and navigating
            } else {
              console.error('🔍 [Step3] HubSpot submission failed:', result.error);
              // Show error notification and preserve form data
              this.summaryShared.showNotification(
                `Failed to submit reservation: ${result.error}. Please try again or contact support if the problem persists.`,
                'error'
              );
              // Don't clear form or cart - let user retry
              return; // Exit early to preserve form data
            }
          } catch (error) {
            console.error('🔍 [Step3] Error submitting to HubSpot:', error);
            // Show error notification and preserve form data
            this.summaryShared.showNotification(
              'Failed to submit reservation due to a network error. Please check your connection and try again.',
              'error'
            );
            // Don't clear form or cart - let user retry
            return; // Exit early to preserve form data
          } finally {
            // Restore button state
            if (submitButton) {
              submitButton.disabled = false;
              submitButton.textContent = originalButtonText;
            }
          }
        });
      }

      // Modal close button
      document.addEventListener('click', (e) => {
        if (e.target && e.target.matches('#close-modal-btn')) {
          this.hideThankYouModal();
        }
      });

      console.log('🔍 Step 3 event listeners added');
    }

    showThankYouModal(submissionData) {
      console.log('🔍 [showThankYouModal] Showing thank you modal');

      const modal = document.getElementById('thank-you-modal');
      const detailsContainer = document.getElementById('modal-reservation-details');

      if (modal && detailsContainer) {
        // Populate modal with submission details
        const detailsHTML = this.generateModalDetailsHTML(submissionData);
        detailsContainer.innerHTML = detailsHTML;

        // Show modal
        modal.classList.remove('hidden');
        modal.classList.add('flex');

        console.log('🔍 [showThankYouModal] Modal displayed successfully');
      } else {
        console.error('🔍 [showThankYouModal] Modal elements not found');
      }
    }

    hideThankYouModal() {
      console.log('🔍 [hideThankYouModal] Hiding thank you modal');

      const modal = document.getElementById('thank-you-modal');
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        console.log('🔍 [hideThankYouModal] Modal hidden successfully');
      }
    }

    generateModalDetailsHTML(submissionData) {
      const { formData, cartItems, reservationPeriod } = submissionData;

      let html = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <h5 class="font-medium text-graphite-900 mb-2">Contact Information</h5>
            <div class="space-y-1 text-graphite-600">
              <p><strong>Name:</strong> ${formData.name || 'Not provided'}</p>
              <p><strong>Email:</strong> ${formData.email || 'Not provided'}</p>
              <p><strong>Phone:</strong> ${formData.phone || 'Not provided'}</p>
              <p><strong>Company:</strong> ${formData.company || 'Not provided'}</p>
            </div>
          </div>
          
          <div>
            <h5 class="font-medium text-graphite-900 mb-2">Selected Items</h5>
            <div class="space-y-1 text-graphite-600">
              <p><strong>Pod:</strong> ${cartItems.pod ? cartItems.pod.title : 'None selected'}</p>
              <p><strong>Estimated Duration:</strong> ${reservationPeriod || '1'} month${
                parseInt(reservationPeriod || '1') > 1 ? 's' : ''
              }</p>
              <p><strong>Packs:</strong> ${cartItems.packs.length} selected</p>
            </div>
          </div>
        </div>
      `;

      if (formData.message) {
        html += `
          <div class="mt-4">
            <h5 class="font-medium text-graphite-900 mb-2">Additional Requirements</h5>
            <p class="text-graphite-600">${formData.message}</p>
          </div>
        `;
      }

      if (cartItems.packs.length > 0) {
        html += `
          <div class="mt-4">
            <h5 class="font-medium text-graphite-900 mb-2">Selected Packs</h5>
            <ul class="list-disc list-inside space-y-1 text-graphite-600">
              ${cartItems.packs.map((pack) => `<li>${pack.title}</li>`).join('')}
            </ul>
          </div>
        `;
      }

      html += `
        <div class="mt-4 pt-4 border-t border-gray-200">
          <p class="text-xs text-graphite-500">
            <strong>Submission Time:</strong> ${new Date(submissionData.timestamp).toLocaleString()}
          </p>
        </div>
      `;

      return html;
    }

    async clearFormAndCart() {
      console.log('🔍 [clearFormAndCart] ===== STARTING CLEAR OPERATION =====');

      try {
        // Clear the form
        const form = document.getElementById('reservation-form');
        if (form) {
          form.reset();
          console.log('🔍 [clearFormAndCart] Form cleared successfully');
        } else {
          console.error('🔍 [clearFormAndCart] Form element not found');
        }

        // Clear cart from localStorage
        localStorage.removeItem('novapod-cart');
        console.log('🔍 [clearFormAndCart] Cart removed from localStorage');

        // Clear cart from shared utility if available
        if (this.summaryShared && typeof this.summaryShared.clearCart === 'function') {
          await this.summaryShared.clearCart();
          console.log('🔍 [clearFormAndCart] Cart cleared via shared utility');
        }

        // Update the order summary display to show empty state
        this.updateOrderSummaryForEmptyCart();

        // Clear header cart count
        this.updateHeaderCartCount(0);

        // Clear any other storage references
        this.clearAllStorageReferences();

        console.log('🔍 [clearFormAndCart] ===== CLEAR OPERATION COMPLETED =====');
        
        // Navigate back to step 1 after successful clearing
        console.log('🔍 [clearFormAndCart] Navigating back to step 1...');
        setTimeout(() => {
          this.summaryShared.navigateToStep(1);
        }, 500); // Small delay to ensure clearing is complete
        
      } catch (error) {
        console.error('🔍 [clearFormAndCart] Error clearing form and cart:', error);
      }
    }

    updateOrderSummaryForEmptyCart() {
      console.log('🔍 [updateOrderSummaryForEmptyCart] Updating order summary for empty cart');

      // Update pod summary
      const podTitle = document.getElementById('final-pod-title');
      const podDuration = document.getElementById('final-pod-duration');
      const podPrice = document.getElementById('final-pod-price');

      if (podTitle) podTitle.textContent = 'No Pod Selected';
      if (podDuration) podDuration.textContent = 'Not set';
      if (podPrice) podPrice.textContent = '₹0/month';

      // Update packs summary
      const packsList = document.getElementById('final-packs-list');
      if (packsList) {
        packsList.innerHTML = '<p class="text-graphite-500 text-sm">No packs selected</p>';
      }

      // Update total
      const totalPrice = document.getElementById('total-price');
      if (totalPrice) {
        totalPrice.textContent = '₹0';
      }

      console.log('🔍 [updateOrderSummaryForEmptyCart] Order summary updated for empty cart');
    }

    updateHeaderCartCount(count) {
      console.log('🔍 [updateHeaderCartCount] Updating header cart count to:', count);

      try {
        // Find all cart count elements in the header
        const cartCountElements = document.querySelectorAll('[data-cart-count]');
        const cartBadges = document.querySelectorAll(
          '.cart-badge, .cart-count, [class*="cart-count"]'
        );

        // Update elements with data-cart-count attribute
        cartCountElements.forEach((element) => {
          (element as HTMLElement).textContent = count.toString();
          element.setAttribute('data-cart-count', count.toString());

          // Hide element if count is 0
          if (count === 0) {
            (element as HTMLElement).style.display = 'none';
          } else {
            (element as HTMLElement).style.display = 'inline';
          }
        });

        // Update cart badge elements
        cartBadges.forEach((element) => {
          (element as HTMLElement).textContent = count.toString();

          // Hide element if count is 0
          if (count === 0) {
            (element as HTMLElement).style.display = 'none';
          } else {
            (element as HTMLElement).style.display = 'inline';
          }
        });

        // Also try to find elements by common cart count selectors
        const commonSelectors = [
          '.header .cart-count',
          '.navbar .cart-count',
          '.nav .cart-count',
          '.cart-icon .count',
          '.cart-badge .count',
          '[class*="cart"] [class*="count"]',
        ];

        commonSelectors.forEach((selector) => {
          const elements = document.querySelectorAll(selector);
          elements.forEach((element) => {
            (element as HTMLElement).textContent = count.toString();

            if (count === 0) {
              (element as HTMLElement).style.display = 'none';
            } else {
              (element as HTMLElement).style.display = 'inline';
            }
          });
        });

        console.log('🔍 [updateHeaderCartCount] Header cart count updated successfully');
      } catch (error) {
        console.error('🔍 [updateHeaderCartCount] Error updating header cart count:', error);
      }
    }

    // Clear all storage references related to cart, pods, and packs
    clearAllStorageReferences() {
      console.log('🔍 [clearAllStorageReferences] Clearing all storage references...');
      
      try {
        // Clear any remaining localStorage items that might be related
        const localStorageKeys = Object.keys(localStorage);
        const keysToRemove = localStorageKeys.filter(key => 
          key.includes('cart') || 
          key.includes('pod') || 
          key.includes('pack') || 
          key.includes('reservation') ||
          key.includes('summary') ||
          key.includes('step')
        );
        
        keysToRemove.forEach(key => {
          localStorage.removeItem(key);
          console.log('🔍 [clearAllStorageReferences] Removed localStorage key:', key);
        });
        
        // Clear any sessionStorage items
        const sessionStorageKeys = Object.keys(sessionStorage);
        const sessionKeysToRemove = sessionStorageKeys.filter(key => 
          key.includes('cart') || 
          key.includes('pod') || 
          key.includes('pack') || 
          key.includes('reservation') ||
          key.includes('summary') ||
          key.includes('step')
        );
        
        sessionKeysToRemove.forEach(key => {
          sessionStorage.removeItem(key);
          console.log('🔍 [clearAllStorageReferences] Removed sessionStorage key:', key);
        });
        
        // Clear any cookies that might be related
        const cookies = document.cookie.split(';');
        cookies.forEach(cookie => {
          const [name] = cookie.split('=');
          if (name && (name.includes('cart') || name.includes('pod') || name.includes('pack'))) {
            document.cookie = `${name.trim()}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
            console.log('🔍 [clearAllStorageReferences] Removed cookie:', name.trim());
          }
        });
        
        console.log('🔍 [clearAllStorageReferences] All storage references cleared successfully');
      } catch (error) {
        console.error('🔍 [clearAllStorageReferences] Error clearing storage references:', error);
      }
    }

    // Initialize reCAPTCHA for dynamically created forms
    initializeRecaptcha() {
      console.log('🔍 [initializeRecaptcha] Starting reCAPTCHA initialization...');

      // Load reCAPTCHA script if not already loaded
      if (typeof window.grecaptcha === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://www.google.com/recaptcha/api.js';
        script.async = true;
        script.defer = true;
        script.onload = () => {
          console.log('🔍 [initializeRecaptcha] reCAPTCHA script loaded, waiting for ready...');
          // Wait for grecaptcha to be fully ready
          if (window.grecaptcha && window.grecaptcha.ready) {
            window.grecaptcha.ready(() => {
              console.log('🔍 [initializeRecaptcha] reCAPTCHA is ready, rendering widget...');
              this.renderRecaptchaWidget();
            });
          } else {
            // Fallback: wait a bit more for grecaptcha to be available
            setTimeout(() => {
              console.log('🔍 [initializeRecaptcha] Fallback: rendering widget...');
              this.renderRecaptchaWidget();
            }, 1000);
          }
        };
        script.onerror = () => {
          console.error('🔍 [initializeRecaptcha] Failed to load reCAPTCHA script');
          this.summaryShared.showNotification(
            'Failed to load reCAPTCHA. Please refresh the page and try again.',
            'error'
          );
        };
        document.head.appendChild(script);
      } else {
        console.log('🔍 [initializeRecaptcha] reCAPTCHA script already loaded, checking if ready...');
        // Check if grecaptcha is ready
        if (window.grecaptcha && window.grecaptcha.ready) {
          window.grecaptcha.ready(() => {
            console.log('🔍 [initializeRecaptcha] reCAPTCHA is ready, rendering widget...');
            this.renderRecaptchaWidget();
          });
        } else {
          console.log('🔍 [initializeRecaptcha] Fallback: rendering widget...');
          this.renderRecaptchaWidget();
        }
      }
    }

    // Render the reCAPTCHA widget
    async renderRecaptchaWidget() {
      const recaptchaContainer = document.getElementById('recaptcha-container');
      if (recaptchaContainer) {
        console.log('🔍 [renderRecaptchaWidget] Found reCAPTCHA container, rendering...');

        // Get current pod for dynamic configuration
        let currentPodSlug = null;
        try {
          const cart = await this.summaryShared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');
          if (selectedPod && selectedPod.slug) {
            currentPodSlug = selectedPod.slug;
            console.log('🔍 [renderRecaptchaWidget] Current pod slug:', currentPodSlug);
          }
        } catch (error) {
          console.log('🔍 [renderRecaptchaWidget] Could not get current pod, using default config');
        }

        // Ensure grecaptcha is available and ready
        if (typeof window.grecaptcha === 'undefined') {
          console.log('🔍 [renderRecaptchaWidget] grecaptcha not available, waiting...');
          setTimeout(() => this.renderRecaptchaWidget(), 500);
          return;
        }

        // Check if widget already exists and has content
        const existingWidget = recaptchaContainer.querySelector('.g-recaptcha');
        if (existingWidget && existingWidget.children.length > 0) {
          console.log('🔍 [renderRecaptchaWidget] reCAPTCHA widget already rendered');
          return;
        }

        // Clear any existing content
        recaptchaContainer.innerHTML = '';

        // Create new widget container
        const widgetContainer = document.createElement('div');
        widgetContainer.className = 'g-recaptcha';
        
        // Get the appropriate site key based on current pod or use default reservation config
        let siteKey;
        if (currentPodSlug) {
          // Import the function dynamically since we're in a client-side context
          const { getPodSiteKey } = await import('../../config/recaptcha');
          siteKey = getPodSiteKey(currentPodSlug);
        } else {
          // Import the function dynamically since we're in a client-side context
          const { getSiteKey } = await import('../../config/recaptcha');
          siteKey = getSiteKey('reservation');
        }
        
        widgetContainer.setAttribute('data-sitekey', siteKey);
        widgetContainer.setAttribute('data-theme', 'light');
        widgetContainer.setAttribute('data-size', 'normal');
        widgetContainer.setAttribute('data-callback', 'onReservationRecaptchaSuccess');
        widgetContainer.setAttribute('data-expired-callback', 'onReservationRecaptchaExpired');
        widgetContainer.setAttribute('data-error-callback', 'onReservationRecaptchaError');
        
        recaptchaContainer.appendChild(widgetContainer);

        // Render the widget
        try {
          const widgetId = (window as any).grecaptcha.render(widgetContainer, {
            sitekey: siteKey,
            theme: 'light',
            size: 'normal',
            callback: 'onReservationRecaptchaSuccess',
            'expired-callback': 'onReservationRecaptchaExpired',
            'error-callback': 'onReservationRecaptchaError',
          });
          
          console.log('🔍 [renderRecaptchaWidget] reCAPTCHA widget rendered successfully with ID:', widgetId);
          
          // Store widget ID for future reference
          recaptchaContainer.setAttribute('data-widget-id', widgetId.toString());
          
        } catch (error) {
          console.error('🔍 [renderRecaptchaWidget] Failed to render reCAPTCHA widget:', error);
          this.summaryShared.showNotification(
            'Failed to load reCAPTCHA. Please refresh the page and try again.',
            'error'
          );
        }
      } else {
        console.log('🔍 [renderRecaptchaWidget] reCAPTCHA container not found');
      }
    }
  }

  // Initialize the coordinator
  new SummaryStepCoordinator();
</script>

<style>
  .step-content {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .duration-chip {
    cursor: pointer;
    user-select: none;
    transition: all 0.2s ease-in-out;
  }

  .duration-chip:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .duration-chip:active {
    transform: translateY(0);
  }

  .duration-chip.bg-mint-500 {
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
  }

  /* Pack cards styling for single row layout */
  .pack-card {
    width: 300px;
    min-width: 300px;
    flex-shrink: 0;
    height: 100%;
    min-height: 200px;
    margin-right: 2rem; /* 32px margin for better spacing */
    margin-bottom: 1rem; /* 16px bottom margin */
    transition: all 0.3s ease;
    border: 2px solid #e5e7eb; /* Default border */
  }

  .pack-card:last-child {
    margin-right: 0; /* Remove margin from last card */
  }

  /* Hover effects with proper border handling */
  .pack-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    border-color: #10b981; /* mint-500 color */
  }

  /* Selected state */
  .pack-card.border-mint-500 {
    border-color: #10b981;
    background-color: #f0fdf4; /* mint-50 */
  }

  .pack-card.border-mint-500:hover {
    border-color: #059669; /* mint-600 for hover */
  }

  /* Ensure pack cards have good spacing and readability */
  .pack-card .p-6 {
    padding: 1.5rem;
  }

  /* Improve text readability in pack cards */
  .pack-card h3 {
    font-size: 1.125rem;
    line-height: 1.5;
    margin-bottom: 0.5rem;
  }

  .pack-card p {
    font-size: 0.875rem;
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  /* Better spacing for pack card content */
  .pack-card .space-y-3 > * + * {
    margin-top: 0.75rem;
  }

  /* Smooth scrolling for horizontal overflow */
  .overflow-x-auto {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e0 #f7fafc;
  }

  .overflow-x-auto::-webkit-scrollbar {
    height: 6px;
  }

  .overflow-x-auto::-webkit-scrollbar-track {
    background: #f7fafc;
    border-radius: 3px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }

  /* Ensure remove button text is visible */
  #remove-pod-btn,
  #remove-pod-step2-btn,
  .remove-pod-btn,
  .remove-pack-btn,
  [data-action='remove'] {
    color: #4b5563 !important; /* text-gray-600 */
  }

  #remove-pod-btn:hover,
  #remove-pod-step2-btn:hover,
  .remove-pod-btn:hover,
  .remove-pack-btn:hover,
  [data-action='remove']:hover {
    color: #ef4444 !important; /* text-red-500 */
  }

  /* reCAPTCHA widget styling */
  .recaptcha-widget {
    margin: 1rem 0;
    text-align: center;
    min-height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .recaptcha-widget .g-recaptcha {
    display: inline-block;
  }

  /* Loading state for reCAPTCHA */
  .recaptcha-widget:empty::before {
    content: 'Loading reCAPTCHA...';
    color: #6b7280;
    font-size: 0.875rem;
  }
</style>
