---
// Step Coordinator Component - Using catalog as single source of truth
---

<div id="step-coordinator" class="w-full">
  <!-- Step content will be loaded here -->
</div>

<script>
  import { summaryShared } from '/src/utils/summaryShared.js';

  class SummaryStepCoordinator {
      constructor() {
    this.currentStep = 1;
    this.shared = summaryShared;
    this.currentEventListeners = [];
    this.init();
  }

    async init() {
      console.log('🔍 [SummaryStepCoordinator] Initializing...');
      
      // Initialize shared utilities (no longer depends on cartService)
      await this.shared.init();
      
      this.setupEventListeners();
      this.loadStep(this.currentStep);
      console.log('🔍 [SummaryStepCoordinator] Initialization complete');
    }

    setupEventListeners() {
      // Listen for step changes
      window.addEventListener('step-changed', (e) => {
        const newStep = e.detail.step;
        console.log('🔍 [StepCoordinator] Step coordinator received step change:', newStep);
        console.log('🔍 [StepCoordinator] Current step before change:', this.currentStep);
        
        if (newStep >= 1 && newStep <= 3) {
          this.currentStep = newStep;
          
          // Store current step in DOM element for shared utility to access
          const stepCoordinator = document.getElementById('step-coordinator');
          if (stepCoordinator) {
            stepCoordinator._currentStep = newStep;
          }
          
          console.log('🔍 [StepCoordinator] Loading step:', newStep);
          this.loadStep(newStep);
        } else {
          console.log('🔍 [StepCoordinator] Invalid step number:', newStep);
        }
      });
      
      // Listen for cart updates to refresh UI
      window.addEventListener('cart-updated', async (e) => {
        console.log('🔍 [CartUpdated] Event received, current step:', this.currentStep);
        
        if (this.currentStep === 1) {
          // Check if we still have a pod after the update
          const cart = await this.shared.getCart();
          const selectedPod = cart.find(item => item.type === 'pod');
          
          // Also check localStorage as fallback
          let localStoragePod = null;
          try {
            const localStorageCart = localStorage.getItem('novapod-cart');
            if (localStorageCart) {
              const parsedCart = JSON.parse(localStorageCart);
              localStoragePod = parsedCart.find(item => item.type === 'pod');
            }
          } catch (error) {
            // Ignore localStorage errors
          }
          
          if (selectedPod || localStoragePod) {
            // Still have a pod, show selected pod
            const podToShow = selectedPod || localStoragePod;
            console.log('🔍 [CartUpdated] Step 1 - Showing selected pod:', podToShow);
            this.showSelectedPod(podToShow);
          } else {
            // No pod, show available pods
            console.log('🔍 [CartUpdated] Step 1 - Showing available pods');
            this.showAvailablePods();
          }
        } else if (this.currentStep === 2) {
          // Update Step 2 pod summary if cart was updated
          const cart = await this.shared.getCart();
          const selectedPod = cart.find(item => item.type === 'pod');
          
          if (selectedPod) {
            console.log('🔍 [CartUpdated] Step 2 - Updating pod summary with:', selectedPod);
            this.updatePodSummary(selectedPod);
          }
        }
      });
      
      // Global pack action handler - only added once
      document.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        
        // Handle pack add/remove buttons
        if (target && target.matches('button[data-pack-id]')) {
          e.preventDefault();
          e.stopPropagation();
          
          const packId = target.getAttribute('data-pack-id');
          const action = target.getAttribute('data-action');
          
          console.log('🔍 [Global] Pack action:', action, 'for pack:', packId);
          
          // Add a small delay to prevent rapid clicks
          if (target.disabled) {
            console.log('🔍 [Global] Button already processing, ignoring click');
            return;
          }
          
          target.disabled = true;
          
          try {
            if (action === 'add') {
              // Check if pod exists before adding pack
              const hasPod = await this.shared.hasPod();
              if (!hasPod) {
                this.shared.showNotification('Please select a NovaPod first to add packs', 'warning');
                return;
              }
              await this.shared.addPack(packId);
            } else if (action === 'remove') {
              await this.shared.removePack(packId);
            }
            
            // Reload packs to update UI if we're on Step 2
            if (this.currentStep === 2) {
              const cart = await this.shared.getCart();
              const selectedPod = cart.find(item => item.type === 'pod');
              if (selectedPod) {
                await this.loadPacksForStep2(selectedPod);
              }
              
              // Update selected packs display
              this.updateSelectedPacksDisplay();
            }
          } finally {
            // Re-enable button after a short delay
            setTimeout(() => {
              target.disabled = false;
            }, 500);
          }
        }
        
        // Handle delete pack buttons
        const deleteBtn = target.closest('.delete-pack-btn') as HTMLElement;
        if (deleteBtn) {
          e.preventDefault();
          e.stopPropagation();
          
          const packId = deleteBtn.getAttribute('data-pack-id');
          if (packId) {
            console.log('🔍 [Global] Deleting pack:', packId);
            await this.shared.removePack(packId);
            
            // Refresh the packs display if we're on Step 2
            if (this.currentStep === 2) {
              this.updateSelectedPacksDisplay();
              // Also refresh the available packs to update their state
              const cart = await this.shared.getCart();
              const selectedPod = cart.find(item => item.type === 'pod');
              if (selectedPod) {
                await this.loadPacksForStep2(selectedPod);
              }
            }
          }
        }
      });
    }

    async loadStep(step) {
      console.log('🔍 [loadStep] Loading step:', step);
      const coordinator = document.getElementById('step-coordinator');
      if (!coordinator) {
        console.error('🔍 [loadStep] Step coordinator element not found');
        return;
      }

      // Clean up existing event listeners before loading new step
      this.cleanupEventListeners();

      switch (step) {
        case 1:
          console.log('🔍 [loadStep] Loading Step 1');
          await this.loadStep1();
          break;
        case 2:
          console.log('🔍 [loadStep] Loading Step 2');
          await this.loadStep2();
          break;
        case 3:
          console.log('🔍 [loadStep] Loading Step 3');
          await this.loadStep3();
          break;
        default:
          console.error('🔍 [loadStep] Unknown step:', step);
      }
    }

    cleanupEventListeners() {
      console.log('🔍 [cleanupEventListeners] Cleaning up event listeners');
      // Store references to event listeners so we can remove them
      if (this.currentEventListeners) {
        this.currentEventListeners.forEach(listener => {
          document.removeEventListener('click', listener);
        });
      }
      this.currentEventListeners = [];
    }

    async loadStep1() {
      const coordinator = document.getElementById('step-coordinator');
      coordinator.innerHTML = `
        <div id="step-1-content" class="step-content">
          <!-- Content will be dynamically loaded based on cart state -->
        </div>
      `;

      await this.initializeStep1();
    }

    async loadStep2() {
      const coordinator = document.getElementById('step-coordinator');
      coordinator.innerHTML = `
        <div id="step-2-content" class="step-content">
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Enhance Your Pod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Add recommended packs to maximize your NovaPod's potential. These add-ons are carefully selected to complement your chosen pod.
            </p>
          </div>

          <!-- Selected Pod Summary -->
          <div id="pod-summary" class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-2xl p-6 mb-8 border border-mint-200">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-4">
                <div class="w-12 h-12 bg-mint-500 rounded-lg flex items-center justify-center">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <div>
                  <h3 id="summary-pod-title" class="text-lg font-semibold text-graphite-900">Your Pod</h3>
                  <p id="summary-pod-price" class="text-mint-600 font-medium">₹0/month</p>
                  <p id="summary-pod-months" class="text-sm text-graphite-600">Reservation Period: <span class="font-medium">Loading...</span></p>
                </div>
              </div>
              <div class="flex items-center space-x-3">
                <button id="edit-pod-btn" class="text-sm text-mint-600 hover:text-mint-700 font-medium">
                  Edit Pod
                </button>
                <button id="remove-pod-step2-btn" class="text-red-600 hover:text-red-700 p-2 rounded-lg hover:bg-red-50 transition-colors" title="Remove Pod">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Selected Packs Section -->
          <div id="selected-packs-section" class="bg-white rounded-2xl p-6 mb-8 border border-gray-200 shadow-sm">
            <h3 class="text-lg font-semibold text-graphite-900 mb-4">Selected Packs</h3>
            <div id="selected-packs-list" class="space-y-3">
              ${this.renderSelectedPacksWithDelete()}
            </div>
          </div>

          <!-- Packs Section -->
          <div class="mb-8">
            <h3 id="packs-section-title" class="text-xl font-semibold text-graphite-900 mb-6">Available Packs</h3>
            <div id="packs-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <!-- Packs will be dynamically loaded here -->
            </div>
          </div>

          <!-- Navigation -->
          <div class="flex justify-end items-center pt-8 border-t border-gray-200">
            <button id="step2-continue-btn" class="bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-3 px-8 rounded-lg font-semibold hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105">
              Continue
            </button>
          </div>
        </div>
      `;

      await this.initializeStep2();
    }

    async loadStep3() {
      console.log('🔍 [loadStep3] Starting Step 3 load');
      const coordinator = document.getElementById('step-coordinator');
      if (!coordinator) {
        console.error('🔍 [loadStep3] Step coordinator element not found');
        return;
      }
      
      coordinator.innerHTML = `
        <div id="step-3-content" class="step-content">
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Reserve Your NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Complete your reservation by providing your contact information. We'll get back to you within 24 hours.
            </p>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <!-- Order Summary -->
            <div class="lg:order-2">
              <div class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-2xl p-8 border border-mint-200">
                <h3 class="text-2xl font-bold text-graphite-900 mb-6">Order Summary</h3>
                
                <!-- Pod Summary -->
                <div id="final-pod-summary" class="mb-6 p-4 bg-white rounded-lg">
                  <div class="flex items-center justify-between">
                    <div>
                      <h4 id="final-pod-title" class="font-semibold text-graphite-900">Selected Pod</h4>
                      <p id="final-pod-duration" class="text-sm text-graphite-600">3 months</p>
                    </div>
                    <p id="final-pod-price" class="font-bold text-mint-600">₹0/month</p>
                  </div>
                </div>

                <!-- Packs Summary -->
                <div id="final-packs-summary" class="mb-6">
                  <h4 class="font-semibold text-graphite-900 mb-3">Selected Packs</h4>
                  <div id="final-packs-list" class="space-y-2">
                    <!-- Packs will be listed here -->
                  </div>
                </div>

                <!-- Total -->
                <div class="pt-4 border-t border-mint-200">
                  <div class="flex items-center justify-between">
                    <span class="text-lg font-semibold text-graphite-900">Total</span>
                    <span id="total-price" class="text-2xl font-bold text-mint-600">₹0</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Contact Form -->
            <div class="lg:order-1">
              <form id="reservation-form" class="space-y-6">
                <div>
                  <label for="name" class="block text-sm font-medium text-graphite-700 mb-2">Full Name *</label>
                  <input type="text" id="name" name="name" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="email" class="block text-sm font-medium text-graphite-700 mb-2">Email Address *</label>
                  <input type="email" id="email" name="email" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="phone" class="block text-sm font-medium text-graphite-700 mb-2">Phone Number</label>
                  <input type="tel" id="phone" name="phone" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="company" class="block text-sm font-medium text-graphite-700 mb-2">Company Name</label>
                  <input type="text" id="company" name="company" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors">
                </div>
                
                <div>
                  <label for="message" class="block text-sm font-medium text-graphite-700 mb-2">Additional Requirements</label>
                  <textarea id="message" name="message" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-colors" placeholder="Tell us about your project requirements, timeline, or any specific needs..."></textarea>
                </div>
                
                <button type="submit" class="w-full bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-4 px-8 rounded-xl font-semibold text-lg hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105 shadow-lg">
                  Reserve My NovaPod
                </button>
              </form>
            </div>
          </div>

          <!-- Navigation removed - no back button in Step 3 -->
        </div>
        </div>
      `;

      await this.initializeStep3();
    }

    async initializeStep1() {
      console.log('🔍 [initializeStep1] Starting initialization...');
      
      // Get cart data from localStorage (single source of truth)
      let cart = [];
      let selectedPod = null;
      
      try {
        // Try shared.getCart() first
        cart = await this.shared.getCart();
        console.log('🔍 [initializeStep1] Cart from shared.getCart():', cart);
        selectedPod = cart.find(item => item.type === 'pod');
        console.log('🔍 [initializeStep1] Selected pod from shared.getCart():', selectedPod);
      } catch (error) {
        console.error('🔍 [initializeStep1] Error with shared.getCart():', error);
      }
      
      // Fallback: Direct localStorage check
      if (!selectedPod) {
        try {
          const localStorageCart = localStorage.getItem('novapod-cart');
          console.log('🔍 [initializeStep1] Direct localStorage value:', localStorageCart);
          
          if (localStorageCart) {
            const parsedCart = JSON.parse(localStorageCart);
            console.log('🔍 [initializeStep1] Parsed localStorage cart:', parsedCart);
            selectedPod = parsedCart.find(item => item.type === 'pod');
            console.log('🔍 [initializeStep1] Selected pod from direct localStorage:', selectedPod);
          }
        } catch (error) {
          console.error('🔍 [initializeStep1] Error reading direct localStorage:', error);
        }
      }
      
      if (selectedPod) {
        // Show selected pod
        console.log('🔍 [initializeStep1] Showing selected pod:', selectedPod);
        this.showSelectedPod(selectedPod);
      } else {
        // Show available pods
        console.log('🔍 [initializeStep1] No pod found, showing available pods');
        this.showAvailablePods();
      }
      
      this.addStep1EventListeners();
      console.log('🔍 [initializeStep1] Initialization complete');
    }

    async initializeStep2() {
      console.log('🔍 [initializeStep2] Starting initialization...');
      
      // Get cart data from localStorage (single source of truth)
      const cart = await this.shared.getCart();
      const selectedPod = cart.find(item => item.type === 'pod');
      console.log('🔍 [initializeStep2] Cart from localStorage:', cart);
      console.log('🔍 [initializeStep2] Selected pod:', selectedPod);
      console.log('🔍 [initializeStep2] Selected pod reservationMonths:', selectedPod?.reservationMonths);
      
      if (selectedPod) {
        // Update the pod summary display
        console.log('🔍 [initializeStep2] Calling updatePodSummary...');
        this.updatePodSummary(selectedPod);
        // Load packs for the selected pod
        await this.loadPacksForStep2(selectedPod);
        // Update selected packs display
        this.updateSelectedPacksDisplay();
      } else {
        console.log('🔍 [initializeStep2] No pod found, redirecting to Step 1');
        this.shared.showNotification('Please select a NovaPod first to proceed', 'warning');
        // Navigate back to Step 1
        this.shared.navigateToStep(1);
        return;
      }
      
      this.addStep2EventListeners();
      console.log('🔍 [initializeStep2] Initialization complete');
    }

    async initializeStep3() {
      console.log('🔍 Initializing Step 3...');
      const cart = await this.shared.getCart();
      const selectedPod = cart.find(item => item.type === 'pod');
      const selectedPacks = cart.filter(item => item.type === 'pack');
      
      console.log('🔍 Step 3 - Selected pod:', selectedPod);
      console.log('🔍 Step 3 - Selected packs:', selectedPacks);
      
      if (selectedPod) {
        this.updateFinalSummary(selectedPod, selectedPacks);
      } else {
        console.log('🔍 [initializeStep3] No pod found, redirecting to Step 1');
        this.shared.showNotification('Please select a NovaPod first to proceed', 'warning');
        // Navigate back to Step 1
        this.shared.navigateToStep(1);
        return;
      }
      
      this.addStep3EventListeners();
      console.log('🔍 Step 3 initialization complete');
    }

    async showSelectedPod(podItem) {
      const step1Content = document.getElementById('step-1-content');
      
      if (step1Content) {
        // Replace the entire step 1 content with selected pod display
        step1Content.innerHTML = `
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Your Selected NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Review your selected pod and customize your reservation period.
            </p>
          </div>

          <!-- Selected Pod Display -->
          <div class="max-w-2xl mx-auto mb-8">
            <div class="bg-gradient-to-br from-mint-50 to-cerulean-50 rounded-2xl p-8 border border-mint-200">
              <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-4">
                  <div class="w-16 h-16 bg-mint-500 rounded-xl flex items-center justify-center">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 id="selected-pod-title" class="text-xl font-semibold text-graphite-900">${podItem.title || 'Selected Pod'}</h3>
                    <p id="selected-pod-description" class="text-graphite-600">${podItem.description || 'Pod description'}</p>
                    <p id="selected-pod-months" class="text-sm text-graphite-600">Reservation Period: <span class="font-medium">${podItem.reservationMonths || 3} Month${(podItem.reservationMonths || 3) > 1 ? 's' : ''}</span></p>
                  </div>
                </div>
                <div class="text-right">
                  <p id="selected-pod-price" class="text-2xl font-bold text-mint-600">${podItem.price || '₹0/month'}</p>
                  <button id="change-pod-btn" class="text-sm text-mint-600 hover:text-mint-700 font-medium">
                    Change Pod
                  </button>
                </div>
              </div>
              
              <!-- Hire Period Selection -->
              <div class="mb-6 pt-6 border-t border-mint-200">
                <label class="block text-sm font-medium text-graphite-700 mb-3">Reservation Period</label>
                
                <!-- Custom Dropdown -->
                <div class="relative w-full max-w-xs">
                  <button 
                    id="hire-period-dropdown-btn" 
                    class="w-full px-4 py-3 bg-white border border-gray-300 rounded-xl text-left focus:ring-2 focus:ring-mint-500 focus:border-mint-500 transition-all duration-200 hover:border-mint-400 flex items-center justify-between shadow-sm"
                    data-selected="${podItem.reservationMonths || 3}"
                  >
                    <span id="hire-period-display" class="text-graphite-900 font-medium">
                      ${podItem.reservationMonths || 3} Month${(podItem.reservationMonths || 3) > 1 ? 's' : ''}
                    </span>
                    <svg class="w-5 h-5 text-graphite-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </button>
                  
                  <!-- Dropdown Options -->
                  <div id="hire-period-options" class="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-xl shadow-lg opacity-0 invisible transition-all duration-200 transform scale-95 origin-top">
                    <div class="py-2">
                      <button 
                        class="w-full px-4 py-3 text-left hover:bg-mint-50 transition-colors duration-150 flex items-center justify-between ${(podItem.reservationMonths || 3) === 1 ? 'bg-mint-100 text-mint-700 font-medium' : 'text-graphite-700'}"
                        data-value="1"
                      >
                        <span>1 Month</span>
                        ${(podItem.reservationMonths || 3) === 1 ? '<svg class="w-5 h-5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' : ''}
                      </button>
                      <button 
                        class="w-full px-4 py-3 text-left hover:bg-mint-50 transition-colors duration-150 flex items-center justify-between ${(podItem.reservationMonths || 3) === 3 ? 'bg-mint-100 text-mint-700 font-medium' : 'text-graphite-700'}"
                        data-value="3"
                      >
                        <span>3 Months</span>
                        ${(podItem.reservationMonths || 3) === 3 ? '<svg class="w-5 h-5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' : ''}
                      </button>
                      <button 
                        class="w-full px-4 py-3 text-left hover:bg-mint-50 transition-colors duration-150 flex items-center justify-between ${(podItem.reservationMonths || 3) === 6 ? 'bg-mint-100 text-mint-700 font-medium' : 'text-graphite-700'}"
                        data-value="6"
                      >
                        <span>6 Months</span>
                        ${(podItem.reservationMonths || 3) === 6 ? '<svg class="w-5 h-5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' : ''}
                      </button>
                      <button 
                        class="w-full px-4 py-3 text-left hover:bg-mint-50 transition-colors duration-150 flex items-center justify-between ${(podItem.reservationMonths || 3) === 12 ? 'bg-mint-100 text-mint-700 font-medium' : 'text-graphite-700'}"
                        data-value="12"
                      >
                        <span>12 Months</span>
                        ${(podItem.reservationMonths || 3) === 12 ? '<svg class="w-5 h-5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' : ''}
                      </button>
                    </div>
                  </div>
                </div>
                
                <p class="text-sm text-graphite-500 mt-2">Select how long you'd like to reserve this pod</p>
              </div>

              <!-- Pod Details -->
              <div class="mb-6 pt-6 border-t border-mint-200">
                <h4 class="text-sm font-semibold text-graphite-800 mb-3">What's Included</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                    <span class="text-sm text-graphite-700">Dedicated Team</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                    <span class="text-sm text-graphite-700">Full-time Availability</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                    <span class="text-sm text-graphite-700">Project Management</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                    <span class="text-sm text-graphite-700">Quality Assurance</span>
                  </div>
                </div>
              </div>



              <!-- Action Buttons -->
              <div class="space-y-3">
                <button id="step1-continue-btn" class="w-full bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-4 px-8 rounded-xl font-semibold text-lg hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105 shadow-lg">
                  Continue to Step 2
                </button>
                <button id="remove-pod-btn" class="w-full bg-red-500 text-white py-3 px-6 rounded-lg font-medium hover:bg-red-600 transition-all duration-300 transform hover:scale-105 flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  <span>Remove Pod</span>
                </button>
              </div>
            </div>
          </div>
        `;
      }
    }

    async showAvailablePods() {
      const step1Content = document.getElementById('step-1-content');
      
      if (step1Content) {
        // Show the original "Choose Your NovaPod" section
        step1Content.innerHTML = `
          <div class="text-center mb-12">
            <h2 class="text-3xl lg:text-4xl font-bold text-graphite-900 mb-4 gradient-title">
              Choose Your NovaPod
            </h2>
            <p class="text-lg text-graphite-700 max-w-2xl mx-auto">
              Select the perfect NovaPod solution for your business needs. Each pod is designed to deliver exceptional results.
            </p>
          </div>

          <!-- Available Pods Grid -->
          <div id="available-pods-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Pods will be dynamically loaded here -->
          </div>
        `;
        
        await this.loadAvailablePods();
      }
    }

    async loadAvailablePods() {
      const pods = await this.shared.loadPods();
      const grid = document.getElementById('available-pods-grid');
      
      if (!grid) return;
      
      grid.innerHTML = pods.map(pod => `
        <div class="bg-white rounded-2xl p-6 border border-gray-200 hover:border-mint-300 transition-all duration-300 hover:shadow-lg flex flex-col h-full">
          <!-- Header with icon and title -->
          <div class="flex items-center space-x-4 mb-4">
            <div class="w-12 h-12 bg-mint-500 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <div class="flex-1 min-w-0">
              <h3 class="text-xl font-semibold text-graphite-900 truncate">${pod.name}</h3>
            </div>
          </div>
          
          <!-- Description -->
          <p class="text-graphite-600 mb-4 flex-1">${pod.tagline}</p>
          
          <!-- Ideal for section -->
          <div class="space-y-2 mb-4">
            <h4 class="text-sm font-medium text-graphite-700">Ideal for:</h4>
            <ul class="text-sm text-graphite-600 space-y-1">
              ${pod.idealFor ? pod.idealFor.slice(0, 2).map(item => `<li>• ${item}</li>`).join('') : ''}
            </ul>
          </div>
          
          <!-- Pricing - positioned above button -->
          <div class="mb-4">
            <span class="text-lg font-bold text-mint-600">${pod.pricing ? pod.pricing[0] : 'Contact Us'}</span>
          </div>
          
          <!-- CTA Button - always at bottom -->
          <button class="w-full bg-gradient-to-r from-mint-500 to-cerulean-500 text-white py-3 px-6 rounded-lg font-semibold hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 transform hover:scale-105 mt-auto" data-pod-id="${pod.id}">
            Reserve Pod
          </button>
        </div>
      `).join('');
    }

    async loadPacksForStep2(podItem) {
      const packs = await this.shared.loadRecommendedPacks(podItem);
      const grid = document.getElementById('packs-grid');
      const title = document.getElementById('packs-section-title');
      
      if (!grid) return;
      
      if (packs.length === 0) {
        title.textContent = 'No Packs Available';
        grid.innerHTML = '<p class="text-graphite-600 col-span-full text-center py-8">No packs are currently available for this pod.</p>';
        return;
      }
      
      // Get all available packs for tabs
      const allPacks = await this.shared.loadAllPacks();
      const categories = this.shared.getPackCategories();
      
      title.textContent = 'Available Packs';
      
      // Create tabbed interface
      grid.innerHTML = `
        <div class="col-span-full mb-6">
          <!-- Tab Navigation -->
          <div class="flex flex-wrap gap-2 mb-6">
            <button class="tab-btn active px-4 py-2 rounded-lg font-medium transition-colors bg-mint-500 text-white" data-tab="recommended">
              Recommended (${packs.length})
            </button>
            ${categories.map(category => `
              <button class="tab-btn px-4 py-2 rounded-lg font-medium transition-colors bg-gray-100 text-gray-700 hover:bg-gray-200" data-tab="${category.id}">
                ${category.title} (${category.packs.length})
              </button>
            `).join('')}
          </div>
          
          <!-- Tab Content -->
          <div class="tab-content">
            <!-- Recommended Packs Tab -->
            <div id="tab-recommended" class="tab-pane active">
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                ${packs.map(pack => this.renderPackCard(pack)).join('')}
              </div>
            </div>
            
            <!-- Category Tabs -->
            ${categories.map(category => `
              <div id="tab-${category.id}" class="tab-pane hidden">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  ${category.packs.map(pack => this.renderPackCard(pack)).join('')}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
      
      // Add tab functionality
      this.addTabListeners();
    }

    renderPackCard(pack) {
      // Check if pack is already in cart
      const cart = this.getCurrentCart();
      const isAdded = cart.some(item => item.id === pack.id && item.type === 'pack');
      
      return `
        <div class="bg-white rounded-2xl p-6 border border-gray-200 hover:border-cerulean-300 transition-all duration-300 hover:shadow-lg ${isAdded ? 'ring-2 ring-cerulean-500' : ''}">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-cerulean-500 rounded-lg flex items-center justify-center">
                <span class="text-white text-lg">${pack.icon || '📦'}</span>
              </div>
              ${pack.badge ? `<span class="px-2 py-1 text-xs font-medium rounded-full ${pack.badgeColor === 'green' ? 'bg-green-100 text-green-800' : pack.badgeColor === 'blue' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}">${pack.badge}</span>` : ''}
            </div>
            <span class="text-sm font-medium text-cerulean-600">${pack.priceINR}</span>
          </div>
          
          <h3 class="text-lg font-semibold text-graphite-900 mb-2">${pack.title}</h3>
          <p class="text-graphite-600 mb-4">${pack.description}</p>
          
          <div class="flex items-center justify-between">
            <span class="text-sm text-graphite-500">${pack.duration}</span>
            <button class="px-4 py-2 rounded-lg font-medium transition-all duration-300 ${isAdded ? 'bg-red-500 text-white hover:bg-red-600' : 'bg-cerulean-500 text-white hover:bg-cerulean-600'}" data-pack-id="${pack.id}" data-action="${isAdded ? 'remove' : 'add'}">
              ${isAdded ? 'Remove' : 'Add Pack'}
            </button>
          </div>
        </div>
      `;
    }

    getCurrentCart() {
      try {
        const cartData = localStorage.getItem('novapod-cart');
        return cartData ? JSON.parse(cartData) : [];
      } catch (error) {
        console.error('Error reading cart from localStorage:', error);
        return [];
      }
    }

    renderSelectedPacks() {
      const cart = this.getCurrentCart();
      const selectedPacks = cart.filter(item => item.type === 'pack');
      
      if (selectedPacks.length === 0) {
        return `
          <div class="text-center py-4">
            <p class="text-sm text-graphite-500">No packs selected yet</p>
            <p class="text-xs text-graphite-400 mt-1">Add packs in Step 2 to enhance your pod</p>
          </div>
        `;
      }
      
      return selectedPacks.map(pack => `
        <div class="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-cerulean-500 rounded-lg flex items-center justify-center">
              <span class="text-white text-sm">📦</span>
            </div>
            <div>
              <span class="font-medium text-graphite-900 text-sm">${pack.title || 'Pack'}</span>
              <p class="text-xs text-graphite-500">${pack.description || 'Pack description'}</p>
            </div>
          </div>
          <span class="font-semibold text-cerulean-600 text-sm">${pack.price || '₹0'}</span>
        </div>
      `).join('');
    }

    renderSelectedPacksWithDelete() {
      const cart = this.getCurrentCart();
      const selectedPacks = cart.filter(item => item.type === 'pack');
      
      if (selectedPacks.length === 0) {
        return `
          <div class="text-center py-6">
            <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
              <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
              </svg>
            </div>
            <p class="text-sm text-graphite-500">No packs selected yet</p>
            <p class="text-xs text-graphite-400 mt-1">Browse and add packs below to enhance your pod</p>
          </div>
        `;
      }
      
      return selectedPacks.map(pack => `
        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-cerulean-500 rounded-lg flex items-center justify-center">
              <span class="text-white text-sm">📦</span>
            </div>
            <div>
              <span class="font-medium text-graphite-900">${pack.title || 'Pack'}</span>
              <p class="text-sm text-graphite-600">${pack.description || 'Pack description'}</p>
            </div>
          </div>
          <div class="flex items-center space-x-3">
            <span class="font-semibold text-cerulean-600">${pack.price || '₹0'}</span>
            <button 
              class="delete-pack-btn p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors" 
              data-pack-id="${pack.id}" 
              title="Remove pack"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      `).join('');
    }

    updateSelectedPacksDisplay() {
      const selectedPacksList = document.getElementById('selected-packs-list');
      if (selectedPacksList) {
        selectedPacksList.innerHTML = this.renderSelectedPacksWithDelete();
        // Event listeners are now handled by event delegation in addStep2EventListeners
      }
    }



    addTabListeners() {
      const tabButtons = document.querySelectorAll('.tab-btn');
      const tabPanes = document.querySelectorAll('.tab-pane');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.getAttribute('data-tab');
          
          // Update active tab button
          tabButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-mint-500', 'text-white');
            btn.classList.add('bg-gray-100', 'text-gray-700');
          });
          button.classList.add('active', 'bg-mint-500', 'text-white');
          button.classList.remove('bg-gray-100', 'text-gray-700');
          
          // Update active tab pane
          tabPanes.forEach(pane => {
            pane.classList.remove('active');
            pane.classList.add('hidden');
          });
          
          const targetPane = document.getElementById(`tab-${targetTab}`);
          if (targetPane) {
            targetPane.classList.add('active');
            targetPane.classList.remove('hidden');
          }
        });
      });
    }

    showNoPodWarning() {
      const grid = document.getElementById('packs-grid');
      const title = document.getElementById('packs-section-title');
      
      if (title) title.textContent = 'No Pod Selected';
      if (grid) {
        grid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <div class="bg-yellow-50 border border-yellow-200 rounded-2xl p-8">
              <svg class="w-16 h-16 text-yellow-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <h3 class="text-xl font-semibold text-yellow-800 mb-2">No Pod Selected</h3>
              <p class="text-yellow-700 mb-4">Please go back to step 1 and select a pod before adding packs.</p>
              <button id="go-to-step1-btn" class="bg-yellow-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-yellow-600 transition-colors">
                Go to Step 1
              </button>
            </div>
          </div>
        `;
      }
    }

    updatePodSummary(podItem) {
      console.log('🔍 [updatePodSummary] Called with podItem:', podItem);
      
      // Double-check the latest data from storage
      let latestPodItem = podItem;
      try {
        const localStorageCart = localStorage.getItem('novapod-cart');
        if (localStorageCart) {
          const parsedCart = JSON.parse(localStorageCart);
          const storagePod = parsedCart.find(item => item.type === 'pod');
          if (storagePod && storagePod.id === podItem.id) {
            latestPodItem = storagePod;
            console.log('🔍 [updatePodSummary] Found updated pod in localStorage:', latestPodItem);
          }
        }
      } catch (error) {
        console.error('🔍 [updatePodSummary] Error reading localStorage:', error);
      }
      
      this.shared.updatePodSummary(latestPodItem, {
        titleSelector: '#summary-pod-title',
        priceSelector: '#summary-pod-price'
      });
      
      // Update the months display
      const monthsElement = document.getElementById('summary-pod-months');
      console.log('🔍 [updatePodSummary] monthsElement found:', !!monthsElement);
      
      if (monthsElement) {
        const months = latestPodItem.reservationMonths || 3;
        console.log('🔍 [updatePodSummary] Using months:', months, 'from latestPodItem.reservationMonths:', latestPodItem.reservationMonths);
        monthsElement.innerHTML = `Reservation Period: <span class="font-medium">${months} Month${months > 1 ? 's' : ''}</span>`;
        console.log('🔍 [updatePodSummary] Updated months display');
      }
    }

    updateFinalSummary(podItem, packItems) {
      this.shared.updatePodSummary(podItem, {
        titleSelector: '#final-pod-title',
        priceSelector: '#final-pod-price',
        descriptionSelector: '#final-pod-duration'
      });

      const packsList = document.getElementById('final-packs-list');
      if (packsList) {
        if (packItems.length === 0) {
          packsList.innerHTML = '<p class="text-graphite-500 text-sm">No packs selected</p>';
        } else {
          packsList.innerHTML = packItems.map(pack => `
            <div class="flex items-center justify-between p-3 bg-white rounded-lg">
              <div class="flex items-center space-x-3">
                <div class="w-8 h-8 bg-cerulean-500 rounded-lg flex items-center justify-center">
                  <span class="text-white text-sm">${pack.icon || '📦'}</span>
                </div>
                <span class="font-medium text-graphite-900">${pack.title}</span>
              </div>
              <span class="font-semibold text-cerulean-600">${pack.priceINR}</span>
            </div>
          `).join('');
        }
      }

      this.shared.updateTotalPrice(podItem, packItems);
    }

    addStep1EventListeners() {
      // Pod selection with replacement confirmation
      document.addEventListener('click', async (e) => {
        if (e.target && e.target.matches('[data-pod-id]')) {
          const podId = e.target.getAttribute('data-pod-id');
          const selectedPod = await this.shared.selectPodWithConfirmation(podId);
          if (selectedPod) {
            await this.showSelectedPod(selectedPod);
          }
        }
      });

      // Handle data-add-to-cart buttons in summary page
      document.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        if (target && target.matches('[data-add-to-cart]')) {
          e.preventDefault();
          e.stopPropagation();
          
          const addToCartBtn = target;
          const itemId = addToCartBtn.getAttribute('data-item-id');
          const itemType = addToCartBtn.getAttribute('data-item-type');
          const itemTitle = addToCartBtn.getAttribute('data-item-title');
          const itemDescription = addToCartBtn.getAttribute('data-item-description');
          const itemPrice = addToCartBtn.getAttribute('data-item-price');
          
          if (itemId && itemType) {
            const cartItem = {
              id: itemId,
              type: itemType,
              title: itemTitle || '',
              description: itemDescription || '',
              price: itemPrice || '',
              reservationMonths: itemType === 'pod' ? 3 : undefined
            };
            
            // Add to cart using the shared cart service
            const success = await this.shared.addToCart(cartItem);
            if (success) {
              // Show notification
              this.shared.showNotification(`Added ${itemTitle || 'Item'} to cart!`);
              
              // Refresh the current step to show updated cart
              await this.loadStep(this.currentStep);
            }
          }
        }
      });

      // Change pod button
      document.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        if (target && target.matches('#change-pod-btn')) {
          console.log('🔍 Change pod button clicked');
          await this.showAvailablePods();
        }
      });

      // Remove pod button - using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        const removeBtn = target.closest('#remove-pod-btn') as HTMLElement;
        
        if (removeBtn) {
          console.log('🔍 [Step1] Remove pod button clicked');
          e.preventDefault();
          e.stopPropagation();
          await this.shared.removePod();
          // Immediately show available pods after removing
          await this.showAvailablePods();
        }
      });

      // Start journey button (Step 1 only)
      document.addEventListener('click', async (e) => {
        if (e.target && e.target.matches('#step1-continue-btn') && this.currentStep === 1) {
          console.log('🔍 [Step1] Continue to Step 2 button clicked');
          console.log('🔍 [Step1] Current step before nextStep():', this.currentStep);
          console.log('🔍 [Step1] About to call nextStep()');
          this.shared.nextStep();
          console.log('🔍 [Step1] nextStep() called');
        } else if (e.target && e.target.matches('#step1-continue-btn')) {
          console.log('🔍 [Step1] Continue button clicked but ignored - not in Step 1 (current step:', this.currentStep, ')');
        }
      });

      // Custom dropdown functionality
      const dropdownBtn = document.getElementById('hire-period-dropdown-btn');
      const dropdownOptions = document.getElementById('hire-period-options');
      
      if (dropdownBtn && dropdownOptions) {
        // Toggle dropdown
        dropdownBtn.addEventListener('click', (e) => {
          e.preventDefault();
          const isOpen = dropdownOptions.classList.contains('opacity-100');
          
          if (isOpen) {
            // Close dropdown
            dropdownOptions.classList.remove('opacity-100', 'visible', 'scale-100');
            dropdownOptions.classList.add('opacity-0', 'invisible', 'scale-95');
            dropdownBtn.querySelector('svg').classList.remove('rotate-180');
          } else {
            // Open dropdown
            dropdownOptions.classList.remove('opacity-0', 'invisible', 'scale-95');
            dropdownOptions.classList.add('opacity-100', 'visible', 'scale-100');
            dropdownBtn.querySelector('svg').classList.add('rotate-180');
          }
        });
        
        // Handle option selection
        dropdownOptions.addEventListener('click', async (e) => {
          const target = e.target as HTMLElement;
          const optionBtn = target.closest('button[data-value]') as HTMLElement;
          
          if (optionBtn) {
            const months = parseInt(optionBtn.getAttribute('data-value'));
            console.log('🔍 [Step1] Custom dropdown option selected:', months);
            
            // Update the display
            const displayElement = document.getElementById('hire-period-display');
            if (displayElement) {
              displayElement.textContent = `${months} Month${months > 1 ? 's' : ''}`;
            }
            
            // Update the selected state
            dropdownBtn.setAttribute('data-selected', months.toString());
            
            // Update all option buttons
            const allOptions = dropdownOptions.querySelectorAll('button[data-value]');
            allOptions.forEach(option => {
              const optionValue = parseInt(option.getAttribute('data-value'));
              if (optionValue === months) {
                option.classList.add('bg-mint-100', 'text-mint-700', 'font-medium');
                option.classList.remove('text-graphite-700');
                // Add checkmark
                option.innerHTML = `<span>${option.textContent.split('<')[0]}</span><svg class="w-5 h-5 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>`;
              } else {
                option.classList.remove('bg-mint-100', 'text-mint-700', 'font-medium');
                option.classList.add('text-graphite-700');
                // Remove checkmark
                option.innerHTML = `<span>${option.textContent.split('<')[0]}</span>`;
              }
            });
            
            // Close dropdown
            dropdownOptions.classList.remove('opacity-100', 'visible', 'scale-100');
            dropdownOptions.classList.add('opacity-0', 'invisible', 'scale-95');
            dropdownBtn.querySelector('svg').classList.remove('rotate-180');
            
            // Update storage
            console.log('🔍 [Step1] Calling updateHirePeriod...');
            await this.shared.updateHirePeriod(months);
            console.log('🔍 [Step1] updateHirePeriod completed');
            
            // Update the months display in Step 1
            const monthsDisplay = document.getElementById('selected-pod-months');
            if (monthsDisplay) {
              monthsDisplay.innerHTML = `Reservation Period: <span class="font-medium">${months} Month${months > 1 ? 's' : ''}</span>`;
              console.log('🔍 [Step1] Updated months display in Step 1');
            }
            
            // Also verify the storage was updated
            try {
              const localStorageCart = localStorage.getItem('novapod-cart');
              if (localStorageCart) {
                const parsedCart = JSON.parse(localStorageCart);
                const pod = parsedCart.find(item => item.type === 'pod');
                console.log('🔍 [Step1] Pod in localStorage after update:', pod);
              }
            } catch (error) {
              console.error('🔍 [Step1] Error checking localStorage:', error);
            }
          }
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
          if (!dropdownBtn.contains(e.target as Node) && !dropdownOptions.contains(e.target as Node)) {
            dropdownOptions.classList.remove('opacity-100', 'visible', 'scale-100');
            dropdownOptions.classList.add('opacity-0', 'invisible', 'scale-95');
            dropdownBtn.querySelector('svg').classList.remove('rotate-180');
          }
        });
      }
    }

    addStep2EventListeners() {
      console.log('🔍 [Step2] Adding event listeners...');
      
      // Pack event listeners are now handled globally in setupEventListeners()
      // Only add Step 2 specific listeners here

      // Edit pod button
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target && target.matches('#edit-pod-btn')) {
          this.shared.navigateToStep(1);
        }
      });

      // Remove pod button - using event delegation
      document.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        const removeBtn = target.closest('#remove-pod-step2-btn') as HTMLElement;
        
        if (removeBtn) {
          console.log('🔍 [Step2] Remove pod button clicked');
          e.preventDefault();
          e.stopPropagation();
          await this.shared.removePod();
          this.shared.navigateToStep(1);
        }
      });

      // Back button removed from Step 2

      // Continue button (Step 2 only)
      document.addEventListener('click', (e) => {
        console.log('🔍 [Step2] Click event detected, target:', e.target);
        console.log('🔍 [Step2] Target matches #step2-continue-btn:', e.target && e.target.matches('#step2-continue-btn'));
        if (e.target && e.target.matches('#step2-continue-btn') && this.currentStep === 2) {
          console.log('🔍 [Step2] Continue to Step 3 button clicked');
          console.log('🔍 [Step2] Current step before nextStep():', this.currentStep);
          console.log('🔍 [Step2] About to call nextStep()');
          this.shared.nextStep();
          console.log('🔍 [Step2] nextStep() called');
        } else if (e.target && e.target.matches('#step2-continue-btn')) {
          console.log('🔍 [Step2] Continue button clicked but ignored - not in Step 2 (current step:', this.currentStep, ')');
        }
      });

      // Go to step 1 button
      document.addEventListener('click', (e) => {
        if (e.target && e.target.matches('#go-to-step1-btn')) {
          this.shared.navigateToStep(1);
        }
      });
    }

    addStep3EventListeners() {
      console.log('🔍 Adding Step 3 event listeners...');
      
      // Back button removed from Step 3

      // Form submission
      console.log('🔍 Calling shared.addFormListeners()...');
      this.shared.addFormListeners();
      console.log('🔍 Step 3 event listeners added');
    }
  }

  // Initialize the coordinator
  new SummaryStepCoordinator();
</script>

<style>
  .step-content {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 