---
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';

export interface Props {
  pod: {
    id: string;
    name: string;
    tagline: string;
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
    whatsInPod: {
      description: string;
      teamComposition: string[];
    };
  };
  reservationMonths?: number;
  isSelected?: boolean;
}

const { pod, reservationMonths = 3, isSelected = false } = Astro.props;

// Calculate total price based on reservation period
const totalPriceINR = pod.basePriceINR * reservationMonths;
const totalPriceUSD = pod.basePriceUSD * reservationMonths;
---

<div class={`pod-card bg-white rounded-2xl border-2 p-6 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer group ${isSelected ? 'border-mint-500 bg-mint-50' : 'border-gray-200'}`} data-pod-id={pod.id}>
  <!-- Header -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex items-center space-x-3">
      <div class="w-12 h-12 bg-gradient-to-br from-mint-500 to-cerulean-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
      </div>
      <div>
        <h3 class="text-lg font-semibold text-graphite-900 group-hover:text-mint-600 transition-colors">
          {pod.name}
        </h3>
        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-mint-100 text-mint-800">
          Pod
        </span>
      </div>
    </div>
  </div>

  <!-- Description -->
  <p class="text-graphite-600 text-sm mb-4 line-clamp-3">
    {pod.tagline}
  </p>

  <!-- Updated Price Display with Reservation Period -->
  <div class="mb-4">
    <DiscountedPriceDisplay 
      basePriceINR={totalPriceINR}
      basePriceUSD={totalPriceUSD}
      discountPercentage={pod.discountPercentage}
      showBadge={true}
      showSavings={true}
      showOriginalPrice={true}
      size="lg"
      variant="conversion"
      data-item-type="pod"
    />
    <p class="text-sm text-gray-500 mt-1">for {reservationMonths} months</p>
  </div>

  <!-- Features Preview -->
  <div class="mt-4 pt-4 border-t border-gray-100">
    <div class="flex items-center space-x-2 text-xs text-graphite-500">
      <svg class="w-4 h-4 text-mint-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      <span>Customizable duration</span>
    </div>
    <div class="flex items-center space-x-2 text-xs text-graphite-500 mt-1">
      <svg class="w-4 h-4 text-mint-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      <span>Add-on packs available</span>
    </div>
  </div>
</div>

<script>
  // Pod card functionality
  document.addEventListener('DOMContentLoaded', () => {
    const podCards = document.querySelectorAll('.pod-card');
    
    podCards.forEach(card => {
      const selectBtn = card.querySelector('.select-pod-btn');
      const podId = card.getAttribute('data-pod-id');
      
      if (selectBtn && podId) {
        selectBtn.addEventListener('click', async (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Add pod to cart using localStorage
          try {
            const cartData = localStorage.getItem('novapod-cart') || '[]';
            let cart = JSON.parse(cartData);
            
            // Check if pod already exists
            const existingPod = cart.find((item: any) => item.type === 'pod');
            if (existingPod) {
              // Remove existing pod
              cart = cart.filter((item: any) => item.type !== 'pod');
            }
            
            // Add new pod
            cart.push({
              id: podId,
              type: 'pod',
              reservationMonths: 3
            });
            
            localStorage.setItem('novapod-cart', JSON.stringify(cart));
            
            // Dispatch cart-updated event
            window.dispatchEvent(new CustomEvent('cart-updated'));
            
            // Show success notification
            const notification = document.createElement('div');
            notification.className = 'fixed top-20 right-4 z-50 p-4 rounded-lg shadow-lg bg-green-500 text-white transition-all duration-300 transform translate-x-full';
            notification.textContent = 'Pod added to cart successfully!';
            document.body.appendChild(notification);
            
            setTimeout(() => {
              notification.classList.remove('translate-x-full');
            }, 100);
            
            setTimeout(() => {
              notification.classList.add('translate-x-full');
              setTimeout(() => {
                document.body.removeChild(notification);
              }, 300);
            }, 3000);
          } catch (error) {
            console.error('Error adding pod to cart:', error);
          }
        });
      }
      
      // Make entire card clickable
      card.addEventListener('click', () => {
        const selectBtn = card.querySelector('.select-pod-btn') as HTMLElement;
        if (selectBtn) {
          selectBtn.click();
        }
      });
    });
  });
</script> 