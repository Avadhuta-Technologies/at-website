---
import { generatePackSlug } from '../../utils/slugUtils.js';
import CurrencyDisplay from '../shared/CurrencyDisplay.astro';
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';

export interface Props {
  pack: {
    id: string;
    title: string;
    description: string;
    duration: string;
    badge: string;
    badgeColor: string;
    icon: string;
    deliverables?: string[];
    features?: string[];
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
  };
  index?: number;
}

const { pack, index = 0 } = Astro.props;

interface ColorClasses {
  bg: string;
  border: string;
  text: string;
  badge: string;
  iconBg: string;
}

// Color mapping for different badge colors - using brand colors
const getColorClasses = (color: string): ColorClasses => {
  const colorMap: Record<string, ColorClasses> = {
    green: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    },
    blue: { 
      bg: 'bg-cerulean-50/80', 
      border: 'border-cerulean-200/50', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100/90 text-cerulean-800 backdrop-blur-sm',
      iconBg: 'bg-cerulean-100/80'
    },
    purple: { 
      bg: 'bg-graphite-50/80', 
      border: 'border-graphite-200/50', 
      text: 'text-graphite-700', 
      badge: 'bg-graphite-100/90 text-graphite-800 backdrop-blur-sm',
      iconBg: 'bg-graphite-100/80'
    },
    orange: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    },
    teal: { 
      bg: 'bg-cerulean-50/80', 
      border: 'border-cerulean-200/50', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100/90 text-cerulean-800 backdrop-blur-sm',
      iconBg: 'bg-cerulean-100/80'
    },
    pink: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    },
    indigo: { 
      bg: 'bg-cerulean-50/80', 
      border: 'border-cerulean-200/50', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100/90 text-cerulean-800 backdrop-blur-sm',
      iconBg: 'bg-cerulean-100/80'
    },
    cyan: { 
      bg: 'bg-cerulean-50/80', 
      border: 'border-cerulean-200/50', 
      text: 'text-cerulean-700', 
      badge: 'bg-cerulean-100/90 text-cerulean-800 backdrop-blur-sm',
      iconBg: 'bg-cerulean-100/80'
    },
    violet: { 
      bg: 'bg-graphite-50/80', 
      border: 'border-graphite-200/50', 
      text: 'text-graphite-700', 
      badge: 'bg-graphite-100/90 text-graphite-800 backdrop-blur-sm',
      iconBg: 'bg-graphite-100/80'
    },
    emerald: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    },
    amber: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    },
    rose: { 
      bg: 'bg-mint-50/80', 
      border: 'border-mint-200/50', 
      text: 'text-mint-700', 
      badge: 'bg-mint-100/90 text-mint-800 backdrop-blur-sm',
      iconBg: 'bg-mint-100/80'
    }
  };
  return colorMap[color] || colorMap.blue;
};

const colors = getColorClasses(pack.badgeColor);

// Generate contextual icon based on pack content
const getPackIcon = (pack: any) => {
  const title = pack.title.toLowerCase();
  const description = pack.description.toLowerCase();
  const badge = pack.badge.toLowerCase();
  
  // Launch & Go-to-Market icons
  if (title.includes('launch') || title.includes('web') || title.includes('presence') || 
      description.includes('launch') || description.includes('website') || description.includes('online')) {
    return '🚀';
  }
  
  // Brand & Design icons
  if (title.includes('brand') || title.includes('design') || title.includes('creative') ||
      description.includes('brand') || description.includes('design') || description.includes('visual')) {
    return '🎨';
  }
  
  // Growth & Optimization icons
  if (title.includes('growth') || title.includes('optimization') || title.includes('conversion') ||
      description.includes('growth') || description.includes('optimize') || description.includes('convert')) {
    return '📈';
  }
  
  // UX & Audit icons
  if (title.includes('ux') || title.includes('audit') || title.includes('review') ||
      description.includes('ux') || description.includes('audit') || description.includes('review')) {
    return '🎯';
  }
  
  // Automation & Efficiency icons
  if (title.includes('ops') || title.includes('automation') || title.includes('efficiency') ||
      description.includes('automate') || description.includes('efficiency') || description.includes('process')) {
    return '⚙️';
  }
  
  // Integration icons
  if (title.includes('integration') || title.includes('connect') || title.includes('api') ||
      description.includes('integrate') || description.includes('connect') || description.includes('api')) {
    return '🔌';
  }
  
  // AI & Assistant icons
  if (title.includes('ai') || title.includes('assistant') || title.includes('intelligence') ||
      description.includes('ai') || description.includes('assistant') || description.includes('intelligence')) {
    return '🤖';
  }
  
  // Compliance & Security icons
  if (title.includes('compliance') || title.includes('security') || title.includes('audit') ||
      description.includes('compliance') || description.includes('security') || description.includes('audit')) {
    return '🔐';
  }
  
  // Hiring & Recruitment icons
  if (title.includes('hiring') || title.includes('recruitment') || title.includes('talent') ||
      description.includes('hire') || description.includes('recruit') || description.includes('talent')) {
    return '👥';
  }
  
  // Data & Analytics icons
  if (title.includes('data') || title.includes('analytics') || title.includes('insights') ||
      description.includes('data') || description.includes('analytics') || description.includes('insights')) {
    return '📊';
  }
  
  // Development & Engineering icons
  if (title.includes('dev') || title.includes('development') || title.includes('engineering') ||
      description.includes('develop') || description.includes('build') || description.includes('code')) {
    return '💻';
  }
  
  // Marketing & Sales icons
  if (title.includes('marketing') || title.includes('sales') || title.includes('campaign') ||
      description.includes('market') || description.includes('sell') || description.includes('campaign')) {
    return '📢';
  }
  
  return pack.icon || '📦';
};
---

<div class="pack-card group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1 cursor-pointer" data-pack-id={pack.id}>
  <!-- Card Background with Glass Morphism -->
  <div class="absolute inset-0 bg-white/90 backdrop-blur-sm border border-white/30 rounded-xl shadow-sm group-hover:shadow-xl transition-all duration-300"></div>
  
  <!-- Card Content -->
  <div class="relative p-6 flex flex-col h-full">
    <!-- Card Header -->
    <div class="flex items-start justify-between mb-4">
      <div class={`w-14 h-14 ${colors.iconBg} rounded-xl flex items-center justify-center backdrop-blur-sm group-hover:scale-110 transition-transform duration-300 border border-current/20`}>
        <span class="text-2xl">{getPackIcon(pack)}</span>
      </div>
      <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-inter font-semibold ${colors.badge} border border-current/20`}>
        {pack.badge}
      </span>
    </div>
    
    <!-- Title -->
    <h4 class="text-xl font-inter font-bold text-graphite-900 mb-3 group-hover:text-graphite-800 transition-colors duration-200">
      {pack.title}
    </h4>
    
    <!-- Description -->
    <div class="flex-1 mb-6">
      <p class="text-graphite-600 font-inter text-sm leading-relaxed pack-description">
        {pack.description}
      </p>
    </div>
    
    <!-- Price and Duration -->
    <div class="flex items-center justify-between text-sm text-graphite-500 mb-6 font-inter">
      <div class="flex items-center">
        <div class="w-8 h-8 bg-cerulean-100/80 rounded-lg flex items-center justify-center mr-3">
          <svg class="w-4 h-4 text-cerulean-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <span class="font-medium">{pack.duration}</span>
      </div>
      <div class="flex items-center">
        <div class="w-8 h-8 bg-mint-100/80 rounded-lg flex items-center justify-center mr-3">
          <svg class="w-4 h-4 text-mint-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
          </svg>
        </div>
        <DiscountedPriceDisplay 
          basePriceINR={pack.basePriceINR}
          basePriceUSD={pack.basePriceUSD}
          discountPercentage={pack.discountPercentage || 0}
          size="sm"
        />
      </div>
    </div>
    
    <!-- Expandable Content (Hidden by default) -->
    <div class="pack-details hidden mt-4 space-y-4">
      <!-- Features List -->
      {pack.features && pack.features.length > 0 && (
        <div>
          <h4 class="text-sm font-inter font-semibold text-graphite-800 mb-2">Key Features</h4>
          <ul class="space-y-1">
            {pack.features.slice(0, 3).map((feature: string) => (
              <li class="flex items-start text-xs text-graphite-600 font-inter">
                <svg class="w-3 h-3 text-mint-500 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )}
      
      <!-- Deliverables -->
      {pack.deliverables && pack.deliverables.length > 0 && (
        <div>
          <h4 class="text-sm font-inter font-semibold text-graphite-800 mb-2">Deliverables</h4>
          <ul class="space-y-1">
            {pack.deliverables.slice(0, 3).map((deliverable: string) => (
              <li class="flex items-start text-xs text-graphite-600 font-inter">
                <svg class="w-3 h-3 text-cerulean-500 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
                {deliverable}
              </li>
            ))}
          </ul>
        </div>
      )}
      
      <!-- Pricing Breakdown -->
      <div>
        <h4 class="text-sm font-inter font-semibold text-graphite-800 mb-2">Pricing</h4>
        <div class="space-y-1">
          <div class="flex items-center justify-between text-xs font-inter">
            <span class="text-graphite-600">INR:</span>
            <span class="font-medium text-graphite-800">₹{(pack.basePriceINR / 100000).toFixed(1)}L</span>
          </div>
          <div class="flex items-center justify-between text-xs font-inter">
            <span class="text-graphite-600">USD:</span>
            <span class="font-medium text-graphite-800">${pack.basePriceUSD}</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Action Bar -->
    <div class="flex flex-col sm:flex-row gap-3 pt-4 border-t border-graphite-100/50 mt-auto">
      <!-- View Details Button -->
      <a 
        href={`/packs/${generatePackSlug(pack.title)}`} 
        class="flex-1 inline-flex items-center justify-center px-4 py-3 glass border-graphite-300/50 text-graphite-700 font-inter font-semibold rounded-lg hover:bg-graphite-50/50 hover:border-graphite-400/70 transition-all duration-300 group hover:scale-105"
      >
        <svg class="w-4 h-4 mr-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
        </svg>
        <span>View Details</span>
      </a>
      
      <!-- Add to Pod Button -->
      <button 
        data-add-to-cart
        data-item-id={pack.id}
        data-item-type="pack"
        data-item-title={pack.title}
        data-item-description={pack.description}
        data-item-price={pack.basePriceUSD}
        class="flex-1 inline-flex items-center justify-center px-4 py-3 bg-gradient-to-r from-mint-500 to-cerulean-500 text-white font-inter font-semibold rounded-lg hover:from-mint-600 hover:to-cerulean-600 transition-all duration-300 hover:scale-105 hover:shadow-md group flex-shrink-0 shadow-sm"
      >
        <svg class="w-4 h-4 mr-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        <span>Add to Pod</span>
      </button>
    </div>
  </div>
</div>

<script>
  // Import SummaryShared for cart operations
  import { SummaryShared } from '../../utils/summaryShared.js';

  // Interactive functionality for pack cards
  document.addEventListener('DOMContentLoaded', async () => {
    const shared = new SummaryShared();
    
    // Initialize pack buttons with correct cart state
    await shared.initializePackButtons();
    
    // Add event listeners for pack cart operations
    const packButtons = document.querySelectorAll('[data-add-to-cart][data-item-type="pack"]');
    
    packButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const packId = button.getAttribute('data-item-id');
        if (packId) {
          await shared.handlePackCartOperation(packId, button);
        }
      });
    });
    
    // Listen for cart updates to refresh button states
    window.addEventListener('cart-updated', async () => {
      await shared.initializePackButtons();
    });
  });
</script>

<style>
  /* Pack Card Animations */
  .pack-card {
    opacity: 1 !important;
    transform: translateY(0) !important;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    display: block !important;
  }

  .pack-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Expand Animation */
  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Icon rotation */
  .expand-icon.rotate-180 {
    transform: rotate(180deg);
  }

  /* Hover Effects */
  .pack-card:hover {
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .pack-card {
      padding: 1.5rem;
    }
  }
</style> 