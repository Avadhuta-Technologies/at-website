---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    steps: Array<{
      title: string;
      description: string;
      icon: string;
    }>;
  };
}

const { data } = Astro.props;
---

<section class="py-16 lg:py-24 ">
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl lg:text-5xl font-bold text-slate-900 mb-6">
        {data.title}
      </h2>
      <p class="text-xl text-slate-600 max-w-3xl mx-auto">
        {data.subtitle}
      </p>
    </div>

    <!-- Steps Grid -->
    <div class="max-w-6xl mx-auto">
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {data.steps.map((step, index) => (
          <div 
            class="relative bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-8 border border-blue-100 group hover:shadow-lg transition-all duration-300"
            data-step={index + 1}
          >
            <!-- Step Number -->
            <div class="absolute -top-4 -left-4 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
              {index + 1}
            </div>
            
            <!-- Icon -->
            <div class="text-4xl mb-6 group-hover:scale-110 transition-transform duration-300">
              {step.icon}
            </div>
            
            <!-- Title -->
            <h3 class="text-xl font-semibold text-slate-900 mb-4">
              {step.title}
            </h3>
            
            <!-- Description -->
            <p class="text-slate-600 leading-relaxed">
              {step.description}
            </p>
          </div>
        ))}
      </div>
    </div>

    <!-- CTA Button -->
    <div class="text-center mt-16">
      <a 
        href="/explore-pods" 
        class="inline-flex items-center px-8 py-4 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700 transition-colors duration-300 shadow-lg hover:shadow-xl mr-4"
      >
        Explore Pods
        <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
      <a 
        href="#packs-grid" 
        class="inline-flex items-center px-8 py-4 bg-white text-blue-600 font-semibold rounded-full hover:bg-blue-50 transition-colors duration-300 shadow-lg hover:shadow-xl border-2 border-blue-600"
      >
        Browse Packs
        <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Add animation on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const delay = (parseInt(entry.target.getAttribute('data-step')) - 1) * 0.2;
        entry.target.style.animationDelay = `${delay}s`;
        entry.target.classList.add('animate-fade-in-up');
      }
    });
  }, observerOptions);

  // Observe all step cards
  document.querySelectorAll('[data-step]').forEach(card => {
    observer.observe(card);
  });
</script> 