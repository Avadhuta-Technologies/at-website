---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    benefits: Array<{
      title: string;
      description: string;
      icon: string;
    }>;
  };
}

const { data } = Astro.props;
---

<section class="py-20 relative overflow-hidden">
  <div class="container mx-auto max-w-screen-2xl px-4 relative z-10">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-inter font-bold text-graphite-900 mb-4">
        {data.title}
      </h2>
      <p class="text-lg font-inter text-graphite-600 max-w-3xl mx-auto">
        {data.subtitle}
      </p>
    </div>

    <!-- Benefits Grid -->
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
      {data.benefits.map((benefit, index) => (
        <div 
          class="group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1"
          style={`animation-delay: ${index * 0.1}s`}
        >
          <!-- Card Background -->
          <div class="absolute inset-0 bg-white/90 backdrop-blur-sm border border-white/30 rounded-xl shadow-sm group-hover:shadow-xl transition-all duration-300"></div>
          
          <!-- Card Content -->
          <div class="relative p-6">
            <!-- Icon -->
            <div class="text-4xl mb-4 group-hover:scale-110 transition-transform duration-300">
              {benefit.icon}
            </div>
            
            <!-- Title -->
            <h3 class="text-lg font-inter font-semibold text-graphite-900 mb-3">
              {benefit.title}
            </h3>
            
            <!-- Description -->
            <p class="text-graphite-600 font-inter leading-relaxed">
              {benefit.description}
            </p>
          </div>
        </div>
      ))}
    </div>

  </div>
</section>

<script>
  // Add animation on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const target = entry.target as HTMLElement;
        target.style.animationDelay = target.style.animationDelay || '0s';
        entry.target.classList.add('animate-fade-in-up');
      }
    });
  }, observerOptions);

  // Observe all benefit cards
  document.querySelectorAll('.grid > div').forEach(card => {
    observer.observe(card);
  });
</script>

<style>
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 