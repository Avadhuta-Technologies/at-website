---
export interface Props {
  data: {
    title: string;
    subtitle: string;
    items: Array<{
      message: string;
      authorName: string;
      authorRole?: string;
      company?: string;
    }>;
  };
}

const { data } = Astro.props;
---

<section class="py-16 bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-900 dark:to-dark-2">
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto text-center mb-12">
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-dark dark:text-white animate-fade-in-up">
        {data.title}
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto animate-fade-in-up animation-delay-200">
        {data.subtitle}
      </p>
    </div>
    
    <!-- Testimonials Carousel -->
    <div class="max-w-4xl mx-auto relative">
      <div class="testimonials-carousel overflow-hidden">
        <div class="testimonials-track flex transition-transform duration-500 ease-in-out">
          {data.items.map((testimonial, index) => (
            <div class="testimonial-slide w-full flex-shrink-0 px-4">
              <div class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-8 rounded-2xl border border-blue-200 dark:border-blue-800">
                <div class="flex items-start">
                  <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-4 overflow-hidden">
                    <div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold text-lg">
                      {testimonial.authorName.split(' ').map(name => name[0]).join('').toUpperCase()}
                    </div>
                  </div>
                  <div class="flex-1">
                    <blockquote class="text-xl text-gray-700 dark:text-gray-300 italic mb-4 leading-relaxed">
                      "{testimonial.message}"
                    </blockquote>
                    <cite class="text-sm text-gray-600 dark:text-gray-400 font-medium">â€” {testimonial.authorName}</cite>
                    {testimonial.authorRole && testimonial.company && (
                      <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                        {testimonial.authorRole} at {testimonial.company}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Navigation Dots -->
      <div class="flex justify-center mt-8 space-x-2">
        {data.items.map((_, index) => (
          <button 
            class="testimonial-dot w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-300 hover:bg-blue-500 dark:hover:bg-blue-400"
            data-slide={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .testimonials-carousel {
    position: relative;
  }
  
  .testimonials-track {
    display: flex;
    width: 100%;
  }
  
  .testimonial-slide {
    min-width: 100%;
  }
  
  .testimonial-dot.active {
    background-color: #3b82f6;
  }
  
  @media (prefers-reduced-motion: reduce) {
    .testimonials-track {
      transition: none;
    }
  }
  
  .animate-fade-in-up { 
    animation: fadeInUp 0.8s ease-out; 
  }
  .animation-delay-200 { 
    animation-delay: 0.2s; 
  }
  
  @keyframes fadeInUp {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script>
  // Testimonials Carousel Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.querySelector('.testimonials-track') as HTMLElement;
    const dots = document.querySelectorAll('.testimonial-dot');
    const slides = document.querySelectorAll('.testimonial-slide');
    
    if (!track || slides.length === 0) return;
    
    let currentSlide = 0;
    const totalSlides = slides.length;
    let autoplayInterval: any;
    
    // Initialize first dot as active
    if (dots.length > 0) {
      dots[0].classList.add('active');
    }
    
    // Function to go to specific slide
    function goToSlide(index: number) {
      currentSlide = index;
      const translateX = -index * 100;
      track.style.transform = `translateX(${translateX}%)`;
      
      // Update active dot
      dots.forEach((dot, i) => {
        dot.classList.toggle('active', i === index);
      });
    }
    
    // Function to go to next slide
    function nextSlide() {
      currentSlide = (currentSlide + 1) % totalSlides;
      goToSlide(currentSlide);
    }
    
    // Function to go to previous slide
    function prevSlide() {
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      goToSlide(currentSlide);
    }
    
    // Add click handlers to dots
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
        resetAutoplay();
      });
    });
    
    // Autoplay functionality
    function startAutoplay() {
      autoplayInterval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
    }
    
    function stopAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    }
    
    function resetAutoplay() {
      stopAutoplay();
      startAutoplay();
    }
    
    // Pause autoplay on hover
    const carousel = document.querySelector('.testimonials-carousel');
    if (carousel) {
      carousel.addEventListener('mouseenter', stopAutoplay);
      carousel.addEventListener('mouseleave', startAutoplay);
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        resetAutoplay();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        resetAutoplay();
      }
    });
    
    // Touch/swipe support for mobile
    let startX = 0;
    let endX = 0;
    
    track.addEventListener('touchstart', (e: TouchEvent) => {
      startX = e.touches[0].clientX;
    });
    
    track.addEventListener('touchend', (e: TouchEvent) => {
      endX = e.changedTouches[0].clientX;
      handleSwipe();
    });
    
    function handleSwipe() {
      const threshold = 50;
      const diff = startX - endX;
      
      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        resetAutoplay();
      }
    }
    
    // Start autoplay
    startAutoplay();
  });
</script> 