---
const menuitems = [
  {
    title: "Home",
    path: "/",
  },
  { title: "Our Work", path: "/our-work", description: "Explore our latest projects and achievements" },
  { title: "Case Studies", path: "/case-studies", description: "Real success stories and results" },
  {
    title: "Explore Pods",
    path: "/explore-pods",
  },
];
---

<header id="navbar" class="ud-header fixed top-0 left-0 z-50 flex w-full items-center justify-between flex-nowrap transition-all duration-300 ease-out glass border-b border-glass">
  <div class="container mx-auto px-4 max-w-7xl">
    <div class="flex items-center justify-between flex-nowrap w-full">
      <!-- Logo - Clean Minimalistic Design -->
      <div class="flex-shrink-0">
        <a href="/" class="navbar-logo flex items-center group">
          <div class="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-mint-500 to-mint-600 rounded-lg flex items-center justify-center mr-2 sm:mr-3 transform transition-all duration-300 group-hover:scale-105">
            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
          </div>
          <span class=" font-bold text-lg sm:text-xl text-graphite-900 group-hover:text-mint-600 transition-all duration-300">NovaPod.ai</span>
        </a>
      </div>
      
      <!-- Desktop Navigation Menu -->
      <nav class="hidden lg:flex items-center flex-nowrap">
        <ul class="flex items-center space-x-8 2xl:space-x-10">
          {
            menuitems.map((item, index) => {
              const isActive = Astro.url.pathname === item.path;
              return (
                <li class="group relative">
                  <a
                    href={item.path}
                    class={`ud-menu-scroll flex py-6 font-inter font-medium text-base transition-all duration-300 relative overflow-hidden ${
                      isActive 
                        ? 'text-mint-600 font-semibold' 
                        : 'text-graphite-700 hover:text-mint-600'
                    }`}>
                    <span class="relative z-10">{item.title}</span>
                    {isActive && (
                      <div class="absolute bottom-0 left-0 w-full h-0.5 bg-mint-500 rounded-full"></div>
                    )}
                    <div class="absolute inset-0 bg-mint-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg"></div>
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
      
      <!-- Action Buttons Container -->
      <div class="flex items-center justify-end gap-2 sm:gap-4 flex-shrink-0 flex-nowrap">
        <!-- Cart Icon - Glassmorphism Design -->
        <button id="header-cart-toggle" class="inline-flex cursor-pointer items-center text-graphite-700 hover:text-mint-600 transition-all duration-300 relative flex-shrink-0 group">
          <div class="p-2 rounded-lg glass-hover transition-all duration-300">
            <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6 7V6a6 6 0 1112 0v1h1.25A2.75 2.75 0 0122 9.75v9A2.25 2.25 0 0119.75 21H4.25A2.25 2.25 0 012 18.75v-9A2.75 2.75 0 014.75 7H6zm2 0h8V6a4 4 0 10-8 0v1zm-3.25 2A.75.75 0 004 9.75v9c0 .414.336.75.75.75h15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75H4.75z" />
            </svg>
          </div>
          <!-- Cart badge -->
          <span class="cart-badge absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-mint-500 text-white text-xs rounded-full h-4 w-4 sm:h-5 sm:w-5 flex items-center justify-center text-[10px] sm:text-xs font-medium" data-cart-count style="display: none;">0</span>
        </button>
        
        <!-- Desktop Action Buttons -->
        <div class="hidden sm:flex items-center gap-3 lg:gap-4 flex-shrink-0 flex-nowrap">
          <a
            href="/contact"
            class="py-2 px-4 lg:px-[22px] text-sm lg:text-base font-inter font-medium text-graphite-700 hover:text-mint-600 transition-all duration-300 flex-shrink-0 glass-hover rounded-lg"
          >
            Contact
          </a>
          <a
            href="/explore-pods"
            class="rounded-lg py-2 px-4 lg:px-6 text-sm lg:text-base font-inter font-medium text-white bg-mint-500 hover:bg-mint-600 transition-all duration-300 ease-out hover:scale-105 flex-shrink-0 shadow-sm"
          >
            Get Started
          </a>
        </div>
        
        <!-- Mobile Menu Button - Glassmorphism Design -->
        <button
          id="navbarToggler"
          class="relative z-50 block rounded-lg px-3 py-2 ring-mint-500 focus:ring-2 lg:hidden ml-2 flex-shrink-0 glass-hover transition-all duration-300"
          aria-label="Toggle navigation menu"
        >
          <span
            class="relative my-[6px] block h-[2px] w-[30px] bg-graphite-700 transition-all duration-300 group-hover:bg-mint-600"
          ></span>
          <span
            class="relative my-[6px] block h-[2px] w-[30px] bg-graphite-700 transition-all duration-300 group-hover:bg-mint-600"
          ></span>
          <span
            class="relative my-[6px] block h-[2px] w-[30px] bg-graphite-700 transition-all duration-300 group-hover:bg-mint-600"
          ></span>
        </button>
      </div>
      
      <!-- Mobile Navigation Menu -->
      <nav
        id="navbarCollapse"
        class="absolute right-0 top-full hidden w-full max-w-[280px] sm:max-w-[320px] rounded-xl glass-strong py-5 shadow-lg border border-glass lg:hidden z-50 backdrop-blur-md"
      >
        <ul class="block">
          {
            menuitems.map((item, index) => {
              const isActive = Astro.url.pathname === item.path;
              return (
                <li class="group relative">
                  <a
                    href={item.path}
                    class={`ud-menu-scroll mx-8 flex py-2 font-inter font-medium text-base transition-all duration-300 ${
                      isActive 
                        ? 'text-mint-600 font-semibold' 
                        : 'text-graphite-700 hover:text-mint-600'
                    }`}>
                    {item.title}
                    {isActive && (
                      <div class="absolute bottom-0 left-0 w-full h-0.5 bg-mint-500 rounded-full"></div>
                    )}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  // Header scroll behavior
  const navbar = document.getElementById('navbar');
  let lastScrollTop = 0;

  function handleScroll() {
    if (!navbar) return;
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    // Add/remove scrolled class based on scroll position
    if (scrollTop > 50) {
      navbar.classList.add('scrolled');
    } else {
      navbar.classList.remove('scrolled');
    }
    
    lastScrollTop = scrollTop;
  }

  // Dropdown functionality with hover
  function initDropdowns() {
    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
    
    dropdownToggles.forEach(toggle => {
      const dropdownMenu = toggle.nextElementSibling as HTMLElement;
      const arrow = toggle.querySelector('svg') as SVGElement;
      
      if (!dropdownMenu || !arrow) return;
      
      let timeoutId: number;
      
      // Show dropdown on hover
      toggle.addEventListener('mouseenter', () => {
        clearTimeout(timeoutId);
        
        // Close other dropdowns
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
          if (menu !== dropdownMenu) {
            menu.classList.remove('show');
            const prevSibling = menu.previousElementSibling as HTMLElement;
            const prevArrow = prevSibling?.querySelector('svg') as SVGElement;
            if (prevArrow) {
              prevArrow.style.transform = 'rotate(0deg)';
            }
          }
        });
        
        // Show current dropdown
        dropdownMenu.classList.add('show');
        arrow.style.transform = 'rotate(180deg)';
      });
      
      // Hide dropdown when mouse leaves
      toggle.addEventListener('mouseleave', () => {
        timeoutId = window.setTimeout(() => {
          dropdownMenu.classList.remove('show');
          arrow.style.transform = 'rotate(0deg)';
        }, 150);
      });
      
      // Keep dropdown open when hovering over it
      dropdownMenu.addEventListener('mouseenter', () => {
        clearTimeout(timeoutId);
      });
      
      // Hide dropdown when mouse leaves the dropdown
      dropdownMenu.addEventListener('mouseleave', () => {
        timeoutId = window.setTimeout(() => {
          dropdownMenu.classList.remove('show');
          arrow.style.transform = 'rotate(0deg)';
        }, 150);
      });
    });
  }

  // Mobile menu toggle
  const navbarToggler = document.getElementById('navbarToggler');
  const navbarCollapse = document.getElementById('navbarCollapse');

  console.log('Navbar elements:', { navbarToggler, navbarCollapse });

  if (navbarToggler && navbarCollapse) {
    navbarToggler.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      console.log('Hamburger clicked!');
      
      const isHidden = navbarCollapse.classList.contains('hidden');
      console.log('Is hidden:', isHidden);
      
      if (isHidden) {
        navbarCollapse.classList.remove('hidden');
        navbarCollapse.classList.add('show');
        console.log('Menu shown');
      } else {
        navbarCollapse.classList.add('hidden');
        navbarCollapse.classList.remove('show');
        console.log('Menu hidden');
      }
      
      // Animate hamburger menu
      const spans = navbarToggler.querySelectorAll('span');
      spans.forEach((span, index) => {
        if (index === 0) {
          span.style.transform = isHidden ? 'rotate(45deg) translate(5px, 5px)' : 'none';
        } else if (index === 1) {
          span.style.opacity = isHidden ? '0' : '1';
        } else if (index === 2) {
          span.style.transform = isHidden ? 'rotate(-45deg) translate(7px, -6px)' : 'none';
        }
      });
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!navbarToggler.contains(e.target as Node) && !navbarCollapse.contains(e.target as Node)) {
        navbarCollapse.classList.add('hidden');
        navbarCollapse.classList.remove('show');
        const spans = navbarToggler.querySelectorAll('span');
        spans.forEach((span, index) => {
          if (index === 0) {
            span.style.transform = 'none';
          } else if (index === 1) {
            span.style.opacity = '1';
          } else if (index === 2) {
            span.style.transform = 'none';
          }
        });
      }
    });

    // Close mobile menu on window resize to desktop
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024) {
        navbarCollapse.classList.add('hidden');
        navbarCollapse.classList.remove('show');
        const spans = navbarToggler.querySelectorAll('span');
        spans.forEach((span, index) => {
          if (index === 0) {
            span.style.transform = 'none';
          } else if (index === 1) {
            span.style.opacity = '1';
          } else if (index === 2) {
            span.style.transform = 'none';
          }
        });
      }
    });
  }



  // Megamenu hover functionality
  function initMegamenu() {
    const menuItems = document.querySelectorAll('.megamenu-item');
    const detailsPanel = document.getElementById('details-panel');
    
    if (!detailsPanel) return;
    
    const detailsContent = {
      'our-work': {
        title: 'Our Work',
        description: 'Discover cutting-edge solutions that transform businesses',
        icon: `<svg class="w-8 h-8 text-charcoal-950" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>`,
        stats: [
          { label: 'Projects Completed', value: '150+' },
          { label: 'Industries Served', value: '25+' },
          { label: 'Success Rate', value: '98%' }
        ],
        highlights: [
          'AI-Powered Solutions',
          'Cloud-Native Architecture',
          'Real-time Analytics',
          'Scalable Systems'
        ],
        color: 'primary'
      },
      'contact': {
        title: 'Contact',
        description: 'Ready to start your digital transformation journey?',
        icon: '<svg class="w-8 h-8 text-charcoal-950" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg>',
        stats: [
          { label: 'Response Time', value: '< 2hrs' },
          { label: 'Expert Team', value: '50+' },
          { label: 'Client Satisfaction', value: '99%' }
        ],
        highlights: [
          'Free Consultation',
          '24/7 Support',
          'Custom Solutions',
          'Dedicated Team'
        ],
        color: 'green'
      },
      'case-studies': {
        title: 'Case Studies',
        description: 'Real results that speak louder than words',
        icon: '<svg class="w-8 h-8 text-charcoal-950" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>',
        stats: [
          { label: 'ROI Improvement', value: '300%' },
          { label: 'Time Saved', value: '60%' },
          { label: 'Cost Reduction', value: '40%' }
        ],
        highlights: [
          'E-commerce Platform',
          'Healthcare Solutions',
          'FinTech Applications',
          'Enterprise Systems'
        ],
        color: 'purple'
      },
      'portfolio': {
        title: 'Portfolio',
        description: 'Showcasing excellence across diverse technologies',
        icon: '<svg class="w-8 h-8 text-charcoal-950" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path></svg>',
        stats: [
          { label: 'Technologies', value: '15+' },
          { label: 'Frameworks', value: '25+' },
          { label: 'Platforms', value: '10+' }
        ],
        highlights: [
          'React & Next.js',
          'Node.js & Python',
          'AWS & Azure',
          'Mobile Apps'
        ],
        color: 'orange'
      }
    };
    
    menuItems.forEach(item => {
      const target = item.getAttribute('data-target');
      const validKeys = ['our-work', 'contact', 'case-studies', 'portfolio'] as const;
      if (!target || !validKeys.includes(target as typeof validKeys[number])) return;
      const content = detailsContent[target as typeof validKeys[number]];
      if (!content) return;
      
      item.addEventListener('mouseenter', () => {
        const colorClasses: Record<string, string> = {
          primary: 'from-primary-500 to-indigo-600',
          green: 'from-green-500 to-teal-600',
          purple: 'from-purple-500 to-pink-600',
          orange: 'from-orange-500 to-red-600'
        };
        
    
        detailsPanel.innerHTML = `
          <div class="h-full">
            <div class="text-center mb-4">
              <div class="w-12 h-12 bg-gradient-to-r ${colorClasses[content.color]} rounded-lg flex items-center justify-center mx-auto mb-3">
                ${content.icon}
              </div>
              <h3 class="text-lg font-semibold text-gray-900 mb-1">${content.title}</h3>
              <p class="text-sm text-gray-600 ">${content.description}</p>
            </div>
            
            <!-- Stats Section -->
            <div class="grid grid-cols-3 gap-2 mb-4">
              ${content.stats.map((stat: { label: string; value: string }) => `
                <div class="text-center p-2 rounded-lg bg-white/50 ">
                  <div class="text-lg font-bold text-${content.color}-600 ">${stat.value}</div>
                  <div class="text-xs text-gray-600 ">${stat.label}</div>
                </div>
              `).join('')}
            </div>
            
            <!-- Highlights Section -->
            <div class="space-y-1 mb-4">
              <h4 class="font-semibold text-gray-900  mb-2 text-sm">Key Highlights</h4>
              ${content.highlights.map((highlight: string) => `
                <div class="flex items-center p-1.5 rounded-lg bg-white/30">
                  <svg class="w-3 h-3 text-${content.color}-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  <span class="text-xs text-gray-700 ">${highlight}</span>
                </div>
              `).join('')}
            </div>
            
            <div class="text-center">
              <a href="/${target}" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r ${colorClasses[content.color]} text-white rounded-lg hover:opacity-90 transition-opacity text-sm">
                View ${content.title}
                <svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        `;
      });
    });
  }

  // Cart functionality
  function initCart() {
    const cartToggle = document.getElementById('header-cart-toggle');
    const cartBadge = document.querySelector('.cart-badge');
    
    if (cartToggle) {
      cartToggle.addEventListener('click', () => {
        // Navigate to summary page
        window.location.href = '/summary';
      });
    }
    
    // Cart service should already be available from early initialization
    console.log('🟡 [Header] Cart service check - available:', typeof window !== 'undefined' && (window as any).cartService);
    
    // Update cart badge count
    function updateCartBadge() {
      if (typeof window !== 'undefined' && (window as any).cartService && typeof (window as any).cartService.getCartCount === 'function') {
        (window as any).cartService.getCartCount().then((count: number) => {
          if (cartBadge) {
            if (count > 0) {
              (cartBadge as HTMLElement).textContent = count.toString();
              (cartBadge as HTMLElement).style.display = 'flex';
            } else {
              (cartBadge as HTMLElement).style.display = 'none';
            }
          }
        }).catch((error: any) => {
          console.error('🟡 [Header] Error getting cart count:', error);
          // Hide badge on error
          if (cartBadge) {
            (cartBadge as HTMLElement).style.display = 'none';
          }
        });
      } else {
        // Cart service not ready yet, hide badge
        if (cartBadge) {
          (cartBadge as HTMLElement).style.display = 'none';
        }
      }
    }
    
    // Listen for cart service ready event
    window.addEventListener('cart-service-ready', updateCartBadge);
    
    // Listen for cart updates
    window.addEventListener('cart-updated', updateCartBadge);
    
    // Initial update
    updateCartBadge();
  }

  // Initialize
  initDropdowns();
  initMegamenu();
  initCart();
  window.addEventListener('scroll', handleScroll);
  window.addEventListener('load', handleScroll);
  

</script>

<style>
  /* Clean Minimalistic Header Styles */
  
  /* Initial state - glassmorphism background */
  .ud-header {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    backdrop-filter: blur(8px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Scrolled state - enhanced glassmorphism */
  .ud-header.scrolled {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.08) 100%);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  /* Logo styling - clean minimalistic */
  .navbar-logo {
    transition: all 0.2s ease;
  }

  .navbar-logo:hover {
    transform: translateY(-1px);
  }

  /* Mobile menu styling */
  #navbarCollapse {
    transition: all 0.3s ease-in-out;
  }

  /* Menu items hover effects - subtle */
  .ud-menu-scroll {
    position: relative;
  }

  .ud-menu-scroll::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background: #22c55e;
    transition: all 0.2s ease;
    transform: translateX(-50%);
  }

  .ud-menu-scroll:hover::after {
    width: 100%;
  }

  /* Active menu item styling */
  .ud-menu-scroll.active::after {
    width: 100%;
  }

  /* Dropdown styling - clean minimalistic */
  .dropdown-container {
    position: relative;
  }

  .dropdown-toggle {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .dropdown-menu {
    z-index: 1000;
    min-width: 200px;
    pointer-events: none;
    width: 900px;
    left: 50%;
    transform: translateX(-50%) translateY(-10px);
  }

  .dropdown-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
    pointer-events: auto;
  }



  /* Megamenu specific styling */
  .dropdown-menu .grid {
    pointer-events: auto;
  }

  .dropdown-menu a {
    pointer-events: auto;
  }

  /* Smooth transitions for all elements */
  * {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .ud-header.scrolled {
      background: rgba(255, 255, 255, 0.98);
    }
    
    .dark .ud-header.scrolled {
      background: rgba(17, 24, 39, 0.98);
    }
    
    .dropdown-menu {
      position: static;
      opacity: 1;
      visibility: visible;
      transform: none;
      background: transparent;
      box-shadow: none;
      border: none;
      margin-top: 0;
      padding-left: 1rem;
    }
  }

  /* Mobile menu styles */
  @media (max-width: 1023px) {
    .dropdown-menu {
      position: static !important;
      width: 100% !important;
      max-width: none !important;
      transform: none !important;
      margin-top: 0.5rem;
      margin-bottom: 1rem;
      opacity: 1 !important;
      visibility: visible !important;
    }
    
    .dropdown-menu.show {
      display: block;
    }
    
    .dropdown-menu:not(.show) {
      display: none;
    }
    
    /* Mobile menu animation */
    #navbarCollapse {
      transform: translateY(-10px);
      opacity: 0;
      transition: all 0.3s ease;
      display: none;
      position: absolute;
      top: 100%;
      right: 0;
      z-index: 1000;
    }
    
    #navbarCollapse:not(.hidden) {
      transform: translateY(0);
      opacity: 1;
      display: block;
    }
    
    /* Ensure mobile menu is visible when not hidden */
    #navbarCollapse.show {
      display: block !important;
      opacity: 1 !important;
      transform: translateY(0) !important;
      visibility: visible !important;
    }
    
    /* Force mobile menu to be visible when not hidden */
    #navbarCollapse:not(.hidden):not(.lg\:block) {
      display: block !important;
    }
  }

  /* Tablet adjustments */
  @media (min-width: 640px) and (max-width: 1023px) {
    .dropdown-menu {
      margin-left: 1rem;
      margin-right: 1rem;
    }
  }

  /* Flex layout for all screen sizes */
  .ud-header {
    flex-wrap: nowrap !important;
  }
  
  .ud-header .container > div {
    flex-wrap: nowrap !important;
  }
  
  /* Small mobile adjustments */
  @media (max-width: 639px) {
    .ud-header .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .navbar-logo span {
      font-size: 1.125rem;
    }
    
    /* Ensure logo and icons stay on same line */
    .ud-header .flex {
      flex-wrap: nowrap !important;
    }
    
    .navbar-logo {
      flex-shrink: 0;
    }
    
    /* Reduce logo text size on very small screens */
    @media (max-width: 480px) {
      .navbar-logo span {
        font-size: 1rem;
      }
      
      .navbar-logo .w-8 {
        width: 1.5rem;
        height: 1.5rem;
      }
      
      .navbar-logo .w-5 {
        width: 1rem;
        height: 1rem;
      }
    }
  }
  
  /* Ensure no wrapping on all screen sizes */
  @media (min-width: 640px) {
    .ud-header .flex {
      flex-wrap: nowrap !important;
    }
  }

  /* Animation for scroll detection */
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .ud-header.scrolled {
    animation: fadeInDown 0.3s ease-out;
  }
</style>
