---
export interface Props {
  title?: string;
  cases?: Array<{
    logo: string;
    title: string;
    client: string;
    engagement: string;
    success: string;
    challenge: string;
    outcomes: string[];
    quote: string;
    quoteAuthor: string;
    button: { label: string; href: string };
  }>;
}

const defaultCases = [
  {
    logo: "/assets/testimonials/author-01.jpg",
    title: "Security Patrol App Revamp â€” With Ongoing Feature Delivery",
    client: "B2B SaaS Company in Security Tech",
    engagement: "ðŸ‘¥ Full-Stack Dev Pod",
    success: "ðŸ”„ Legacy Modernization & Continuous Delivery",
    challenge: "Rewrite legacy Cordova app, improve stability & launch face-recognition attendance",
    outcomes: [
      "Rebuilt app in Ionic + Capacitor",
      "Delivered weekly features with full QA",
      "Recovered lost clients within 2 months"
    ],
    quote: "It's like having a product team on demand â€” we've shipped more in 3 months than we did in the last year.",
    quoteAuthor: "CEO",
    button: { label: "Read Case Study", href: "#" }
  },
  {
    logo: "/assets/testimonials/author-02.jpg",
    title: "E-commerce Feature Expansion â€” Payments + Analytics",
    client: "Regional Retail Brand Entering D2C",
    engagement: "ðŸŽ¯ Feature Add-On Pack",
    success: "ðŸ’¸ Revenue-Ready Feature Rollout",
    challenge: "Add Razorpay integration + product usage analytics",
    outcomes: [
      "Delivered & deployed in 2.5 weeks",
      "Enabled full checkout flow & customer tracking",
      "Now working on mobile app pack"
    ],
    quote: "Their pack-based approach gave us clarity and speed â€” no back and forth, just delivery.",
    quoteAuthor: "Tech Lead",
    button: { label: "Read Case Study", href: "#" }
  }
];

const { title = "Success Stories", cases = defaultCases } = Astro.props;
---
<section class="py-16 bg-gradient-to-br from-blue-50 to-green-50 dark:from-slate-800 dark:to-slate-900">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-12 text-dark dark:text-white">{title}</h2>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
      {cases.map((c) => (
        <div class="bg-white dark:bg-slate-800 rounded-2xl shadow-lg p-8 flex flex-col h-full transition-transform duration-300 hover:-translate-y-2 group border border-gray-100 dark:border-slate-700">
          <!-- Header with Logo and Client -->
          <div class="flex items-center mb-6">
            <img src={c.logo} alt={c.client + ' logo'} class="w-16 h-16 rounded-full mr-4 shadow-lg" />
            <div>
              <div class="text-sm font-medium text-blue-600 dark:text-blue-400 mb-1">{c.client}</div>
              <div class="text-xs text-gray-500 dark:text-gray-400">{c.engagement}</div>
            </div>
          </div>
          
          <!-- Title -->
          <h3 class="text-xl font-bold mb-4 text-dark dark:text-white leading-tight">{c.title}</h3>
          
          <!-- Success Badge -->
          {c.success && (
            <div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 mb-4 w-fit">
              {c.success}
            </div>
          )}
          
          <!-- Challenge -->
          {c.challenge && (
            <div class="mb-4">
              <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Challenge:</h4>
              <p class="text-sm text-gray-600 dark:text-gray-400 leading-relaxed">{c.challenge}</p>
            </div>
          )}
          
          <!-- Outcomes -->
          <div class="mb-6">
            <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Outcome:</h4>
            <ul class="space-y-1">
              {c.outcomes && c.outcomes.map((outcome) => (
                <li class="flex items-start text-sm text-gray-600 dark:text-gray-400">
                  <span class="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                  {outcome}
                </li>
              ))}
            </ul>
          </div>
          
          <!-- Quote -->
          {c.quote && (
            <div class="bg-gray-50 dark:bg-slate-700 rounded-xl p-4 mb-6 flex-1">
              <div class="text-sm text-gray-700 dark:text-gray-300 italic mb-2">"{c.quote}"</div>
              <div class="text-xs font-medium text-gray-600 dark:text-gray-400">â€” {c.quoteAuthor}</div>
            </div>
          )}
          
          <!-- CTA Button -->
          <a href={c.button.href} class="inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105">
            {c.button.label}
            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        </div>
      ))}
    </div>
  </div>
</section> 