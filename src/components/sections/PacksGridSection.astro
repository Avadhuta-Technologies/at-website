---
export interface Props {
  title: string;
  categories?: Array<{
    id: string;
    title: string;
    description: string;
    packs: Array<{
      id: string;
      title: string;
      description: string;
      icon: string;
      badge: string;
      badgeColor: string;
      deliverables?: string[];
      timeline: string;
      priceINR: string;
      priceUSD: string;
    }>;
  }>;
  className?: string;
}

const { title, categories = [], className = "" } = Astro.props;

// Debug logging
console.log('PacksGridSection received categories:', categories);

// Utility functions
function getBadgeColorClass(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'bg-blue-100 dark:bg-blue-900',
    'purple': 'bg-purple-100 dark:bg-purple-900',
    'orange': 'bg-orange-100 dark:bg-orange-900',
    'teal': 'bg-teal-100 dark:bg-teal-900',
    'green': 'bg-green-100 dark:bg-green-900',
    'indigo': 'bg-indigo-100 dark:bg-indigo-900',
    'cyan': 'bg-cyan-100 dark:bg-cyan-900'
  };
  return colorMap[color] || 'bg-blue-100 dark:bg-blue-900';
}

function getBadgeStyle(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'bg-blue-100 text-blue-800',
    'purple': 'bg-purple-100 text-purple-800',
    'orange': 'bg-orange-100 text-orange-800',
    'teal': 'bg-teal-100 text-teal-800',
    'green': 'bg-green-100 text-green-800',
    'indigo': 'bg-indigo-100 text-indigo-800',
    'cyan': 'bg-cyan-100 text-cyan-800'
  };
  return colorMap[color] || 'bg-blue-100 text-blue-800';
}

function getDotColor(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'bg-blue-500',
    'purple': 'bg-purple-500',
    'orange': 'bg-orange-500',
    'teal': 'bg-teal-500',
    'green': 'bg-green-500',
    'indigo': 'bg-indigo-500',
    'cyan': 'bg-cyan-500'
  };
  return colorMap[color] || 'bg-blue-500';
}

function getGradientClass(color: string): string {
  const colorMap: Record<string, string> = {
    'blue': 'from-blue-500 to-cyan-500',
    'purple': 'from-purple-500 to-pink-500',
    'orange': 'from-orange-500 to-red-500',
    'teal': 'from-teal-500 to-green-500',
    'green': 'from-green-500 to-emerald-500',
    'indigo': 'from-indigo-500 to-purple-500',
    'cyan': 'from-cyan-500 to-blue-500'
  };
  return colorMap[color] || 'from-blue-500 to-cyan-500';
}
---

<section class={`py-16 bg-gradient-to-br from-gray-50 to-green-50 dark:from-dark-2 dark:to-dark-3 ${className}`}>
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-dark dark:text-white animate-fade-in-up">
        {title}
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto animate-fade-in-up animation-delay-200">
        Fixed-scope, one-time delivery for specific project goals with clear timelines and outcomes
      </p>
    </div>
    
    {categories && categories.length > 0 ? categories.map((category, categoryIndex) => (
      <div class="mb-16 last:mb-0">
        {/* Category Header */}
        <div class="text-center mb-12">
          <h3 class="text-2xl md:text-3xl font-bold mb-4 text-dark dark:text-white">
            {category.title}
          </h3>
          <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            {category.description}
          </p>
        </div>
        
        {/* Packs Grid */}
        <div class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          {category.packs && category.packs.length > 0 ? category.packs.map((pack, packIndex) => (
            <div class={`pack-card group relative bg-white dark:bg-dark rounded-2xl shadow-lg hover:shadow-2xl overflow-hidden flex flex-col h-full animate-fade-in-up animation-delay-${(categoryIndex * 200) + (packIndex + 1) * 100}`}>
              <div class="relative z-10 flex flex-col h-full p-8">
                {/* Header */}
                <div class="flex items-center justify-between mb-6">
                  <div class={`w-16 h-16 rounded-2xl bg-gradient-to-r ${getGradientClass(pack.badgeColor)} flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg`}>
                    <img src={pack.icon} alt={`${pack.title} Icon`} class="w-8 h-8 filter brightness-0 invert" />
                  </div>
                  <span class={`text-xs px-3 py-1 rounded-full font-semibold ${getBadgeStyle(pack.badgeColor)} transform transition-all duration-300 group-hover:scale-105`}>
                    {pack.badge}
                  </span>
                </div>
                
                {/* Title and Description */}
                <div class="mb-6">
                  <h3 class="font-bold text-xl mb-3 text-dark dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                    {pack.title}
                  </h3>
                  <p class="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {pack.description}
                  </p>
                </div>
                
                {/* Deliverables */}
                {pack.deliverables && pack.deliverables.length > 0 && (
                  <div class="mb-6">
                    <h4 class="font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3 flex items-center">
                      <svg class="w-4 h-4 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                      Key Deliverables
                    </h4>
                    <ul class="space-y-2">
                      {pack.deliverables.slice(0, 3).map((deliverable: string) => (
                        <li class="flex items-start text-sm text-gray-600 dark:text-gray-400 group/item">
                          <span class="w-2 h-2 bg-green-500 rounded-full mr-3 mt-2 flex-shrink-0 transition-all duration-300 group-hover/item:scale-150"></span>
                          <span class="leading-relaxed">{deliverable}</span>
                        </li>
                      ))}
                      {pack.deliverables.length > 3 && (
                        <li class="text-xs text-green-600 dark:text-green-400 font-medium">
                          +{pack.deliverables.length - 3} more deliverables
                        </li>
                      )}
                    </ul>
                  </div>
                )}
                
                {/* Timeline and Pricing - Fixed at bottom */}
                <div class="mt-auto pt-6 border-t border-gray-100 dark:border-gray-700">
                  <div class="flex items-center gap-2 mb-3">
                    <span class={`text-xs px-3 py-1 rounded-full font-medium ${getBadgeStyle(pack.badgeColor)}`}>
                      <b>Timeline:</b> {pack.timeline}
                    </span>
                  </div>
                  <div class="mb-4">
                    <div class="font-bold text-2xl text-dark dark:text-white">{pack.priceINR}</div>
                    <div class="font-semibold text-lg text-gray-600 dark:text-gray-400">{pack.priceUSD}</div>
                  </div>
                  
                  {/* Action Buttons */}
                  <div class="flex gap-3">
                    <a href="#" class="flex-1 text-center py-3 px-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl">
                      Get Started
                    </a>
                    <a href={`/packs/${pack.id}`} class="flex-1 border-2 text-center py-3 px-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 border-green-500 text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20">
                      Details
                    </a>
                  </div>
                </div>
              </div>
              
              {/* Hover effect overlay */}
              <div class="absolute inset-0 bg-gradient-to-br from-green-500/0 to-emerald-500/0 group-hover:from-green-500/5 group-hover:to-emerald-500/5 transition-all duration-500 rounded-2xl"></div>
            </div>
          )) : (
            <div class="col-span-full text-center py-12">
              <p class="text-gray-500 dark:text-gray-400">No packs available in this category.</p>
            </div>
          )}
        </div>
      </div>
    )) : (
      <div class="text-center py-12">
        <p class="text-gray-500 dark:text-gray-400">No categories available at the moment.</p>
      </div>
    )}
  </div>
</section>

<style>
  .pack-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .pack-card:hover {
    transform: translateY(-12px) scale(1.02);
    box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.25);
  }

  .pack-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #10B981, #059669, #047857);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .pack-card:hover::before {
    opacity: 1;
  }

  /* Animation delays */
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  .animation-delay-800 { animation-delay: 0.8s; }
  .animation-delay-1000 { animation-delay: 1s; }
  .animation-delay-1200 { animation-delay: 1.2s; }
</style> 