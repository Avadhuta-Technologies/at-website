---
export interface Step {
  number: string;
  title: string;
  description: string;
  icon?: string;
}
export interface Props {
  // New format - single data object
  data?: {
    title?: string;
    steps?: Step[];
  };
  // Old format - individual props (for backward compatibility)
  title?: string;
  steps?: Step[];
  className?: string;
}

const defaultSteps: Step[] = [
  { 
    number: "1", 
    title: "Choose Your Pod", 
    description: "Pick from a curated set of delivery pods—built for MVPs, AI apps, ecommerce, design sprints, or full product builds. Each pod comes pre-structured with the right blend of human expertise and AI-powered workflows.\n\nBuildPod: Full-stack development team\nVisionPod: UX/UI design & prototyping\nCodePod: Developer + AI pair-programming unit\nLaunchPod: End-to-end product launch squad", 
    icon: "choose-pod" 
  },
  { 
    number: "2", 
    title: "Align on Outcomes", 
    description: "We define clear goals, scope, and success metrics upfront. No hourly billing—just outcome-based delivery that keeps everyone focused and accountable.\n\nYou get:\nTransparent timelines\nMilestone-driven execution\nFlexible scaling as your needs grow", 
    icon: "align-outcomes" 
  },
  { 
    number: "3", 
    title: "Your Pod Gets to Work", 
    description: "Your NovaPod starts delivering from day one—powered by human builders, supported by AI agents. From design to code to QA, everything runs in sync, fast.\n\nWhat's inside a pod?\nProduct managers\nEngineers + AI dev copilots\nDesigners + AI research assistants\nAutomated workflows and delivery pipelines", 
    icon: "pod-working" 
  },
  { 
    number: "4", 
    title: "Review. Launch. Iterate.", 
    description: "You stay in control with regular updates, reviews, and testable outputs. Once launched, your pod can evolve into a support or growth pod—or spin up a new one instantly.\n\nBuilt to adapt:\nRetain the same pod or rotate\nLayer in new pods for expansion\nScale delivery without re-hiring", 
    icon: "launch-iterate" 
  }
];

const { data, title: titleProp, steps: stepsProp, className = "" } = Astro.props;

// Use data object if provided, otherwise use individual props
const title = data?.title || titleProp || "How It Works";
const steps = data?.steps || stepsProp || defaultSteps;

// SVG Icon Components - Each with unique design matching step content
const getSvgIcon = (iconType: string) => {
  switch (iconType) {
    case "pick-pod":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
      </svg>`;
    case "select-pack":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 12l4-2.5V7"></path>
      </svg>`;
    case "kick-off":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
      </svg>`;
    case "review-launch":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v3m0 0v3m0-3h3m-3 0H9"></path>
      </svg>`;
    case "stack-scale":
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4m0 0v4m0-4h4m-4 0H8"></path>
      </svg>`;
    default:
      return `<svg class="w-8 h-8" fill="none" stroke="white" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>`;
  }
};
---
<section class={`py-16 bg-transparent ${className}`}>
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-12 text-dark dark:text-white">{title}</h2>
    
    <!-- Compact Interactive Cards Layout -->
    <div class="max-w-6xl mx-auto">
      <!-- Progress Bar and Icons in One Line -->
      <div class="hidden md:flex items-center justify-between mb-8 relative">
        <!-- Progress Line -->
        <div class="absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 rounded-full connection-line"></div>
        <div class="absolute top-1/2 left-0 h-1 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 rounded-full connection-progress" style="width: 0%"></div>
        
        <!-- Step Icons -->
        {steps.map((step, idx) => (
          <div class="relative z-10 flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-400 via-purple-400 to-pink-400 rounded-full shadow-lg connection-node transition-all duration-300" data-step={idx}>
            <div class="w-6 h-6 flex items-center justify-center">
              <Fragment set:html={getSvgIcon(step.icon || 'default')} />
            </div>
          </div>
        ))}
      </div>

      <!-- Steps Grid -->
      <div data-animate="row-staggered" data-base-delay="200" data-card-delay="80" data-row-delay="150" data-columns-per-row="5" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 md:gap-4">
        {steps.map((step, idx) => (
          <div class="step-card group relative hover-lift" data-step={idx}>
            <!-- Card Container -->
            <div class="bg-white dark:bg-slate-900 rounded-2xl shadow-lg p-6 h-full transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 relative overflow-hidden cursor-pointer border border-gray-100 dark:border-slate-800 flex flex-col">
              
              <!-- Background Pattern -->
              <div class="absolute inset-0 bg-gradient-to-br from-blue-50/30 to-purple-50/30 dark:from-blue-900/10 dark:to-purple-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>

              <!-- Background Icon - Circle centered at bottom-right corner (25% visible) -->
              <div class="absolute bottom-0 right-0 w-32 h-32 opacity-15 dark:opacity-12 transition-opacity duration-300 group-hover:opacity-25 dark:group-hover:opacity-20 rounded-full bg-gradient-to-br from-blue-400/20 via-purple-400/20 to-pink-400/20" style="transform: translate(50%, 50%);">
                <div class="w-full h-full flex items-center justify-center">
                  <div class="w-26 h-26 flex items-center justify-center">
                    <Fragment set:html={getSvgIcon(step.icon || 'default')} />
                  </div>
                </div>
              </div>

              <!-- Subtle Gradient Overlay -->
              <div class="absolute bottom-0 right-0 w-20 h-20 bg-gradient-to-tl from-gray-100/15 via-transparent to-transparent dark:from-gray-800/15 rounded-tl-2xl"></div>

              <!-- Content -->
              <div class="relative z-10 flex-1">
                <!-- Title -->
                <div class="mb-3">
                  <h3 class="text-lg font-bold text-dark dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                    {step.title}
                  </h3>
                </div>
                
                <!-- Collapsible Description -->
                <div class="description-container overflow-hidden transition-all duration-500">
                  {(() => {
                    const parts = step.description.split('\n\n');
                    const mainDescription = parts[0];
                    const listSection = parts.slice(1).join('\n\n');
                    
                    return (
                      <>
                        <div class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed description-text mb-4">
                          {mainDescription}
                        </div>
                        {listSection && (
                          <div class="bg-gradient-to-r from-blue-50/80 to-purple-50/80 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-4 border border-blue-200/50 dark:border-blue-700/30 list-section">
                            <div class="text-gray-700 dark:text-gray-200 text-sm leading-relaxed">
                              {(() => {
                                const lines = listSection.split('\n');
                                const header = lines[0];
                                const items = lines.slice(1);
                                
                                return (
                                  <>
                                    <div class="font-semibold text-blue-700 dark:text-blue-300 mb-2 text-base">
                                      {header}
                                    </div>
                                    <div class="space-y-1">
                                      {items.map(item => (
                                        <div class="flex items-start space-x-3">
                                          <div class="w-5 h-5 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full mt-0.5 flex-shrink-0 flex items-center justify-center shadow-sm">
                                            <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                          </div>
                                          <div class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
                                            {item}
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </>
                                );
                              })()}
                            </div>
                          </div>
                        )}
                      </>
                    );
                  })()}
                </div>
              </div>

              <!-- Hover Border Effect -->
              <div class="absolute inset-0 rounded-2xl border-2 border-transparent group-hover:border-blue-400/30 transition-all duration-300"></div>
            </div>
          </div>
        ))}
      </div>

      <!-- Mobile Progress Indicator -->
      <div class="md:hidden mt-8">
        <div class="flex justify-center space-x-2">
          {steps.map((_, idx) => (
            <div class="w-3 h-3 bg-gray-300 rounded-full progress-dot" data-step={idx}></div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  function initInteractiveCards() {
    const stepCards = document.querySelectorAll('.step-card') as NodeListOf<HTMLElement>;
    const connectionProgress = document.querySelector('.connection-progress') as HTMLElement;
    const progressDots = document.querySelectorAll('.progress-dot') as NodeListOf<HTMLElement>;
    const connectionNodes = document.querySelectorAll('.connection-node') as NodeListOf<HTMLElement>;

    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          const card = entry.target as HTMLElement;
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
          
          // Animate connection node
          const nodeIndex = parseInt(card.dataset.step || '0');
          if (connectionNodes[nodeIndex]) {
            connectionNodes[nodeIndex].style.transform = 'scale(1.2)';
            setTimeout(() => {
              connectionNodes[nodeIndex].style.transform = 'scale(1)';
            }, 300);
          }

          // Update progress
          const progress = ((index + 1) / stepCards.length) * 100;
          if (connectionProgress) {
            connectionProgress.style.width = `${progress}%`;
          }
          
          // Update mobile dots
          if (progressDots[nodeIndex]) {
            progressDots[nodeIndex].classList.add('bg-blue-500');
          }
        }
      });
    }, observerOptions);

    stepCards.forEach(card => observer.observe(card));

    // Card hover interactions with stepper highlighting only
    stepCards.forEach((card, index) => {
      const stepNumber = parseInt(card.dataset.step || '0');
      
      card.addEventListener('mouseenter', () => {
        // Highlight corresponding stepper
        if (connectionNodes[stepNumber]) {
          connectionNodes[stepNumber].classList.add('stepper-highlight');
        }
      });

      card.addEventListener('mouseleave', () => {
        // Remove stepper highlight
        if (connectionNodes[stepNumber]) {
          connectionNodes[stepNumber].classList.remove('stepper-highlight');
        }
      });
    });
  }

  // Initialize on DOM load
  document.addEventListener('DOMContentLoaded', initInteractiveCards);
  document.addEventListener('astro:page-load', initInteractiveCards);
</script>

<style>
  .step-card {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .description-container {
    max-height: none;
    opacity: 1;
  }

  .connection-node {
    transition: all 0.3s ease-out;
  }

  .connection-progress {
    transition: width 0.8s ease-out;
  }

  .progress-dot {
    transition: background-color 0.3s ease-out;
  }

  /* Stepper highlight effect */
  .stepper-highlight {
    transform: scale(1.3) !important;
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.6) !important;
    filter: brightness(1.2) !important;
  }

  /* Always expanded descriptions */
  .step-card .description-container {
    max-height: none !important;
    opacity: 1 !important;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .step-card {
      margin-bottom: 1rem;
    }
    
    .description-container {
      max-height: none !important;
      opacity: 1 !important;
    }
  }

  /* Smooth hover transitions without flash */
  .step-card:hover {
    transform: translateY(-8px);
  }
</style> 