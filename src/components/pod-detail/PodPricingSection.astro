---
interface Props {
  pod: {
    id: string;
    name: string;
    tagline: string;
    pricing: string[];
  };
}

const { pod } = Astro.props;
---

<section class="py-20 " id="pricing">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4 gradient-title">Pricing</h2>
      <p class="text-lg text-gray-600 leading-relaxed">Transparent pricing with no hidden costs</p>
    </div>
    
    <div class="max-w-2xl mx-auto">
      <div class="bg-white rounded-2xl shadow-xl p-8 border border-gray-200">
        <div class="text-center mb-8">
          <div class="text-4xl font-bold text-gray-900 mb-2">{pod.pricing[0]}</div>
          {pod.pricing[1] && (
            <div class="text-gray-600 mb-4">{pod.pricing[1]}</div>
          )}
          <div class="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm font-semibold">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Best Value Guarantee
          </div>
        </div>
        
        <div class="flex sm:flex-row gap-4 justify-center items-center w-full">
          <button 
            id={`pod-pricing-cta-${pod.id}`}
            data-add-to-cart
            data-item-id={pod.id}
            data-item-type="pod"
            data-item-title={pod.name}
            data-item-description={pod.tagline}
            data-item-price={pod.pricing[0]}
            class="flex items-center pod-pricing-cta-btn px-8 py-4 bg-primary-600 text-white font-semibold rounded-xl hover:bg-primary-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            data-action="add">
            <span class="cta-text">Reserve Pod</span>
            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </button>
          <a href="/contact" class="px-8 py-4 border-2 border-primary-600 text-primary-600 font-semibold rounded-xl hover:bg-primary-50 transition-all duration-300">Contact Us</a>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Get the current pod ID from the button's data attribute
  let currentPodId = '';
  
  // Function to get pod ID from button data attribute
  function getCurrentPodId() {
    const button = document.querySelector('.pod-pricing-cta-btn');
    if (button) {
      return button.getAttribute('data-item-id') || '';
    }
    return '';
  }
  
  // Check localStorage and update CTA button accordingly
  document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸ”µ [PodPricingSection] DOMContentLoaded - updating CTA button');
    
    // Get current pod ID from button data attribute
    currentPodId = getCurrentPodId();
    console.log('ðŸ”µ [PodPricingSection] Current pod ID from button:', currentPodId);
    
    // Immediate check with localStorage
    try {
      const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      console.log('ðŸ”µ [PodPricingSection] Immediate localStorage check - cart:', cart);
      console.log('ðŸ”µ [PodPricingSection] Immediate localStorage check - selectedPod:', selectedPod);
      console.log('ðŸ”µ [PodPricingSection] Current pod ID:', currentPodId);
      
      if (selectedPod && selectedPod.id === currentPodId) {
        console.log('ðŸ”µ [PodPricingSection] Pod is in cart - should show Remove Pod');
      } else {
        console.log('ðŸ”µ [PodPricingSection] Pod is not in cart - should show Reserve Pod');
      }
    } catch (error) {
      console.error('ðŸ”µ [PodPricingSection] Error in immediate localStorage check:', error);
    }
    
    setTimeout(() => {
      updatePodPricingCTA();
    }, 100);
  });

  // Listen for cart updates
  document.addEventListener('cart-updated', function() {
    console.log('ðŸ”µ [PodPricingSection] Cart updated event received - updating CTA button');
    // Update current pod ID in case it changed
    currentPodId = getCurrentPodId();
    setTimeout(() => {
      updatePodPricingCTA();
    }, 100);
  });

  // Function to update pod pricing CTA button based on cart state
  async function updatePodPricingCTA() {
    try {
      console.log('ðŸ”µ [PodPricingSection] updatePodPricingCTA called');
      
      // Import the shared utility
      const { SummaryShared } = await import('../../utils/summaryShared.js');
      const shared = new SummaryShared();
      const cart = await shared.getCart();
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      
      console.log('ðŸ”µ [PodPricingSection] Current cart:', cart);
      console.log('ðŸ”µ [PodPricingSection] Selected pod:', selectedPod);
      console.log('ðŸ”µ [PodPricingSection] Current pod ID:', currentPodId);
      
      let button = document.querySelector('.pod-pricing-cta-btn') as HTMLElement;
      console.log('ðŸ”µ [PodPricingSection] Found button with .pod-pricing-cta-btn:', button);
      
      // Update current pod ID before fallback selectors
      currentPodId = getCurrentPodId();
      
      // Fallback selectors if button not found
      if (!button) {
        button = document.querySelector(`[data-add-to-cart][data-item-id="${currentPodId}"]`) as HTMLElement;
        console.log('ðŸ”µ [PodPricingSection] Found button with fallback selector:', button);
      }
      
      if (!button) {
        button = document.querySelector(`#pod-pricing-cta-${currentPodId}`) as HTMLElement;
        console.log('ðŸ”µ [PodPricingSection] Found button with ID selector:', button);
      }
      
      const ctaText = button?.querySelector('.cta-text');
      console.log('ðŸ”µ [PodPricingSection] Found ctaText:', ctaText);
      
      if (button && ctaText) {
        console.log('ðŸ”µ [PodPricingSection] Button and ctaText found - updating...');
        console.log('ðŸ”µ [PodPricingSection] Current button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodPricingSection] Current button classes:', button.className);
        
        if (selectedPod && selectedPod.id === currentPodId) {
          // This pod is already in cart - show "Remove Pod"
          console.log('ðŸ”µ [PodPricingSection] Pod is in cart - updating to "Remove Pod"');
          
          // Update classes
          button.classList.remove('bg-primary-600', 'hover:bg-primary-700');
          button.classList.add('bg-red-500', 'hover:bg-red-600');
          console.log('ðŸ”µ [PodPricingSection] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'remove');
          console.log('ðŸ”µ [PodPricingSection] Updated data-action to: remove');
          
          // Update text
          ctaText.textContent = 'Remove Pod';
          console.log('ðŸ”µ [PodPricingSection] Updated button text to: Remove Pod');
          
          // Update icon to trash/remove icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>';
            console.log('ðŸ”µ [PodPricingSection] Updated icon to trash icon');
          }
        } else {
          // This pod is not in cart - show "Reserve Pod"
          console.log('ðŸ”µ [PodPricingSection] Pod is not in cart - updating to "Reserve Pod"');
          
          // Update classes
          button.classList.remove('bg-red-500', 'hover:bg-red-600');
          button.classList.add('bg-primary-600', 'hover:bg-primary-700');
          console.log('ðŸ”µ [PodPricingSection] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'add');
          console.log('ðŸ”µ [PodPricingSection] Updated data-action to: add');
          
          // Update text
          ctaText.textContent = 'Reserve Pod';
          console.log('ðŸ”µ [PodPricingSection] Updated button text to: Reserve Pod');
          
          // Update icon back to arrow icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>';
            console.log('ðŸ”µ [PodPricingSection] Updated icon to arrow icon');
          }
        }
        
        console.log('ðŸ”µ [PodPricingSection] Final button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodPricingSection] Final button classes:', button.className);
      } else {
        console.log('ðŸ”µ [PodPricingSection] Button or ctaText not found!');
        console.log('ðŸ”µ [PodPricingSection] Button:', button);
        console.log('ðŸ”µ [PodPricingSection] ctaText:', ctaText);
      }
    } catch (error) {
      console.error('ðŸ”µ [PodPricingSection] Error updating CTA button:', error);
    }
  }

  // Handle CTA button clicks
  document.addEventListener('click', async function(e) {
    console.log('ðŸ”µ [PodPricingSection] Click event detected on:', e.target);
    
    if (e.target && (e.target as Element).closest('.pod-pricing-cta-btn')) {
      e.preventDefault();
      e.stopPropagation();
      
      const button = (e.target as Element).closest('.pod-pricing-cta-btn') as HTMLElement;
      if (button) {
        const action = button.getAttribute('data-action') || 'add';
        const podId = button.getAttribute('data-item-id');
        const buttonText = button.querySelector('.cta-text')?.textContent;
        
        console.log('ðŸ”µ [PodPricingSection] CTA button clicked:', { 
          action, 
          podId, 
          buttonText,
          buttonClasses: button.className 
        });
        
        try {
          const { SummaryShared } = await import('../../utils/summaryShared.js');
          const shared = new SummaryShared();
          
          if (action === 'add') {
            // Add pod to cart
            console.log('ðŸ”µ [PodPricingSection] Attempting to add pod to cart...');
            const selectedPod = await shared.selectPodWithConfirmation(podId);
            const success = !!selectedPod;
            if (success) {
              console.log('ðŸ”µ [PodPricingSection] Pod added to cart successfully');
              // Navigate to summary page
              window.location.href = '/summary?step=1';
            } else {
              console.log('ðŸ”µ [PodPricingSection] Failed to add pod to cart');
            }
          } else if (action === 'remove') {
            // Remove pod from cart
            console.log('ðŸ”µ [PodPricingSection] Attempting to remove pod from cart...');
            const success = await shared.removePod();
            if (success) {
              console.log('ðŸ”µ [PodPricingSection] Pod removed from cart successfully');
              // Update button appearance
              updatePodPricingCTA();
            } else {
              console.log('ðŸ”µ [PodPricingSection] Failed to remove pod from cart');
            }
          }
        } catch (error) {
          console.error('ðŸ”µ [PodPricingSection] Error handling CTA button:', error);
        }
      }
    }
  });
</script> 