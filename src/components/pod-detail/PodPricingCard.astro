---
import DiscountedPriceDisplay from '../shared/DiscountedPriceDisplay.astro';

interface Props {
  pod: {
    id: string;
    name: string;
    tagline: string;
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
    pricing?: string[];
    whatsInPod?: {
      description?: string;
      teamComposition?: string[];
    };
  };
}

const { pod } = Astro.props;
---

<div class="pod-pricing-card bg-gradient-to-br from-white to-gray-50 rounded-3xl shadow-2xl border border-gray-100 overflow-hidden transform hover:scale-105 transition-all duration-500">
  <!-- Header with gradient background -->
  <div class="bg-gradient-to-r from-mint-500 to-cerulean-500 p-8 text-white relative overflow-hidden">
    <!-- Background pattern -->
    <div class="absolute inset-0 opacity-10">
      <svg class="w-full h-full" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse">
            <path d="M 10 0 L 0 0 0 10" fill="none" stroke="currentColor" stroke-width="0.5"/>
          </pattern>
        </defs>
        <rect width="100" height="100" fill="url(#grid)" />
      </svg>
    </div>
    
    <!-- Content -->
    <div class="relative z-10 text-center">
      <div class="inline-flex items-center px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-sm font-semibold mb-4">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Best Value Guarantee
      </div>
      
      <h3 class="text-2xl font-bold mb-2">{pod.name}</h3>
      <p class="text-white/90 text-sm">{pod.tagline}</p>
    </div>
  </div>

      <!-- Pricing Section -->
    <div class="p-8">
      <!-- Price Display -->
      <div class="text-center mb-8">
        <div class="mb-4">
          <DiscountedPriceDisplay 
            basePriceINR={pod.basePriceINR}
            basePriceUSD={pod.basePriceUSD}
            discountPercentage={pod.discountPercentage}
            showBadge={true}
            showSavings={true}
            showOriginalPrice={true}
            size="xl"
            variant="conversion"
          />
          <p class="text-sm text-gray-600 mt-2">per month â€¢ No hidden costs</p>
          
          {pod.whatsInPod?.description && (
            <div class="mt-4 p-4 bg-gray-50 rounded-lg">
              <p class="text-sm text-gray-700 leading-relaxed">
                {pod.whatsInPod.description}
              </p>
            </div>
          )}
        </div>
      </div>

    <!-- Features List -->
    <div class="space-y-4 mb-8">
      {pod.whatsInPod?.teamComposition ? (
        pod.whatsInPod.teamComposition.map((member, index) => {
          const colors = [
            { bg: 'from-green-50 to-emerald-50', border: 'border-green-100', icon: 'bg-green-500' },
            { bg: 'from-blue-50 to-cyan-50', border: 'border-blue-100', icon: 'bg-blue-500' },
            { bg: 'from-purple-50 to-violet-50', border: 'border-purple-100', icon: 'bg-purple-500' },
            { bg: 'from-orange-50 to-amber-50', border: 'border-orange-100', icon: 'bg-orange-500' }
          ];
          const color = colors[index % colors.length];
          
          return (
            <div class={`flex items-center space-x-4 p-3 rounded-xl bg-gradient-to-r ${color.bg} border ${color.border}`}>
              <div class={`w-10 h-10 ${color.icon} rounded-lg flex items-center justify-center flex-shrink-0`}>
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
              <div class="flex-1">
                <h4 class="font-semibold text-gray-900">{member.split('â€“')[0]?.trim() || member}</h4>
                <p class="text-sm text-gray-600">{member.split('â€“')[1]?.trim() || 'Team member'}</p>
              </div>
            </div>
          );
        })
      ) : (
        // Fallback to static features if no team composition data
        <>
          <div class="flex items-center space-x-4 p-3 rounded-xl bg-gradient-to-r from-green-50 to-emerald-50 border border-green-100">
            <div class="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900">Dedicated Development Team</h4>
              <p class="text-sm text-gray-600">Full-stack developers, designers, and QA engineers</p>
            </div>
          </div>

          <div class="flex items-center space-x-4 p-3 rounded-xl bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-100">
            <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900">Design & UX Excellence</h4>
              <p class="text-sm text-gray-600">User-centered design with modern UI/UX principles</p>
            </div>
          </div>

          <div class="flex items-center space-x-4 p-3 rounded-xl bg-gradient-to-r from-purple-50 to-violet-50 border border-purple-100">
            <div class="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900">Quality Assurance</h4>
              <p class="text-sm text-gray-600">Comprehensive testing and quality control</p>
            </div>
          </div>

          <div class="flex items-center space-x-4 p-3 rounded-xl bg-gradient-to-r from-orange-50 to-amber-50 border border-orange-100">
            <div class="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900">Infrastructure & Deployment</h4>
              <p class="text-sm text-gray-600">Cloud infrastructure and automated deployment</p>
            </div>
          </div>
        </>
      )}
    </div>

    <!-- CTA Button -->
    <div class="space-y-4">
      <button 
        class="pod-pricing-cta-btn w-full bg-gradient-to-r from-mint-500 to-cerulean-500 hover:from-mint-600 hover:to-cerulean-600 text-white py-4 px-8 rounded-xl font-semibold text-lg transition-all duration-300 transform hover:scale-105 shadow-lg flex items-center justify-center space-x-3 group"
        data-item-id={pod.id}
        data-item-type="pod"
        data-item-title={pod.name}
        data-item-description={pod.tagline}
        data-action="add"
      >
        <span class="cta-text">Reserve Pod</span>
        <svg class="w-5 h-5 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </button>
      

    </div>
  </div>

  <!-- Bottom accent -->
  <div class="h-1 bg-gradient-to-r from-mint-500 to-cerulean-500"></div>
</div>

<script>
  // Get the current pod ID from the button's data attribute
  let currentPodId = '';
  
  // Function to get pod ID from button data attribute
  function getCurrentPodId() {
    const button = document.querySelector('.pod-pricing-cta-btn');
    if (button) {
      return button.getAttribute('data-item-id') || '';
    }
    return '';
  }
  
  // Check localStorage and update CTA button accordingly
  document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸ”µ [PodPricingCard] DOMContentLoaded - updating CTA button');
    
    // Get current pod ID from button data attribute
    currentPodId = getCurrentPodId();
    console.log('ðŸ”µ [PodPricingCard] Current pod ID from button:', currentPodId);
    
    // Immediate check with localStorage
    try {
      const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      console.log('ðŸ”µ [PodPricingCard] Immediate localStorage check - cart:', cart);
      console.log('ðŸ”µ [PodPricingCard] Immediate localStorage check - selectedPod:', selectedPod);
      console.log('ðŸ”µ [PodPricingCard] Current pod ID:', currentPodId);
      
      if (selectedPod && selectedPod.id === currentPodId) {
        console.log('ðŸ”µ [PodPricingCard] Pod is in cart - should show Remove Pod');
      } else {
        console.log('ðŸ”µ [PodPricingCard] Pod is not in cart - should show Reserve Pod');
      }
    } catch (error) {
      console.error('ðŸ”µ [PodPricingCard] Error in immediate localStorage check:', error);
    }
    
    setTimeout(() => {
      updatePodPricingCTA();
    }, 100);
  });

  // Listen for cart updates
  document.addEventListener('cart-updated', function() {
    console.log('ðŸ”µ [PodPricingCard] Cart updated event received - updating CTA button');
    // Update current pod ID in case it changed
    currentPodId = getCurrentPodId();
    setTimeout(() => {
      updatePodPricingCTA();
    }, 100);
  });

  // Function to update pod pricing CTA button based on cart state
  async function updatePodPricingCTA() {
    try {
      console.log('ðŸ”µ [PodPricingCard] updatePodPricingCTA called');
      
      // Import the shared utility
      const { SummaryShared } = await import('../../utils/summaryShared.js');
      const shared = new SummaryShared();
      const cart = await shared.getCart();
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      
      console.log('ðŸ”µ [PodPricingCard] Current cart:', cart);
      console.log('ðŸ”µ [PodPricingCard] Selected pod:', selectedPod);
      console.log('ðŸ”µ [PodPricingCard] Current pod ID:', currentPodId);
      
      let button = document.querySelector('.pod-pricing-cta-btn') as HTMLElement;
      console.log('ðŸ”µ [PodPricingCard] Found button with .pod-pricing-cta-btn:', button);
      
      // Update current pod ID before fallback selectors
      currentPodId = getCurrentPodId();
      
      // Fallback selectors if button not found
      if (!button) {
        button = document.querySelector(`[data-add-to-cart][data-item-id="${currentPodId}"]`) as HTMLElement;
        console.log('ðŸ”µ [PodPricingCard] Found button with fallback selector:', button);
      }
      
      if (!button) {
        button = document.querySelector(`#pod-pricing-cta-${currentPodId}`) as HTMLElement;
        console.log('ðŸ”µ [PodPricingCard] Found button with ID selector:', button);
      }
      
      const ctaText = button?.querySelector('.cta-text');
      console.log('ðŸ”µ [PodPricingCard] Found ctaText:', ctaText);
      
      if (button && ctaText) {
        console.log('ðŸ”µ [PodPricingCard] Button and ctaText found - updating...');
        console.log('ðŸ”µ [PodPricingCard] Current button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodPricingCard] Current button classes:', button.className);
        
        if (selectedPod && selectedPod.id === currentPodId) {
          // This pod is already in cart - show "Remove Pod"
          console.log('ðŸ”µ [PodPricingCard] Pod is in cart - updating to "Remove Pod"');
          
          // Update classes
          button.classList.remove('from-mint-500', 'to-cerulean-500', 'hover:from-mint-600', 'hover:to-cerulean-600');
          button.classList.add('text-gray-600', 'hover:text-red-500', 'bg-transparent', 'hover:bg-red-50/50', '!text-gray-600');
          console.log('ðŸ”µ [PodPricingCard] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'remove');
          console.log('ðŸ”µ [PodPricingCard] Updated data-action to: remove');
          
          // Update text
          ctaText.textContent = 'Remove Pod';
          console.log('ðŸ”µ [PodPricingCard] Updated button text to: Remove Pod');
          
          // Update icon to trash/remove icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>';
            console.log('ðŸ”µ [PodPricingCard] Updated icon to trash icon');
          }
        } else {
          // This pod is not in cart - show "Reserve Pod"
          console.log('ðŸ”µ [PodPricingCard] Pod is not in cart - updating to "Reserve Pod"');
          
          // Update classes
          button.classList.remove('text-gray-600', 'hover:text-red-500', 'bg-transparent', 'hover:bg-red-50/50', '!text-gray-600');
          button.classList.add('from-mint-500', 'to-cerulean-500', 'hover:from-mint-600', 'hover:to-cerulean-600');
          console.log('ðŸ”µ [PodPricingCard] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'add');
          console.log('ðŸ”µ [PodPricingCard] Updated data-action to: add');
          
          // Update text
          ctaText.textContent = 'Reserve Pod';
          console.log('ðŸ”µ [PodPricingCard] Updated button text to: Reserve Pod');
          
          // Update icon back to arrow icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>';
            console.log('ðŸ”µ [PodPricingCard] Updated icon to arrow icon');
          }
        }
        
        console.log('ðŸ”µ [PodPricingCard] Final button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodPricingCard] Final button classes:', button.className);
      } else {
        console.log('ðŸ”µ [PodPricingCard] Button or ctaText not found!');
        console.log('ðŸ”µ [PodPricingCard] Button:', button);
        console.log('ðŸ”µ [PodPricingCard] ctaText:', ctaText);
      }
    } catch (error) {
      console.error('ðŸ”µ [PodPricingCard] Error updating CTA button:', error);
    }
  }

  // Handle CTA button clicks with double-click protection
  document.addEventListener('click', async function(e) {
    console.log('ðŸ”µ [PodPricingCard] Click event detected on:', e.target);
    
    const target = e.target as HTMLElement;
    const button = target.closest('.pod-pricing-cta-btn') as HTMLElement;
    
    if (button) {
      // Prevent double-clicks
      if (button.disabled) {
        console.log('ðŸ”µ [PodPricingCard] Button already processing, ignoring duplicate click');
        return;
      }
      
      e.preventDefault();
      e.stopPropagation();
      
      const action = button.getAttribute('data-action') || 'add';
      const podId = button.getAttribute('data-item-id');
      const buttonText = button.querySelector('.cta-text')?.textContent;
      
      console.log('ðŸ”µ [PodPricingCard] CTA button clicked:', { 
        action, 
        podId, 
        buttonText,
        buttonClasses: button.className 
      });
      
      // Disable button to prevent double-clicks
      button.disabled = true;
      const originalText = button.querySelector('.cta-text')?.textContent;
      const originalIcon = button.querySelector('svg')?.innerHTML;
      
      // Show loading state
      const ctaText = button.querySelector('.cta-text');
      if (ctaText) {
        ctaText.textContent = 'Processing...';
      }
      
      try {
        const { SummaryShared } = await import('../../utils/summaryShared.js');
        const shared = new SummaryShared();
        
        if (action === 'add') {
          // Add pod to cart
          console.log('ðŸ”µ [PodPricingCard] Attempting to add pod to cart...');
          const selectedPod = await shared.selectPodWithConfirmation(podId);
          const success = !!selectedPod;
          if (success) {
            console.log('ðŸ”µ [PodPricingCard] Pod added to cart successfully');
            // Navigate to summary page
            window.location.href = '/summary?step=1';
          } else {
            console.log('ðŸ”µ [PodPricingCard] Failed to add pod to cart');
            // Re-enable button on error
            button.disabled = false;
            if (ctaText) ctaText.textContent = originalText;
            const icon = button.querySelector('svg');
            if (icon && originalIcon) icon.innerHTML = originalIcon;
          }
        } else if (action === 'remove') {
          // Remove pod from cart with confirmation
          console.log('ðŸ”µ [PodPricingCard] Attempting to remove pod from cart...');
          
          const cart = await shared.getCart();
          const selectedPod = cart.find((item) => item.type === 'pod');
          const podName = selectedPod?.name || 'Current Pod';
          
          if ((window as any).removeItemConfirmationModal) {
            (window as any).removeItemConfirmationModal.show(
              podName,
              'pod',
              async () => {
                // Confirm callback
                const success = await shared.removePod();
                if (success) {
                  console.log('ðŸ”µ [PodPricingCard] Pod removed from cart successfully');
                  // Update button appearance
                  updatePodPricingCTA();
                } else {
                  console.log('ðŸ”µ [PodPricingCard] Failed to remove pod from cart');
                  // Re-enable button on error
                  button.disabled = false;
                  if (ctaText) ctaText.textContent = originalText;
                  const icon = button.querySelector('svg');
                  if (icon && originalIcon) icon.innerHTML = originalIcon;
                }
              },
              () => {
                // Cancel callback - re-enable button
                console.log('ðŸ”µ [PodPricingCard] Pod removal cancelled');
                button.disabled = false;
                if (ctaText) ctaText.textContent = originalText;
                const icon = button.querySelector('svg');
                if (icon && originalIcon) icon.innerHTML = originalIcon;
              }
            );
          } else {
            // Fallback to direct removal if modal not available
            const success = await shared.removePod();
            if (success) {
              console.log('ðŸ”µ [PodPricingCard] Pod removed from cart successfully');
              // Update button appearance
              updatePodPricingCTA();
            } else {
              console.log('ðŸ”µ [PodPricingCard] Failed to remove pod from cart');
              // Re-enable button on error
              button.disabled = false;
              if (ctaText) ctaText.textContent = originalText;
              const icon = button.querySelector('svg');
              if (icon && originalIcon) icon.innerHTML = originalIcon;
            }
          }
        }
      } catch (error) {
        console.error('ðŸ”µ [PodPricingCard] Error handling CTA button:', error);
        // Re-enable button on error
        button.disabled = false;
        if (ctaText) ctaText.textContent = originalText;
        const icon = button.querySelector('svg');
        if (icon && originalIcon) icon.innerHTML = originalIcon;
      }
    }
  });
</script>

<style>
  /* Ensure remove button text is visible */
  .pod-pricing-cta-btn[data-action="remove"] {
    color: #4b5563 !important; /* text-gray-600 */
  }
  
  .pod-pricing-cta-btn[data-action="remove"]:hover {
    color: #ef4444 !important; /* text-red-500 */
  }
</style> 