---
export interface Props {
  pod: {
    id: string;
    name: string;
    tagline: string;
    pricing: string[];
    basePriceINR: number;
    basePriceUSD: number;
    discountPercentage: number;
  };
}

const { pod } = Astro.props;
---

<section class="relative overflow-hidden">
   
  <div class="relative z-10 container mx-auto px-4 py-20 md:py-32">
    <div class="max-w-4xl mx-auto text-center">
      
      <!-- Badge -->
      <div class="inline-flex items-center px-4 py-2 bg-primary-50 text-primary-700 text-sm font-semibold rounded-full mb-8 border border-primary-200">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
        </svg>
        Pod
      </div>
      
      <!-- Main Headline -->
      <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-6 leading-tight">
        {pod.name}
      </h1>
      
      <!-- Subtitle -->
      <h2 class="text-xl md:text-2xl text-gray-600 mb-8 leading-relaxed max-w-3xl mx-auto">
        {pod.tagline}
      </h2>
      
      <!-- CTA Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8">
        <button 
          id="pod-hero-cta-{pod.id}"
          data-add-to-cart
          data-item-id={pod.id}
          data-item-type="pod"
          data-item-title={pod.name}
          data-item-description={pod.tagline}
          data-item-price-inr={pod.basePriceINR}
          data-item-price-usd={pod.basePriceUSD}
          class="pod-hero-cta-btn inline-flex items-center px-8 py-4 bg-primary-600 text-white font-semibold rounded-lg hover:bg-primary-700 transition-colors duration-200 group"
        >
          <span class="cta-text">Reserve Pod</span>
          <svg class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </button>
        <a href="#details" class="inline-flex items-center px-8 py-4 bg-white text-gray-700 font-semibold rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors duration-200 group">
          <span>Learn More</span>
          <svg class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </a>
      </div>
      
      <!-- Stats -->
      <div class="flex items-center justify-center space-x-8 text-gray-500 text-sm">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2 text-green-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          4.9/5 Rating
        </div>
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2 text-green-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          98% Success Rate
        </div>
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2 text-green-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          2-6 Week Delivery
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Get the current pod ID from the button's data attribute
  let currentPodId = '';
  
  // Function to get pod ID from button data attribute
  function getCurrentPodId() {
    const button = document.querySelector('.pod-hero-cta-btn');
    if (button) {
      return button.getAttribute('data-item-id') || '';
    }
    return '';
  }
  
  // Check localStorage and update CTA button accordingly
  document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸ”µ [PodHeroSection] DOMContentLoaded - updating CTA button');
    
    // Get current pod ID from button data attribute
    currentPodId = getCurrentPodId();
    console.log('ðŸ”µ [PodHeroSection] Current pod ID from button:', currentPodId);
    
    // Immediate check with localStorage
    try {
      const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      console.log('ðŸ”µ [PodHeroSection] Immediate localStorage check - cart:', cart);
      console.log('ðŸ”µ [PodHeroSection] Immediate localStorage check - selectedPod:', selectedPod);
      console.log('ðŸ”µ [PodHeroSection] Current pod ID:', currentPodId);
      
      if (selectedPod && selectedPod.id === currentPodId) {
        console.log('ðŸ”µ [PodHeroSection] Pod is in cart - should show Remove Pod');
      } else {
        console.log('ðŸ”µ [PodHeroSection] Pod is not in cart - should show Reserve Pod');
      }
    } catch (error) {
      console.error('ðŸ”µ [PodHeroSection] Error in immediate localStorage check:', error);
    }
    
    setTimeout(() => {
      updatePodHeroCTA();
    }, 100);
  });

  // Listen for cart updates
  document.addEventListener('cart-updated', function() {
    console.log('ðŸ”µ [PodHeroSection] Cart updated event received - updating CTA button');
    // Update current pod ID in case it changed
    currentPodId = getCurrentPodId();
    setTimeout(() => {
      updatePodHeroCTA();
    }, 100);
  });

  // Update CTA button when cart changes
  window.addEventListener('cart-updated', function() {
    updatePodHeroCTA();
  });

  // Function to update pod hero CTA button based on cart state
  async function updatePodHeroCTA() {
    try {
      console.log('ðŸ”µ [PodHeroSection] updatePodHeroCTA called');
      
      // Import the shared utility
      const { SummaryShared } = await import('../../utils/summaryShared.js');
      const shared = new SummaryShared();
      const cart = await shared.getCart();
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      
      console.log('ðŸ”µ [PodHeroSection] Current cart:', cart);
      console.log('ðŸ”µ [PodHeroSection] Selected pod:', selectedPod);
      console.log('ðŸ”µ [PodHeroSection] Current pod ID:', currentPodId);
      
      let button = document.querySelector('.pod-hero-cta-btn') as HTMLElement;
      console.log('ðŸ”µ [PodHeroSection] Found button with .pod-hero-cta-btn:', button);
      
      // Update current pod ID before fallback selectors
      currentPodId = getCurrentPodId();
      
      // Fallback selectors if button not found
      if (!button) {
        button = document.querySelector(`[data-add-to-cart][data-item-id="${currentPodId}"]`) as HTMLElement;
        console.log('ðŸ”µ [PodHeroSection] Found button with fallback selector:', button);
      }
      
      if (!button) {
        button = document.querySelector(`#pod-hero-cta-${currentPodId}`) as HTMLElement;
        console.log('ðŸ”µ [PodHeroSection] Found button with ID selector:', button);
      }
      
      const ctaText = button?.querySelector('.cta-text');
      console.log('ðŸ”µ [PodHeroSection] Found ctaText:', ctaText);
      
      if (button && ctaText) {
        console.log('ðŸ”µ [PodHeroSection] Button and ctaText found - updating...');
        console.log('ðŸ”µ [PodHeroSection] Current button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodHeroSection] Current button classes:', button.className);
        
        if (selectedPod && selectedPod.id === currentPodId) {
          // This pod is already in cart - show "Remove Pod"
          console.log('ðŸ”µ [PodHeroSection] Pod is in cart - updating to "Remove Pod"');
          
          // Update classes
          button.classList.remove('bg-primary-600', 'hover:bg-primary-700');
          button.classList.add('text-gray-600', 'hover:text-red-500', 'bg-transparent', 'hover:bg-red-50/50', '!text-gray-600');
          console.log('ðŸ”µ [PodHeroSection] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'remove');
          console.log('ðŸ”µ [PodHeroSection] Updated data-action to: remove');
          
          // Update text
          ctaText.textContent = 'Remove Pod';
          console.log('ðŸ”µ [PodHeroSection] Updated button text to: Remove Pod');
          
          // Update icon to trash/remove icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>';
            console.log('ðŸ”µ [PodHeroSection] Updated icon to trash icon');
          }
        } else {
          // This pod is not in cart - show "Reserve Pod"
          console.log('ðŸ”µ [PodHeroSection] Pod is not in cart - updating to "Reserve Pod"');
          
          // Update classes
          button.classList.remove('text-gray-600', 'hover:text-red-500', 'bg-transparent', 'hover:bg-red-50/50', '!text-gray-600');
          button.classList.add('bg-primary-600', 'hover:bg-primary-700');
          console.log('ðŸ”µ [PodHeroSection] Updated button classes:', button.className);
          
          // Update action
          button.setAttribute('data-action', 'add');
          console.log('ðŸ”µ [PodHeroSection] Updated data-action to: add');
          
          // Update text
          ctaText.textContent = 'Reserve Pod';
          console.log('ðŸ”µ [PodHeroSection] Updated button text to: Reserve Pod');
          
          // Update icon back to arrow icon
          const icon = button.querySelector('svg');
          if (icon) {
            icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>';
            console.log('ðŸ”µ [PodHeroSection] Updated icon to arrow icon');
          }
        }
        
        console.log('ðŸ”µ [PodHeroSection] Final button text:', ctaText.textContent);
        console.log('ðŸ”µ [PodHeroSection] Final button classes:', button.className);
      } else {
        console.log('ðŸ”µ [PodHeroSection] Button or ctaText not found!');
        console.log('ðŸ”µ [PodHeroSection] Button:', button);
        console.log('ðŸ”µ [PodHeroSection] ctaText:', ctaText);
      }
    } catch (error) {
      console.error('ðŸ”µ [PodHeroSection] Error updating CTA button:', error);
    }
  }

  // Handle CTA button clicks
  document.addEventListener('click', async function(e) {
    console.log('ðŸ”µ [PodHeroSection] Click event detected on:', e.target);
    
    if (e.target && (e.target as Element).closest('.pod-hero-cta-btn')) {
      e.preventDefault();
      e.stopPropagation();
      
      const button = (e.target as Element).closest('.pod-hero-cta-btn') as HTMLElement;
      if (button) {
        const action = button.getAttribute('data-action') || 'add';
        const podId = button.getAttribute('data-item-id');
        const buttonText = button.querySelector('.cta-text')?.textContent;
        
        console.log('ðŸ”µ [PodHeroSection] CTA button clicked:', { 
          action, 
          podId, 
          buttonText,
          buttonClasses: button.className 
        });
        
        try {
          const { SummaryShared } = await import('../../utils/summaryShared.js');
          const shared = new SummaryShared();
          
          if (action === 'add') {
            // Add pod to cart
            console.log('ðŸ”µ [PodHeroSection] Attempting to add pod to cart...');
            const selectedPod = await shared.selectPodWithConfirmation(podId);
            const success = !!selectedPod;
            if (success) {
              console.log('ðŸ”µ [PodHeroSection] Pod added to cart successfully');
              // Navigate to summary page
              window.location.href = '/summary?step=1';
            } else {
              console.log('ðŸ”µ [PodHeroSection] Failed to add pod to cart');
            }
          } else if (action === 'remove') {
            // Remove pod from cart
            console.log('ðŸ”µ [PodHeroSection] Attempting to remove pod from cart...');
            const success = await shared.removePod();
            if (success) {
              console.log('ðŸ”µ [PodHeroSection] Pod removed from cart successfully');
              // Update button appearance
              updatePodHeroCTA();
            } else {
              console.log('ðŸ”µ [PodHeroSection] Failed to remove pod from cart');
            }
          }
        } catch (error) {
          console.error('ðŸ”µ [PodHeroSection] Error handling CTA button:', error);
        }
      }
    }
  });
</script>

<style>
  /* Ensure remove button text is visible in pod hero section */
  .pod-hero-cta-btn[data-action="remove"] {
    color: #4b5563 !important; /* text-gray-600 */
  }
  
  .pod-hero-cta-btn[data-action="remove"]:hover {
    color: #ef4444 !important; /* text-red-500 */
  }
  
  /* Override any inherited white text */
  .pod-hero-cta-btn.text-gray-600 {
    color: #4b5563 !important;
  }
  
  .pod-hero-cta-btn.text-gray-600:hover {
    color: #ef4444 !important;
  }
</style> 