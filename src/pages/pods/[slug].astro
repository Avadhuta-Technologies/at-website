---
import Layout from '../../layouts/Layout.astro';
import { catalogUtils } from '../../content/catalog/_index.js';
import { packsCatalog } from '../../content/catalog/_packs.js';
import { generatePodSlug } from '../../utils/slugUtils.js';
import {
  PodHeroSection,
  PodIdealForSection,
  PodWhatsInSection,
  PodWhatYouGetSection,
  PodDeliveryTimelinesSection,
  PodWhyTrustSection,
  PodPastUseCasesSection,
  PodPricingSection,
  PodAddPacksSection,
  PodReadyToLaunchSection
} from '../../components/pod-detail/index.js';
import RemoveItemConfirmationModal from '../../components/shared/RemoveItemConfirmationModal.astro';

export async function getStaticPaths() {
  const { pods } = catalogUtils.getAllProducts();
  return pods.map((pod) => {
    // Generate slug from pod name
    const slug = generatePodSlug(pod.name);
    return {
      params: { slug },
      props: { pod, slug },
    };
  });
}

const { pod } = Astro.props;

// Get relevant packs for this pod
const getRelevantPacks = (podName: string) => {
  const allPacks = packsCatalog.availablePacks;
  
  // Define pack recommendations based on pod type
  const packRecommendations: Record<string, string[]> = {
    'ecommerce-engine-pod': ['launch-pack', 'growth-pack', 'integration-pack'],
    'ar-vr-experience-pod': ['brand-starter-pack', 'web-presence-pack'],
    'ai-product-studio-pod': ['growth-pack', 'integration-pack'],
    'product-launch-pod': ['launch-pack', 'brand-starter-pack', 'web-presence-pack'],
    'admin-workflow-automation-pod': ['integration-pack', 'growth-pack'],
    'ai-ml-integration-pod': ['integration-pack', 'growth-pack'],
    'mobile-first-saas-pod': ['launch-pack', 'growth-pack', 'web-presence-pack'],
    'devops-infra-automation-pod': ['integration-pack']
  };
  
  // Generate slug from pod name for matching
  const podSlug = generatePodSlug(podName);
  
  // Get recommended pack IDs for this pod
  const recommendedPackIds = packRecommendations[podSlug] || ['launch-pack', 'growth-pack'];
  
  // Return the actual pack objects
  return allPacks.filter(pack => recommendedPackIds.includes(pack.id)).slice(0, 3);
};

const relevantPacks = getRelevantPacks(pod.name);

// Generate comprehensive meta information for the pod
const generateMetaInfo = (pod: any) => {
  const title = `${pod.name} - NovaPod AI`;
  const description = pod.tagline || `Professional ${pod.name} development team. Get your dedicated development pod for scalable, high-quality solutions.`;
  
  // Create a more detailed description for better SEO
  const detailedDescription = `${pod.tagline} ${pod.whatsInPod?.description || ''} Starting at ₹${(pod.basePriceINR / 100000).toFixed(1)}L/month. Get your dedicated development team today.`;
  
  // Generate keywords based on pod content
  const keywords = [
    pod.name,
    'development pod',
    'dedicated team',
    'software development',
    'custom development',
    'NovaPod AI'
  ].join(', ');
  
  // Use NovaPod AI logo for consistent branding
  const image = '/assets/logo/logo_png.png';
  const imageAlt = `${pod.name} - NovaPod AI Development Team`;
  
  // Generate canonical URL
  const canonicalUrl = `https://novapod.ai/pods/${generatePodSlug(pod.name)}`;
  
  return {
    title,
    description: detailedDescription,
    keywords,
    image,
    imageAlt,
    canonicalUrl
  };
};

const metaInfo = generateMetaInfo(pod);
---

<Layout 
  title={metaInfo.title} 
  description={metaInfo.description}
  image={metaInfo.image}
>
  <!-- Enhanced Meta Tags for SEO -->
  <meta name="keywords" content={metaInfo.keywords} />
  <meta name="author" content="NovaPod AI" />
  <meta name="robots" content="index, follow" />
  <link rel="canonical" href={metaInfo.canonicalUrl} />
  
  <!-- Enhanced Open Graph Tags -->
  <meta property="og:title" content={metaInfo.title} />
  <meta property="og:description" content={metaInfo.description} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={metaInfo.canonicalUrl} />
  <meta property="og:image" content={metaInfo.image} />
  <meta property="og:image:alt" content={metaInfo.imageAlt} />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta property="og:site_name" content="NovaPod AI" />
  <meta property="og:locale" content="en_US" />
  
  <!-- Enhanced Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={metaInfo.title} />
  <meta name="twitter:description" content={metaInfo.description} />
  <meta name="twitter:image" content={metaInfo.image} />
  <meta name="twitter:image:alt" content={metaInfo.imageAlt} />
  <meta name="twitter:site" content="@novapod_ai" />
  <meta name="twitter:creator" content="@novapod_ai" />
  
  <!-- Additional Meta Tags -->
  <meta name="application-name" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-title" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  
  <!-- Structured Data for Rich Snippets -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Service",
    "name": pod.name,
    "description": metaInfo.description,
    "provider": {
      "@type": "Organization",
      "name": "NovaPod AI",
      "url": "https://novapod.ai"
    },
    "offers": {
      "@type": "Offer",
      "price": pod.basePriceINR,
      "priceCurrency": "INR",
      "availability": "https://schema.org/InStock"
    },
    "image": metaInfo.image,
    "url": metaInfo.canonicalUrl
  })} />
  
  <!-- Add meta tag with pod ID for debugging -->
  <meta name="current-pod-id" content={pod.id} />
  
  <!-- Add class to body for dark header -->
  <script>
    document.body.classList.add('dark-header-page');
  </script>
  
  <!-- Pod Detail Page Cart Handler -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Get pod ID from meta tag
      const podId = document.querySelector('meta[name="current-pod-id"]')?.getAttribute('content');
      console.log('🔍 [PodDetail] Pod ID from meta:', podId);
      
      // Handle pack cart operations specifically for pod detail page
      document.addEventListener('click', async function(e) {
        const target = e.target as HTMLElement;
        const button = target?.closest('[data-add-to-cart][data-item-type="pack"]') as HTMLElement;
        if (!button) return;
        
        e.preventDefault();
        e.stopPropagation();
        
        const packId = button.dataset.itemId;
        console.log('🔍 [PodDetail] Pack button clicked:', { packId, podId });
        
        try {
          const { SummaryShared } = await import('../../utils/summaryShared.js');
          const shared = new SummaryShared();
          
          // Check if pack is already in cart
          const cartStatus = await shared.getPackCartStatus(packId);
          
          if (cartStatus.inCart) {
            // Remove pack with confirmation
            const cart = await shared.getCart();
            const selectedPack = cart.find((item) => item.id === packId && item.type === 'pack');
            const packName = selectedPack?.name || 'Selected Pack';
            
            if ((window as any).removeItemConfirmationModal) {
              (window as any).removeItemConfirmationModal.show(
                packName,
                'pack',
                async () => {
                  // Confirm callback
                  await shared.removePack(packId);
                  shared.showNotification('Pack removed from cart', 'success');
                },
                () => {
                  // Cancel callback - do nothing
                  console.log('Pack removal cancelled');
                }
              );
            } else {
              // Fallback to direct removal if modal not available
              await shared.removePack(packId);
              shared.showNotification('Pack removed from cart', 'success');
            }
          } else {
            if (!cartStatus.hasPod) {
              // No pod in cart, add both current pod and pack
              console.log('🔍 [PodDetail] Adding both pod and pack:', { podId, packId });
              const success = await shared.addPodAndPack(podId, packId);
              if (success) {
                console.log('Pod and pack added successfully');
              }
            } else {
              // Pod exists, just add pack
              console.log('🔍 [PodDetail] Adding pack only:', packId);
              const pack = await shared.addPack(packId);
              if (pack) {
                shared.showNotification('Pack added to cart successfully!', 'success');
              }
            }
          }
        } catch (error) {
          console.error('Error in pod detail cart handler:', error);
          showNotification('Failed to add items to cart', 'error');
        }
      });
      
      // Show notification function
      function showNotification(message: string, type: 'success' | 'error' = 'success') {
        const notification = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-500' : 'bg-green-500';
        notification.className = `fixed top-4 right-4 ${bgColor} text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.classList.remove('translate-x-full');
        }, 100);
        
        setTimeout(() => {
          notification.classList.add('translate-x-full');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }
    });
  </script>
  
  <!-- Hero Section -->
  <PodHeroSection pod={{ ...pod, id: pod.id }} />

  <!-- Ideal For Section -->
  <PodIdealForSection idealFor={pod.idealFor} />

  <!-- What's in the Pod Section -->
  <PodWhatsInSection whatsInPod={pod.whatsInPod} />

  <!-- What You Get Section -->
  <PodWhatYouGetSection whatCanDo={pod.whatCanDo} />

  <!-- Delivery Timelines Section -->
  <PodDeliveryTimelinesSection deliveryTimelines={pod.deliveryTimelines} />

  <!-- Why Teams Trust This Pod Section -->
  <PodWhyTrustSection whyTrust={pod.whyTrust} />

  <!-- Past Use Cases Section -->
  <PodPastUseCasesSection pastUseCases={pod.pastUseCases} />

  <!-- Pricing Section -->
  <PodPricingSection pod={pod} />

  <!-- Add Packs to Your Pod Section -->
  <PodAddPacksSection relevantPacks={relevantPacks} />

  <!-- Ready to Launch CTA Section -->
  <PodReadyToLaunchSection pod={{ ...pod, id: pod.id }} />
  
  <!-- Remove Item Confirmation Modal -->
  <RemoveItemConfirmationModal />
</Layout>

<style>
  .animate-fade-in { animation: fadeIn 0.6s ease-out; }
  .animate-fade-in-up { animation: fadeInUp 0.8s ease-out; }
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  @keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
</style> 