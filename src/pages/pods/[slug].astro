---
import Layout from '../../layouts/Layout.astro';
import { catalogUtils } from '../../content/catalog/_index.js';
import { packsCatalog } from '../../content/catalog/_packs.js';
import {
  PodHeroSection,
  PodIdealForSection,
  PodWhatsInSection,
  PodWhatYouGetSection,
  PodDeliveryTimelinesSection,
  PodWhyTrustSection,
  PodPastUseCasesSection,
  PodPricingSection,
  PodAddPacksSection,
  PodReadyToLaunchSection
} from '../../components/pod-detail/index.js';

export async function getStaticPaths() {
  const { pods } = catalogUtils.getAllProducts();
  return pods.map((pod) => {
    // Generate slug from pod name
    const slug = pod.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
    return {
      params: { slug },
      props: { pod },
    };
  });
}

const { pod } = Astro.props;

// Get relevant packs for this pod
const getRelevantPacks = (podName: string) => {
  const allPacks = packsCatalog.availablePacks;
  
  // Define pack recommendations based on pod type
  const packRecommendations: Record<string, string[]> = {
    'ecommerce-engine-pod': ['launch-pack', 'growth-pack', 'integration-pack'],
    'ar-vr-experience-pod': ['brand-starter-pack', 'web-presence-pack'],
    'ai-product-studio-pod': ['growth-pack', 'integration-pack'],
    'product-launch-pod': ['launch-pack', 'brand-starter-pack', 'web-presence-pack'],
    'admin-workflow-automation-pod': ['integration-pack', 'growth-pack'],
    'ai-ml-integration-pod': ['integration-pack', 'growth-pack'],
    'mobile-first-saas-pod': ['launch-pack', 'growth-pack', 'web-presence-pack'],
    'devops-infra-automation-pod': ['integration-pack']
  };
  
  // Generate slug from pod name for matching
  const podSlug = podName.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
  
  // Get recommended pack IDs for this pod
  const recommendedPackIds = packRecommendations[podSlug] || ['launch-pack', 'growth-pack'];
  
  // Return the actual pack objects
  return allPacks.filter(pack => recommendedPackIds.includes(pack.id)).slice(0, 3);
};

const relevantPacks = getRelevantPacks(pod.name);
---

<Layout title={`${pod.name} - Pod Details`} description={pod.tagline}>
  <!-- Add class to body for dark header -->
  <script>
    document.body.classList.add('dark-header-page');
  </script>
  
  <!-- Hero Section -->
  <PodHeroSection pod={pod} />

  <!-- Ideal For Section -->
  <PodIdealForSection idealFor={pod.idealFor} />

  <!-- What's in the Pod Section -->
  <PodWhatsInSection whatsInPod={pod.whatsInPod} />

  <!-- What You Get Section -->
  <PodWhatYouGetSection whatCanDo={pod.whatCanDo} />

  <!-- Delivery Timelines Section -->
  <PodDeliveryTimelinesSection deliveryTimelines={pod.deliveryTimelines} />

  <!-- Why Teams Trust This Pod Section -->
  <PodWhyTrustSection whyTrust={pod.whyTrust} />

  <!-- Past Use Cases Section -->
  <PodPastUseCasesSection pastUseCases={pod.pastUseCases} />

  <!-- Pricing Section -->
  <PodPricingSection pod={pod} />

  <!-- Add Packs to Your Pod Section -->
  <PodAddPacksSection relevantPacks={relevantPacks} />

  <!-- Ready to Launch CTA Section -->
  <PodReadyToLaunchSection pod={pod} />
</Layout>

<style>
  .animate-fade-in { animation: fadeIn 0.6s ease-out; }
  .animate-fade-in-up { animation: fadeInUp 0.8s ease-out; }
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  @keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
</style> 