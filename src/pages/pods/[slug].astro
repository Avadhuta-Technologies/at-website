---
import Layout from '../../layouts/Layout.astro';
import { catalogUtils } from '../../content/catalog/_index.js';
import { packsCatalog } from '../../content/catalog/_packs.js';
import {
  PodHeroSection,
  PodIdealForSection,
  PodWhatsInSection,
  PodWhatYouGetSection,
  PodDeliveryTimelinesSection,
  PodWhyTrustSection,
  PodPastUseCasesSection,
  PodPricingSection,
  PodAddPacksSection,
  PodReadyToLaunchSection
} from '../../components/pod-detail/index.js';

export async function getStaticPaths() {
  const { pods } = catalogUtils.getAllProducts();
  return pods.map((pod) => {
    // Generate slug from pod name
    const slug = pod.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
    return {
      params: { slug },
      props: { pod },
    };
  });
}

const { pod } = Astro.props;

// Get relevant packs for this pod
const getRelevantPacks = (podName: string) => {
  const allPacks = packsCatalog.availablePacks;
  
  // Define pack recommendations based on pod type
  const packRecommendations: Record<string, string[]> = {
    'ecommerce-engine-pod': ['launch-pack', 'growth-pack', 'integration-pack'],
    'ar-vr-experience-pod': ['brand-starter-pack', 'web-presence-pack'],
    'ai-product-studio-pod': ['growth-pack', 'integration-pack'],
    'product-launch-pod': ['launch-pack', 'brand-starter-pack', 'web-presence-pack'],
    'admin-workflow-automation-pod': ['integration-pack', 'growth-pack'],
    'ai-ml-integration-pod': ['integration-pack', 'growth-pack'],
    'mobile-first-saas-pod': ['launch-pack', 'growth-pack', 'web-presence-pack'],
    'devops-infra-automation-pod': ['integration-pack']
  };
  
  // Generate slug from pod name for matching
  const podSlug = podName.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
  
  // Get recommended pack IDs for this pod
  const recommendedPackIds = packRecommendations[podSlug] || ['launch-pack', 'growth-pack'];
  
  // Return the actual pack objects
  return allPacks.filter(pack => recommendedPackIds.includes(pack.id)).slice(0, 3);
};

const relevantPacks = getRelevantPacks(pod.name);
---

<Layout title={`${pod.name} - Pod Details`} description={pod.tagline}>
  <!-- Add class to body for dark header -->
  <script>
    document.body.classList.add('dark-header-page');
  </script>
  
  <!-- Pod Detail Page Cart Handler -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Handle add to cart button clicks for pod detail page
      document.addEventListener('click', async function(e) {
        if (e.target.matches('[data-add-to-cart]')) {
          e.preventDefault();
          
          const button = e.target;
          const itemType = button.dataset.itemType;
          
          // Special handling for pack addition from pod detail page
          if (itemType === 'pack') {
            const packId = button.dataset.itemId;
            const podId = '${pod.id}'; // Pod ID from the current page
            
            console.log('🔍 [PodDetail] Adding pack from pod detail page:', { packId, podId });
            
            try {
              // Import the summaryShared utility
              const { SummaryShared } = await import('/src/utils/summaryShared.js');
              const shared = new SummaryShared();
              
              // Add both pod and pack, then navigate to summary
              const success = await shared.addPodAndPack(podId, packId);
              
              if (success) {
                // Navigation is handled in addPodAndPack method
                console.log('Pod and pack added successfully, navigating to summary...');
              } else {
                console.error('Failed to add pod and pack');
              }
            } catch (error) {
              console.error('Error in pod detail cart handler:', error);
              showNotification('Failed to add items to cart', 'error');
            }
          } else if (itemType === 'pod') {
            // Handle pod selection/replacement from pod detail page
            const podId = button.dataset.itemId;
            
            console.log('🔍 [PodDetail] Pod selection from pod detail page:', { podId });
            
            try {
              // Import the summaryShared utility
              const { SummaryShared } = await import('/src/utils/summaryShared.js');
              const shared = new SummaryShared();
              
              // Check if there's already a pod in cart
              const cart = await shared.getCart();
              const existingPod = cart.find(item => item.type === 'pod');
              
              if (existingPod) {
                console.log('🔍 [PodDetail] Replacing existing pod:', existingPod.id, 'with new pod:', podId);
                // Remove existing pod first (this will also remove all packs)
                await shared.removePod();
              }
              
              // Add the new pod
              const success = await shared.selectPod(podId);
              
              if (success) {
                console.log('Pod selected successfully, navigating to summary...');
                // Navigate to summary page
                window.location.href = '/summary?step=1';
              } else {
                console.error('Failed to select pod');
                showNotification('Failed to select pod', 'error');
              }
            } catch (error) {
              console.error('Error in pod detail pod selection:', error);
              showNotification('Failed to select pod', 'error');
            }
          } else {
            // Handle other item types normally
            const item = {
              id: button.dataset.itemId,
              type: button.dataset.itemType,
              title: button.dataset.itemTitle,
              description: button.dataset.itemDescription,
              price: button.dataset.itemPrice
            };
            
            try {
              // Use localStorage directly
              const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
              const existingItem = cart.find(i => i.id === item.id && i.type === item.type);
              
              if (existingItem) {
                existingItem.quantity += 1;
              } else {
                cart.push({ ...item, quantity: 1 });
              }
              
              localStorage.setItem('novapod-cart', JSON.stringify(cart));
              
              // Dispatch cart-updated event
              window.dispatchEvent(new CustomEvent('cart-updated'));
              
              // Update cart badge
              const badge = document.querySelector('.cart-badge');
              if (badge) {
                const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
                badge.textContent = totalItems;
                badge.style.display = totalItems > 0 ? 'flex' : 'none';
              }
              
              showNotification('Item added to cart!');
            } catch (error) {
              console.error('Failed to add item to cart:', error);
              showNotification('Failed to add item to cart');
            }
          }
        }
      });
      
      // Show notification function
      function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-500' : 'bg-green-500';
        notification.className = `fixed top-4 right-4 ${bgColor} text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
          notification.classList.remove('translate-x-full');
        }, 100);
        
        // Remove after 3 seconds
        setTimeout(() => {
          notification.classList.add('translate-x-full');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }
    });
  </script>
  
  <!-- Hero Section -->
  <PodHeroSection pod={{ ...pod, id: pod.id }} />

  <!-- Ideal For Section -->
  <PodIdealForSection idealFor={pod.idealFor} />

  <!-- What's in the Pod Section -->
  <PodWhatsInSection whatsInPod={pod.whatsInPod} />

  <!-- What You Get Section -->
  <PodWhatYouGetSection whatCanDo={pod.whatCanDo} />

  <!-- Delivery Timelines Section -->
  <PodDeliveryTimelinesSection deliveryTimelines={pod.deliveryTimelines} />

  <!-- Why Teams Trust This Pod Section -->
  <PodWhyTrustSection whyTrust={pod.whyTrust} />

  <!-- Past Use Cases Section -->
  <PodPastUseCasesSection pastUseCases={pod.pastUseCases} />

  <!-- Pricing Section -->
  <PodPricingSection pod={pod} />

  <!-- Add Packs to Your Pod Section -->
  <PodAddPacksSection relevantPacks={relevantPacks} />

  <!-- Ready to Launch CTA Section -->
  <PodReadyToLaunchSection pod={{ ...pod, id: pod.id }} />
</Layout>

<style>
  .animate-fade-in { animation: fadeIn 0.6s ease-out; }
  .animate-fade-in-up { animation: fadeInUp 0.8s ease-out; }
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-600 { animation-delay: 0.6s; }
  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  @keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
</style> 