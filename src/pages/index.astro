---
import Layout from '../layouts/Layout.astro';
import Breadcrumb from '../components/layout/Breadcrumb.astro';
import HomeHeroSection from '../components/home/HomeHeroSection.astro';
import HomePodsSection from '../components/home/HomePodsSection.astro';
import HomePacksSection from '../components/home/HomePacksSection.astro';
import HomeWhyWorksSection from '../components/home/HomeWhyWorksSection.astro';
import HomeBuiltForSection from '../components/home/HomeBuiltForSection.astro';
import HomeSuccessStoriesSection from '../components/home/HomeSuccessStoriesSection.astro';
import HomePodStrategistSection from '../components/home/HomePodStrategistSection.astro';
import HomeFinalCTASection from '../components/home/HomeFinalCTASection.astro';
import HomeFAQSection from '../components/home/HomeFAQSection.astro';
import HomeHowItWorksSection from '../components/home/HomeHowItWorksSection.astro';
// Import isolated home content
import { 
  homeHeroData,
  homePodsData,
  homeWhyWorksData,
  homeBuiltForData,
  homeSuccessStoriesData,
  homePodStrategistData,
  homeFinalCTAData,
  homeFAQData,
  homeHowItWorksData
} from '../content/home/_index.js';

---

<Layout 
  description="NovaPod.ai - Specialized development pods for startups and enterprises. Get dedicated teams of developers, designers, and project managers to build your next digital product."
  title="NovaPod.ai - Specialized Development Pods"
>

  
  <!-- Hero Section -->
  <HomeHeroSection data={homeHeroData} />

  <!-- How It Works Section -->
  <HomeHowItWorksSection data={homeHowItWorksData} />
  
  <!-- Pods Section -->
  <HomePodsSection data={homePodsData} />
  
  <!-- Packs Section -->
  <HomePacksSection />

  <!-- Pod Strategist Section -->
  <HomePodStrategistSection data={homePodStrategistData} />
  
  <!-- Why Works Section -->
  <HomeWhyWorksSection data={homeWhyWorksData} />
  
  <!-- Built For Section -->
  <HomeBuiltForSection data={homeBuiltForData} />
  
  <!-- Success Stories Section -->
  <HomeSuccessStoriesSection data={homeSuccessStoriesData} />
   
  <!-- Final CTA Section -->
  <HomeFinalCTASection data={homeFinalCTAData} />
  
  <!-- FAQ Section -->
  <HomeFAQSection data={homeFAQData} />
</Layout>

<style>
  /* Page-specific styles */
  .home-page {
    /* Any home page specific styles can go here */
  }
</style>

<script>
  // Function to update home pod button appearances based on cart state
  async function updateHomePodButtons() {
    try {
      const { SummaryShared } = await import('../utils/summaryShared.js');
      const shared = new SummaryShared();
      const cart = await shared.getCart();
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      
      // Get all pod buttons on home page
      const podButtons = document.querySelectorAll('[data-add-to-cart][data-item-type="pod"]');
      
      podButtons.forEach((button: Element) => {
        const buttonElement = button as HTMLElement;
        const itemId = buttonElement.getAttribute('data-item-id');
        const buttonText = buttonElement.querySelector('.cta-text') || buttonElement;
        
        if (selectedPod && selectedPod.id === itemId) {
          // This pod is selected - show "Remove Pod"
          buttonElement.classList.remove('bg-gradient-to-r', 'from-blue-500', 'to-purple-500', 'hover:from-blue-600', 'hover:to-purple-600');
          buttonElement.classList.add('bg-red-500', 'hover:bg-red-600');
          if (buttonText.textContent) {
            buttonText.textContent = 'Remove Pod';
          }
        } else {
          // This pod is not selected - show "Reserve Pod"
          buttonElement.classList.remove('bg-red-500', 'hover:bg-red-600');
          buttonElement.classList.add('bg-gradient-to-r', 'from-blue-500', 'to-purple-500', 'hover:from-blue-600', 'hover:to-purple-600');
          if (buttonText.textContent) {
            buttonText.textContent = 'Reserve Pod';
          }
        }
      });
    } catch (error) {
      console.error('Error updating home pod buttons:', error);
    }
  }

  // Global event handler for data-add-to-cart buttons on home page
  document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('click', async function(e) {
      if (e.target && (e.target as HTMLElement).matches('[data-add-to-cart]')) {
        e.preventDefault();
        e.stopPropagation();
        
        const button = e.target as HTMLElement;
        const itemId = button.getAttribute('data-item-id');
        const itemType = button.getAttribute('data-item-type');
        const itemTitle = button.getAttribute('data-item-title');
        const itemDescription = button.getAttribute('data-item-description');
        
        console.log('🔍 [Home] Add to cart clicked:', { itemId, itemType, itemTitle });
        
        if (itemId && itemType) {
          try {
            // Import the shared utility
            const { SummaryShared } = await import('../utils/summaryShared.js');
            const shared = new SummaryShared();
            
            // Check if this pod is already in cart
            const cart = await shared.getCart();
            const existingPod = cart.find((item: any) => item.type === 'pod');
            
            if (existingPod && existingPod.id === itemId) {
              // Pod is already in cart - remove it
              const success = await shared.removePod();
              if (success) {
                shared.showNotification(`${itemTitle || 'Pod'} removed from cart!`);
                // Update button appearance
                updateHomePodButtons();
              } else {
                shared.showNotification('Failed to remove pod from cart', 'error');
              }
            } else {
              // Pod is not in cart - add it
              const cartItem = {
                id: itemId,
                type: itemType,
                title: itemTitle || '',
                description: itemDescription || '',
                price: '',
                reservationMonths: itemType === 'pod' ? 3 : undefined
              };
              
              // Add to cart
              const success = await shared.addToCart(cartItem);
              
              if (success) {
                // Show success notification
                shared.showNotification(`${itemTitle || 'Item'} added to cart!`);
                
                // Navigate to summary page
                window.location.href = '/summary?step=1';
              } else {
                shared.showNotification('Failed to add item to cart', 'error');
              }
            }
          } catch (error) {
            console.error('🔍 [Home] Error adding to cart:', error);
            
            // Fallback notification
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = 'Error adding to cart';
            document.body.appendChild(notification);
            
            setTimeout(() => {
              notification.remove();
            }, 3000);
          }
        }
      }
    });
  });

  // Update button appearances on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateHomePodButtons();
  });

  // Update button appearances when cart changes
  window.addEventListener('cart-updated', () => {
    updateHomePodButtons();
  });

</script>
