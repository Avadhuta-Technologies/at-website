---
import Layout from '../layouts/Layout.astro';
import Breadcrumb from '../components/layout/Breadcrumb.astro';
import HomeHeroSection from '../components/home/HomeHeroSection.astro';
import HomePodsSection from '../components/home/HomePodsSection.astro';
import HomePacksSection from '../components/home/HomePacksSection.astro';
import HomeWhyWorksSection from '../components/home/HomeWhyWorksSection.astro';
import HomeBuiltForSection from '../components/home/HomeBuiltForSection.astro';
import HomeSuccessStoriesSection from '../components/home/HomeSuccessStoriesSection.astro';
import HomePodStrategistSection from '../components/home/HomePodStrategistSection.astro';
import HomeFinalCTASection from '../components/home/HomeFinalCTASection.astro';
import HomeFAQSection from '../components/home/HomeFAQSection.astro';
import HomeHowItWorksSection from '../components/home/HomeHowItWorksSection.astro';
// Import isolated home content
import { 
  homeHeroData,
  homePodsData,
  homeWhyWorksData,
  homeBuiltForData,
  homeSuccessStoriesData,
  homePodStrategistData,
  homeFinalCTAData,
  homeFAQData,
  homeHowItWorksData
} from '../content/home/_index.js';

// Generate comprehensive meta information for the homepage
const generateMetaInfo = () => {
  const title = "NovaPod AI - Specialized Development Pods for Startups & Enterprises";
  const description = "Get dedicated teams of developers, designers, and project managers to build your next digital product. Specialized development pods for startups and enterprises. Starting at ₹2.5L/month.";
  
  // Generate keywords based on homepage content
  const keywords = [
    'development pods',
    'dedicated development team',
    'software development',
    'custom development',
    'startup development',
    'enterprise development',
    'web development',
    'mobile development',
    'AI development',
    'NovaPod AI',
    'development services',
    'tech teams'
  ].join(', ');
  
  // Use NovaPod AI logo for consistent branding
  const image = '/assets/logo/novapod_ai_logo.svg';
  const imageAlt = 'NovaPod AI - Specialized Development Pods';
  
  // Generate canonical URL
  const canonicalUrl = 'https://novapod.ai';
  
  return {
    title,
    description,
    keywords,
    image,
    imageAlt,
    canonicalUrl
  };
};

const metaInfo = generateMetaInfo();
---

<Layout 
  title={metaInfo.title}
  description={metaInfo.description}
  image={metaInfo.image}
>
  <!-- Enhanced Meta Tags for SEO -->
  <meta name="keywords" content={metaInfo.keywords} />
  <meta name="author" content="NovaPod AI" />
  <meta name="robots" content="index, follow" />
  <link rel="canonical" href={metaInfo.canonicalUrl} />
  
  <!-- Enhanced Open Graph Tags -->
  <meta property="og:title" content={metaInfo.title} />
  <meta property="og:description" content={metaInfo.description} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={metaInfo.canonicalUrl} />
  <meta property="og:image" content={metaInfo.image} />
  <meta property="og:image:alt" content={metaInfo.imageAlt} />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta property="og:site_name" content="NovaPod AI" />
  <meta property="og:locale" content="en_US" />
  
  <!-- Enhanced Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={metaInfo.title} />
  <meta name="twitter:description" content={metaInfo.description} />
  <meta name="twitter:image" content={metaInfo.image} />
  <meta name="twitter:image:alt" content={metaInfo.imageAlt} />
  <meta name="twitter:site" content="@novapod_ai" />
  <meta name="twitter:creator" content="@novapod_ai" />
  
  <!-- Additional Meta Tags -->
  <meta name="application-name" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-title" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  
  <!-- Structured Data for Rich Snippets -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "NovaPod AI",
    "description": metaInfo.description,
    "url": metaInfo.canonicalUrl,
    "logo": metaInfo.image,
    "image": metaInfo.image,
    "sameAs": [
      "https://twitter.com/novapod_ai",
      "https://linkedin.com/company/novapod-ai"
    ],
    "contactPoint": {
      "@type": "ContactPoint",
      "contactType": "customer service",
      "url": "https://novapod.ai/contact"
    },
    "serviceArea": {
      "@type": "GeoCircle",
      "geoMidpoint": {
        "@type": "GeoCoordinates",
        "latitude": 20.5937,
        "longitude": 78.9629
      },
      "geoRadius": "10000"
    },
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": "Development Pods",
      "itemListElement": [
        {
          "@type": "Offer",
          "itemOffered": {
            "@type": "Service",
            "name": "Development Pods",
            "description": "Dedicated development teams for startups and enterprises"
          }
        }
      ]
    }
  })} />
  
  <!-- Hero Section -->
  <HomeHeroSection data={homeHeroData} />

  <!-- How It Works Section -->
  <HomeHowItWorksSection data={homeHowItWorksData} />
  
  <!-- Pods Section -->
  <HomePodsSection data={homePodsData} />
  
  <!-- Packs Section -->
  <HomePacksSection />

  <!-- Pod Strategist Section -->
  <HomePodStrategistSection data={homePodStrategistData} />
  
  <!-- Why Works Section -->
  <HomeWhyWorksSection data={homeWhyWorksData} />
  
  <!-- Built For Section -->
  <HomeBuiltForSection data={homeBuiltForData} />
  
  <!-- Success Stories Section -->
  <HomeSuccessStoriesSection data={homeSuccessStoriesData} />
   
  <!-- Final CTA Section -->
  <HomeFinalCTASection data={homeFinalCTAData} />
  
  <!-- FAQ Section -->
  <HomeFAQSection data={homeFAQData} />
</Layout>

<style>
  /* Page-specific styles */
  .home-page {
    /* Any home page specific styles can go here */
  }
</style>

<script>
  // Function to update home pod button appearances based on cart state
  async function updateHomePodButtons() {
    try {
      const { SummaryShared } = await import('../utils/summaryShared.js');
      const shared = new SummaryShared();
      const cart = await shared.getCart();
      const selectedPod = cart.find((item: any) => item.type === 'pod');
      
      // Get all pod buttons on home page
      const podButtons = document.querySelectorAll('[data-add-to-cart][data-item-type="pod"]');
      
      podButtons.forEach((button: Element) => {
        const buttonElement = button as HTMLElement;
        const itemId = buttonElement.getAttribute('data-item-id');
        const buttonText = buttonElement.querySelector('.cta-text') || buttonElement;
        
        if (selectedPod && selectedPod.id === itemId) {
          // This pod is selected - show "Remove Pod"
          buttonElement.classList.remove('bg-gradient-to-r', 'from-[#22c55e]', 'to-[#0ea5e9]', 'hover:from-[#16a34a]', 'hover:to-[#0284c7]');
          buttonElement.classList.add('bg-red-500', 'hover:bg-red-600');
          if (buttonText.textContent) {
            buttonText.textContent = 'Remove Pod';
          }
        } else {
          // This pod is not selected - show "Reserve Pod"
          buttonElement.classList.remove('bg-red-500', 'hover:bg-red-600');
          buttonElement.classList.add('bg-gradient-to-r', 'from-[#22c55e]', 'to-[#0ea5e9]', 'hover:from-[#16a34a]', 'hover:to-[#0284c7]');
          if (buttonText.textContent) {
            buttonText.textContent = 'Reserve Pod';
          }
        }
      });
    } catch (error) {
      console.error('Error updating home pod buttons:', error);
    }
  }

  // Global event handler for data-add-to-cart buttons on home page - using event delegation
  document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('click', async function(e) {
      const target = e.target as HTMLElement;
      const button = target.closest('[data-add-to-cart]') as HTMLElement;
      
      if (button) {
        e.preventDefault();
        e.stopPropagation();
        
        const itemId = button.getAttribute('data-item-id');
        const itemType = button.getAttribute('data-item-type');
        const itemTitle = button.getAttribute('data-item-title');
        const itemDescription = button.getAttribute('data-item-description');
        
        console.log(`🔍 [${new Date().toISOString()}] [Home] Add to cart clicked:`, { itemId, itemType, itemTitle });
        
        if (itemId && itemType) {
          try {
            // Import the shared utility
            const { SummaryShared } = await import('../utils/summaryShared.js');
            const shared = new SummaryShared();
            
            // Check if this pod is already in cart
            const cart = await shared.getCart();
            const existingPod = cart.find((item: any) => item.type === 'pod');
            
            if (existingPod && existingPod.id === itemId) {
              // Pod is already in cart - remove it
              const success = await shared.removePod();
              if (success) {
                shared.showNotification(`${itemTitle || 'Pod'} removed from cart!`);
                // Update button appearance
                updateHomePodButtons();
              } else {
                shared.showNotification('Failed to remove pod from cart', 'error');
              }
            } else {
              // Pod is not in cart - add it with confirmation if replacing
              if (itemType === 'pod') {
                const selectedPod = await shared.selectPodWithConfirmation(itemId);
                if (selectedPod) {
                  shared.showNotification(`${itemTitle || 'Pod'} added to cart!`);
                  // Navigate to summary page
                  window.location.href = '/summary?step=1';
                }
              } else {
                // For non-pod items, use regular addToCart
                const cartItem = {
                  id: itemId,
                  type: itemType,
                  title: itemTitle || '',
                  description: itemDescription || '',
                  price: '',
                  reservationMonths: itemType === 'pod' ? 3 : undefined
                };
                
                const success = await shared.addToCart(cartItem);
                
                if (success) {
                  shared.showNotification(`${itemTitle || 'Item'} added to cart!`);
                  window.location.href = '/summary?step=1';
                } else {
                  shared.showNotification('Failed to add item to cart', 'error');
                }
              }
            }
          } catch (error) {
            console.error('🔍 [Home] Error adding to cart:', error);
            
            // Fallback notification
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = 'Error adding to cart';
            document.body.appendChild(notification);
            
            setTimeout(() => {
              notification.remove();
            }, 3000);
          }
        }
      }
    });
  });

  // Update button appearances on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateHomePodButtons();
  });

  // Update button appearances when cart changes
  window.addEventListener('cart-updated', () => {
    updateHomePodButtons();
  });

</script>
