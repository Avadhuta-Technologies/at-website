---
// Test page for cart functionality
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Cart Service Test</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background: #f5f5f5;
    }
    .test-section {
      background: white;
      padding: 20px;
      margin: 20px 0;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .test-button {
      background: #22c55e;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      margin: 5px;
    }
    .test-button:hover {
      background: #16a34a;
    }
    .result {
      margin-top: 10px;
      padding: 10px;
      background: #f0f0f0;
      border-radius: 4px;
    }
    .error {
      background: #fee;
      color: #c00;
    }
    .success {
      background: #efe;
      color: #0a0;
    }
  </style>
</head>
<body>
  <h1>Cart Service Test Page</h1>
  
  <div class="test-section">
    <h2>Cart Service Availability Test</h2>
    <button class="test-button" onclick="testCartServiceAvailability()">Test Cart Service</button>
    <div id="availability-result" class="result"></div>
  </div>
  
  <div class="test-section">
    <h2>Cart Count Test</h2>
    <button class="test-button" onclick="testGetCartCount()">Get Cart Count</button>
    <div id="count-result" class="result"></div>
  </div>
  
  <div class="test-section">
    <h2>Add Item Test</h2>
    <button class="test-button" onclick="testAddToCart()">Add Test Item</button>
    <div id="add-result" class="result"></div>
  </div>
  
  <div class="test-section">
    <h2>Clear Cart Test</h2>
    <button class="test-button" onclick="testClearCart()">Clear Cart</button>
    <div id="clear-result" class="result"></div>
  </div>

  <script>
    function showResult(elementId, message, isError = false) {
      const element = document.getElementById(elementId);
      element.textContent = message;
      element.className = `result ${isError ? 'error' : 'success'}`;
    }
    
    function testCartServiceAvailability() {
      try {
        if (typeof window !== 'undefined' && window.cartService) {
          showResult('availability-result', '✅ Cart service is available');
          
          // Test if getCartCount method exists
          if (typeof window.cartService.getCartCount === 'function') {
            showResult('availability-result', '✅ Cart service is available and getCartCount method exists');
          } else {
            showResult('availability-result', '❌ Cart service exists but getCartCount method is missing', true);
          }
        } else {
          showResult('availability-result', '❌ Cart service is not available', true);
        }
      } catch (error) {
        showResult('availability-result', `❌ Error testing cart service: ${error.message}`, true);
      }
    }
    
    async function testGetCartCount() {
      try {
        if (typeof window !== 'undefined' && window.cartService && typeof window.cartService.getCartCount === 'function') {
          const count = await window.cartService.getCartCount();
          showResult('count-result', `✅ Cart count: ${count}`);
        } else {
          showResult('count-result', '❌ Cart service or getCartCount method not available', true);
        }
      } catch (error) {
        showResult('count-result', `❌ Error getting cart count: ${error.message}`, true);
      }
    }
    
    async function testAddToCart() {
      try {
        if (typeof window !== 'undefined' && window.cartService && typeof window.cartService.addToCart === 'function') {
          const testItem = {
            id: 'test-item-' + Date.now(),
            type: 'pack',
            title: 'Test Item',
            description: 'A test item for cart functionality',
            price: '₹999'
          };
          
          const success = await window.cartService.addToCart(testItem);
          if (success) {
            showResult('add-result', '✅ Test item added to cart successfully');
          } else {
            showResult('add-result', '❌ Failed to add test item to cart', true);
          }
        } else {
          showResult('add-result', '❌ Cart service or addToCart method not available', true);
        }
      } catch (error) {
        showResult('add-result', `❌ Error adding to cart: ${error.message}`, true);
      }
    }
    
    async function testClearCart() {
      try {
        if (typeof window !== 'undefined' && window.cartService && typeof window.cartService.clearCart === 'function') {
          const success = await window.cartService.clearCart();
          if (success) {
            showResult('clear-result', '✅ Cart cleared successfully');
          } else {
            showResult('clear-result', '❌ Failed to clear cart', true);
          }
        } else {
          showResult('clear-result', '❌ Cart service or clearCart method not available', true);
        }
      } catch (error) {
        showResult('clear-result', `❌ Error clearing cart: ${error.message}`, true);
      }
    }
    
    // Auto-test on page load
    window.addEventListener('load', () => {
      setTimeout(() => {
        testCartServiceAvailability();
      }, 1000);
    });
  </script>
</body>
</html> 