---
import Layout from '../layouts/Layout.astro';
import Breadcrumb from '../components/layout/Breadcrumb.astro';
import CheckoutHeroSection from '../components/checkout/CheckoutHeroSection.astro';
import CheckoutFormSection from '../components/checkout/CheckoutFormSection.astro';
import SelectedItemsDisplay from '../components/shared/SelectedItemsDisplay.astro';
import { catalogUtils } from '../content/catalog/_index.js';

// Import isolated checkout content
import { 
  checkoutHeroData,
  checkoutFormData
} from '../content/checkout/_index.js';
---
 
<Layout 
  description="Complete your order securely. Review your cart and provide your information to get started with your pod."
  title="Checkout | NovaPod.ai"
>

  
  <!-- Hero Section -->
  <CheckoutHeroSection data={checkoutHeroData} />
  
  <!-- Main Content -->
  <section class="py-16 bg-gray-50">
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Selected Items Display -->
        <div class="lg:col-span-1">
          <div class="sticky top-8">
            <SelectedItemsDisplay />
          </div>
        </div>
        
        <!-- Checkout Form Section -->
        <div class="lg:col-span-2">
          <CheckoutFormSection data={checkoutFormData} />
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { catalogUtils } from '../content/catalog/_index.js';

  // Initialize checkout functionality
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('Initializing checkout page...');
    
    try {
      // Get cart summary from localStorage
      const cartSummary = getCartSummaryFromLocalStorage();
      
      // Display cart items
      displayCartItems(cartSummary);
      
      // Set up form submission
      setupCheckoutForm();
      
    } catch (error) {
      console.error('Error initializing checkout:', error);
    }
  });

  function getCartSummaryFromLocalStorage() {
    try {
      const cartData = localStorage.getItem('novapod-cart');
      if (!cartData) {
        return { items: [], podItem: null, packItems: [], totalPrice: 0 };
      }
      
      const cart = JSON.parse(cartData);
      const podItem = cart.find(item => item.type === 'pod');
      const packItems = cart.filter(item => item.type === 'pack');
      
      const totalPrice = cart.reduce((total, item) => {
        const price = parseFloat(item.price.replace(/[^\d.]/g, '')) || 0;
        return total + price;
      }, 0);
      
      return {
        items: cart,
        podItem,
        packItems,
        totalPrice
      };
    } catch (error) {
      console.error('Error reading cart from localStorage:', error);
      return { items: [], podItem: null, packItems: [], totalPrice: 0 };
    }
  }

  function displayCartItems(cartSummary) {
    const cartContainer = document.getElementById('cart-items');
    if (!cartContainer) return;

    if (cartSummary.items.length === 0) {
      cartContainer.innerHTML = '<p class="text-gray-500">Your cart is empty</p>';
      return;
    }

    let cartHTML = '';
    
    // Display pod
    if (cartSummary.podItem) {
      cartHTML += `
        <div class="cart-item bg-white p-4 rounded-lg border mb-4">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="font-semibold text-lg">${cartSummary.podItem.title}</h3>
              <p class="text-gray-600 text-sm">${cartSummary.podItem.description}</p>
              <span class="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full mt-2">
                ${cartSummary.podItem.badge || 'Pod'}
              </span>
            </div>
            <div class="text-right">
              <div class="font-bold text-lg">${cartSummary.podItem.price}</div>
              <button onclick="removeFromCart('${cartSummary.podItem.id}', 'pod')" 
                      class="text-red-500 text-sm hover:text-red-700">
                Remove
              </button>
            </div>
          </div>
        </div>
      `;
    }

    // Display packs
    cartSummary.packItems.forEach(pack => {
      cartHTML += `
        <div class="cart-item bg-white p-4 rounded-lg border mb-4">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="font-semibold text-lg">${pack.title}</h3>
              <p class="text-gray-600 text-sm">${pack.description}</p>
              <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mt-2">
                ${pack.badge || 'Pack'}
              </span>
            </div>
            <div class="text-right">
              <div class="font-bold text-lg">${pack.price}</div>
              <button onclick="removeFromCart('${pack.id}', 'pack')" 
                      class="text-red-500 text-sm hover:text-red-700">
                Remove
              </button>
            </div>
          </div>
        </div>
      `;
    });

    // Display total
    cartHTML += `
      <div class="border-t pt-4 mt-4">
        <div class="flex justify-between items-center">
          <span class="font-semibold text-lg">Total</span>
          <span class="font-bold text-xl">${catalogUtils.formatPrice(cartSummary.totalPrice, 'INR')}</span>
        </div>
      </div>
    `;

    cartContainer.innerHTML = cartHTML;
  }

  function setupCheckoutForm() {
    const form = document.getElementById('checkout-form') as HTMLFormElement;
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Get form data
      const formData = new FormData(form);
      const orderData = {
        customer: {
          firstName: formData.get('firstName'),
          lastName: formData.get('lastName'),
          email: formData.get('email'),
          phone: formData.get('phone'),
          company: formData.get('company'),
          address: formData.get('address')
        },
        paymentMethod: formData.get('paymentMethod'),
        cart: getCartSummaryFromLocalStorage()
      };

      console.log('Submitting order:', orderData);

      // Simulate order submission
      try {
        // Here you would typically send the order to your backend
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Clear cart after successful order
        localStorage.removeItem('novapod-cart');
        
        // Redirect to order confirmation
        window.location.href = '/order-confirmation';
      } catch (error) {
        console.error('Error submitting order:', error);
        alert('There was an error processing your order. Please try again.');
      }
    });
  }

  // Global function for removing items from cart
  (window as any).removeFromCart = async function(itemId: string, itemType: string) {
    try {
      // Remove item from localStorage
      const cartData = localStorage.getItem('novapod-cart');
      if (cartData) {
        const cart = JSON.parse(cartData);
        const updatedCart = cart.filter((item: any) => !(item.id === itemId && item.type === itemType));
        localStorage.setItem('novapod-cart', JSON.stringify(updatedCart));
      }
      
      // Refresh cart display
      const cartSummary = getCartSummaryFromLocalStorage();
      displayCartItems(cartSummary);
      
      // Show notification
      alert('Item removed from cart');
    } catch (error) {
      console.error('Error removing item from cart:', error);
    }
  };
</script> 