---
import Layout from '../layouts/Layout.astro';
import CheckoutHeroSection from '../components/checkout/CheckoutHeroSection.astro';
import CheckoutFormSection from '../components/checkout/CheckoutFormSection.astro';
import { checkoutHeroData, checkoutFormData } from '../content/checkout/_index.js';
import { catalogUtils } from '../content/catalog/_index.js';
import { calculateCartTotal } from '../utils/pricingUtils.ts';
import '/src/utils/formTest.js';

// Import location utilities
import { detectUserLocation } from '../utils/locationUtils.js';
---

<Layout description="Complete your order - Secure checkout for NovaPod.ai services" title="Checkout | NovaPod.ai">
  <CheckoutHeroSection data={checkoutHeroData} />
  <CheckoutFormSection data={checkoutFormData} />
</Layout>

<script>
  import { catalogUtils } from '../content/catalog/_index.js';
  import { calculateCartTotal } from '../utils/pricingUtils.ts';
  import { detectUserLocation } from '../utils/locationUtils.js';

  // Get cart summary from localStorage
  function getCartSummaryFromLocalStorage() {
    try {
      const cartData = localStorage.getItem('novapod-cart');
      if (!cartData) return { podItems: [], packItems: [], totalPrice: 0 };

      const cart = JSON.parse(cartData);
      const podItems = [];
      const packItems = [];

      for (const item of cart) {
        if (item.type === 'pod') {
          const pod = catalogUtils.getProductForCart(item.id, 'pod');
          if (pod) podItems.push(pod);
        } else if (item.type === 'pack') {
          const pack = catalogUtils.getProductForCart(item.id, 'pack');
          if (pack) packItems.push(pack);
        }
      }

      return { podItems, packItems };
    } catch (error) {
      console.error('Error getting cart summary:', error);
      return { podItems: [], packItems: [], totalPrice: 0 };
    }
  }

  // Display cart items with location-based pricing
  async function displayCartItems(cartSummary: any) {
    const cartContainer = document.getElementById('cart-items');
    if (!cartContainer) return;

    // Get user location for currency
    let userCurrency: 'INR' | 'USD' = 'INR'; // Default
    try {
      const location = await detectUserLocation();
      userCurrency = location.currency as 'INR' | 'USD';
    } catch (error) {
      console.warn('Could not detect user location, using default currency:', error);
    }

    // Calculate cart total with discounts
    const allItems = [...cartSummary.podItems, ...cartSummary.packItems];
    const cartTotal = calculateCartTotal(allItems, userCurrency);

    let cartHTML = '';

    // Display pods
    cartSummary.podItems.forEach((pod: any) => {
      const podPrice = userCurrency === 'INR' ? pod.basePriceINR : pod.basePriceUSD;
      const formattedPrice = userCurrency === 'INR' 
        ? `₹${(podPrice / 100000).toFixed(1)}L` 
        : `$${(podPrice / 1000).toFixed(0)}K`;
      
      cartHTML += `
        <div class="cart-item bg-white p-4 rounded-lg border mb-4">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="font-semibold text-lg">${pod.name}</h3>
              <p class="text-gray-600 text-sm">${pod.tagline}</p>
              <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mt-2">
                Pod
              </span>
            </div>
            <div class="text-right">
              <div class="font-bold text-lg">${formattedPrice}/month</div>
              <button onclick="removeFromCart('${pod.id}', 'pod')" 
                      class="text-red-500 text-sm hover:text-red-700">
                Remove
              </button>
            </div>
          </div>
        </div>
      `;
    });

    // Display packs
    cartSummary.packItems.forEach((pack: any) => {
      const packPrice = userCurrency === 'INR' ? pack.basePriceINR : pack.basePriceUSD;
      const discountAmount = (packPrice * pack.discountPercentage) / 100;
      const finalPrice = packPrice - discountAmount;
      
      const formattedOriginalPrice = userCurrency === 'INR' 
        ? `₹${(packPrice / 1000).toFixed(0)}K` 
        : `$${(packPrice / 1000).toFixed(0)}K`;
      
      const formattedFinalPrice = userCurrency === 'INR' 
        ? `₹${(finalPrice / 1000).toFixed(0)}K` 
        : `