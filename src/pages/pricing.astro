---
import Layout from '../layouts/Layout.astro';
import Breadcrumb from '../components/layout/Breadcrumb.astro';
import PricingHeroSection from '../components/pricing/PricingHeroSection.astro';
import PricingPolicySection from '../components/pricing/PricingPolicySection.astro';
import PodPricingSection from '../components/pricing/PodPricingSection.astro';
import AddonPricingSection from '../components/pricing/AddonPricingSection.astro';
import DiscountsSection from '../components/pricing/DiscountsSection.astro';
import PricingCTASection from '../components/pricing/PricingCTASection.astro';

// Import pricing content (excluding pod and pack data which now comes from catalog)
import { 
  pricingHeroData,
  pricingPolicyData,
  discountsData,
  pricingCTAData
} from '../content/pricing/_index.js';

// Generate comprehensive meta information for the pricing page
const generateMetaInfo = () => {
  const title = "Pricing - Development Pods & Services | NovaPod AI";
  const description = "Transparent pricing for development pods, packs, and add-ons. Get detailed pricing information for all our services. Starting at ₹2.5L/month for dedicated development teams.";
  
  // Generate keywords based on pricing page content
  const keywords = [
    'development pod pricing',
    'software development cost',
    'dedicated team pricing',
    'development services pricing',
    'startup development cost',
    'enterprise development pricing',
    'custom development pricing',
    'NovaPod AI pricing',
    'development team cost',
    'tech team pricing'
  ].join(', ');
  
  // Use NovaPod AI logo for consistent branding
  const image = '/assets/logo/novapod_ai_logo.svg';
  const imageAlt = 'NovaPod AI - Development Pods Pricing';
  
  // Generate canonical URL
  const canonicalUrl = 'https://novapod.ai/pricing';
  
  return {
    title,
    description,
    keywords,
    image,
    imageAlt,
    canonicalUrl
  };
};

const metaInfo = generateMetaInfo();
---

<Layout 
  title={metaInfo.title}
  description={metaInfo.description}
  image={metaInfo.image}
>
  <!-- Enhanced Meta Tags for SEO -->
  <meta name="keywords" content={metaInfo.keywords} />
  <meta name="author" content="NovaPod AI" />
  <meta name="robots" content="index, follow" />
  <link rel="canonical" href={metaInfo.canonicalUrl} />
  
  <!-- Enhanced Open Graph Tags -->
  <meta property="og:title" content={metaInfo.title} />
  <meta property="og:description" content={metaInfo.description} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={metaInfo.canonicalUrl} />
  <meta property="og:image" content={metaInfo.image} />
  <meta property="og:image:alt" content={metaInfo.imageAlt} />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta property="og:site_name" content="NovaPod AI" />
  <meta property="og:locale" content="en_US" />
  
  <!-- Enhanced Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={metaInfo.title} />
  <meta name="twitter:description" content={metaInfo.description} />
  <meta name="twitter:image" content={metaInfo.image} />
  <meta name="twitter:image:alt" content={metaInfo.imageAlt} />
  <meta name="twitter:site" content="@novapod_ai" />
  <meta name="twitter:creator" content="@novapod_ai" />
  
  <!-- Additional Meta Tags -->
  <meta name="application-name" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-title" content="NovaPod AI" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  
  <!-- Structured Data for Rich Snippets -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "WebPage",
    "name": "Pricing",
    "description": metaInfo.description,
    "url": metaInfo.canonicalUrl,
    "mainEntity": {
      "@type": "OfferCatalog",
      "name": "Development Pods & Services Pricing",
      "description": "Transparent pricing for development pods, packs, and add-ons",
      "itemListElement": [
        {
          "@type": "Offer",
          "name": "Development Pods",
          "description": "Dedicated development teams starting at ₹2.5L/month",
          "price": "250000",
          "priceCurrency": "INR"
        },
        {
          "@type": "Offer",
          "name": "Development Packs",
          "description": "Specialized development services and add-ons",
          "price": "45000",
          "priceCurrency": "INR"
        }
      ]
    }
  })} />

  <!-- Hero Section -->
  <PricingHeroSection data={pricingHeroData} />
  
  <!-- Pricing Policy Section -->
  <PricingPolicySection data={pricingPolicyData} />
  
  <!-- Pod Pricing Section -->
  <PodPricingSection />
  
  <!-- Addon Pricing Section -->
  <AddonPricingSection />
  
  <!-- Discounts Section -->
  <DiscountsSection data={discountsData} />
  
  <!-- CTA Section -->
  <PricingCTASection data={pricingCTAData} />
</Layout>

<script>
  // Add to cart functionality for localStorage
  document.addEventListener('DOMContentLoaded', function() {
    // Handle add to cart button clicks
    document.addEventListener('click', async function(e) {
      const target = e.target as HTMLElement;
      if (target.matches('[data-add-to-cart]')) {
        e.preventDefault();
        
        const button = target;
        const item = {
          id: button.dataset.itemId,
          type: button.dataset.itemType,
          title: button.dataset.itemTitle,
          description: button.dataset.itemDescription,
          price: button.dataset.itemPrice
        };
        
        try {
          // Use localStorage directly
          const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
          const existingItem = cart.find((i: any) => i.id === item.id && i.type === item.type);
          
          if (existingItem) {
            existingItem.quantity += 1;
          } else {
            cart.push({ ...item, quantity: 1 });
          }
          
          localStorage.setItem('novapod-cart', JSON.stringify(cart));
          
          // Dispatch cart-updated event
          window.dispatchEvent(new CustomEvent('cart-updated'));
          
          // Update cart badge
          const badge = document.querySelector('.cart-badge') as HTMLElement;
          if (badge) {
            const totalItems = cart.reduce((sum: number, item: any) => sum + item.quantity, 0);
            badge.textContent = totalItems.toString();
            badge.style.display = totalItems > 0 ? 'flex' : 'none';
          }
          
          showNotification('Item added to cart!');
        } catch (error) {
          console.error('Failed to add item to cart:', error);
          showNotification('Failed to add item to cart');
        }
      }
    });
    
    // Show notification function
    function showNotification(message: string) {
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
  });
</script> 