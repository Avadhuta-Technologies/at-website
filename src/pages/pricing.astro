---
import Layout from '../layouts/Layout.astro';
import Breadcrumb from '../components/layout/Breadcrumb.astro';
import PricingHeroSection from '../components/pricing/PricingHeroSection.astro';
import PricingPolicySection from '../components/pricing/PricingPolicySection.astro';
import PodPricingSection from '../components/pricing/PodPricingSection.astro';
import AddonPricingSection from '../components/pricing/AddonPricingSection.astro';
import DiscountsSection from '../components/pricing/DiscountsSection.astro';
import PricingCTASection from '../components/pricing/PricingCTASection.astro';

// Import isolated pricing content
import { 
  pricingHeroData,
  pricingPolicyData,
  podPricingData,
  addonPricingData,
  discountsData,
  pricingCTAData
} from '../content/pricing/_index.js';
---

<Layout description="NovaPod.ai pricing - Transparent pricing for pods, packs, and add-ons. Get detailed pricing information for all our services." title="Pricing | NovaPod.ai">

  <!-- Hero Section -->
  <PricingHeroSection data={pricingHeroData} />
  
  <!-- Pricing Policy Section -->
  <PricingPolicySection data={pricingPolicyData} />
  
  <!-- Pod Pricing Section -->
  <PodPricingSection data={podPricingData} />
  
  <!-- Addon Pricing Section -->
  <AddonPricingSection data={addonPricingData} />
  
  <!-- Discounts Section -->
  <DiscountsSection data={discountsData} />
  
  <!-- CTA Section -->
  <PricingCTASection data={pricingCTAData} />
</Layout>

<script>
  // Add to cart functionality for IndexedDB
  document.addEventListener('DOMContentLoaded', function() {
    // Handle add to cart button clicks
    document.addEventListener('click', async function(e) {
      if (e.target.matches('[data-add-to-cart]')) {
        e.preventDefault();
        
        const button = e.target;
        const item = {
          id: button.dataset.itemId,
          type: button.dataset.itemType,
          title: button.dataset.itemTitle,
          description: button.dataset.itemDescription,
          price: button.dataset.itemPrice
        };
        
        try {
          if (typeof window !== 'undefined' && window.cartUtility) {
            await window.cartUtility.addItem(item);
          } else {
            // Fallback to localStorage
            const cart = JSON.parse(localStorage.getItem('novapod-cart') || '[]');
            const existingItem = cart.find(i => i.id === item.id && i.type === item.type);
            
            if (existingItem) {
              existingItem.quantity += 1;
            } else {
              cart.push({ ...item, quantity: 1 });
            }
            
            localStorage.setItem('novapod-cart', JSON.stringify(cart));
            
            // Update cart badge
            const badge = document.querySelector('.cart-badge');
            if (badge) {
              const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
              badge.textContent = totalItems;
              badge.style.display = totalItems > 0 ? 'flex' : 'none';
            }
            
            showNotification('Item added to cart!');
          }
        } catch (error) {
          console.error('Failed to add item to cart:', error);
          showNotification('Failed to add item to cart');
        }
      }
    });
    
    // Show notification function
    function showNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
  });
</script> 